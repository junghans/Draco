%%
%% Creator: c++2latex -s 10 -n expTraits.cc
%% Date:    Mon Apr 26 10:35:32 1999
%%
\expandafter\ifx\csname indentation\endcsname\relax
\newlength{\indentation}\fi
\setlength{\indentation}{0.5em}
\begin{flushleft}
{\cxxcom //----------------------------------$\ast$-C$+$$+$-$\ast$----------------------------------//}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}expTraits.cc}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}Randy\hspace*{1\indentation}M.\hspace*{1\indentation}Roberts}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}Tue\hspace*{1\indentation}Apr\hspace*{1\indentation}20\hspace*{1\indentation}17:01:56\hspace*{1\indentation}1999}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}\$Id:\hspace*{1\indentation}expTraits.cc,v\hspace*{1\indentation}1.3\hspace*{1\indentation}1999/04/26\hspace*{1\indentation}16:35:26\hspace*{1\indentation}rsqrd\hspace*{1\indentation}Exp\hspace*{1\indentation}\$}\mbox{}\\
{\cxxcom //---------------------------------------------------------------------------//}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}@$>$\hspace*{1\indentation}}\mbox{}\\
{\cxxcom //---------------------------------------------------------------------------//}\mbox{}\\
\mbox{}\\
{\tt\#include} "{\tt expTraits.hh}"\mbox{}\\
{\tt\#include} "{\tt UserVec.hh}"\mbox{}\\
{\tt\#include} "{\tt UserVecTraits.hh}"\mbox{}\\
{\tt\#include} $<${\tt vector}$>$\mbox{}\\
{\tt\#include} $<${\tt iostream}$>$\mbox{}\\
\mbox{}\\
{\cxxcom //\hspace*{1\indentation}The\hspace*{1\indentation}function\hspace*{1\indentation}doit\hspace*{1\indentation}is\hspace*{1\indentation}templated\hspace*{1\indentation}on\hspace*{1\indentation}the\hspace*{1\indentation}container.}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}The\hspace*{1\indentation}container\hspace*{1\indentation}may\hspace*{1\indentation}or\hspace*{1\indentation}may\hspace*{1\indentation}not\hspace*{1\indentation}have\hspace*{1\indentation}expression\hspace*{1\indentation}templates\hspace*{1\indentation}associated}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}with\hspace*{1\indentation}it.}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}If\hspace*{1\indentation}it\hspace*{1\indentation}does\hspace*{1\indentation}not\hspace*{1\indentation}have\hspace*{1\indentation}expression\hspace*{1\indentation}templates\hspace*{1\indentation}(the\hspace*{1\indentation}default\hspace*{1\indentation}assumption)}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}then\hspace*{1\indentation}the\hspace*{1\indentation}ECT::Glom\hspace*{1\indentation}static\hspace*{1\indentation}method\hspace*{1\indentation}will\hspace*{1\indentation}glom\hspace*{1\indentation}Draco's\hspace*{1\indentation}XM\hspace*{1\indentation}expression}\mbox{}\\
{\cxxcom //\hspace*{2\indentation}machinery\hspace*{1\indentation}onto\hspace*{1\indentation}it.}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}If\hspace*{1\indentation}it\hspace*{1\indentation}does\hspace*{1\indentation}have\hspace*{1\indentation}expression\hspace*{1\indentation}templates\hspace*{1\indentation}already,\hspace*{1\indentation}and\hspace*{1\indentation}has\hspace*{1\indentation}defined\hspace*{1\indentation}its}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}own\hspace*{1\indentation}specialization\hspace*{1\indentation}of\hspace*{1\indentation}ExpEngineTraits\hspace*{1\indentation}(as\hspace*{1\indentation}UserVec\hspace*{1\indentation}has\hspace*{1\indentation}done\hspace*{1\indentation}in}\mbox{}\\
{\cxxcom //\hspace*{1\indentation}UserVecTraits.hh)\hspace*{1\indentation}then\hspace*{1\indentation}ECT::Glom\hspace*{1\indentation}will\hspace*{1\indentation}do\hspace*{1\indentation}just\hspace*{1\indentation}about\hspace*{1\indentation}nothing.}\mbox{}\\
\mbox{}\\
{\bf template\/} $<${\bf class\/} Container$>$\mbox{}\\
{\bf void\/} doit()\mbox{}\\
\{\mbox{}\\
\hspace*{4\indentation}{\bf using\/} rtt\_expTraits::ExpEngineTraits;\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Create\hspace*{1\indentation}some\hspace*{1\indentation}typedef's\hspace*{1\indentation}to\hspace*{1\indentation}save\hspace*{1\indentation}my\hspace*{1\indentation}typing\hspace*{1\indentation}fingers.}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}ECT\hspace*{1\indentation}is\hspace*{1\indentation}the\hspace*{1\indentation}Expression\hspace*{1\indentation}Engine\hspace*{1\indentation}Traits\hspace*{1\indentation}class\hspace*{1\indentation}for\hspace*{1\indentation}the\hspace*{1\indentation}container}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}EC\hspace*{1\indentation}is\hspace*{1\indentation}the\hspace*{1\indentation}nested\hspace*{1\indentation}type\hspace*{1\indentation}that\hspace*{1\indentation}(optionally)\hspace*{1\indentation}gloms\hspace*{1\indentation}expressions}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}onto\hspace*{1\indentation}the\hspace*{1\indentation}original\hspace*{1\indentation}container\hspace*{1\indentation}class.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}{\bf typedef\/} ExpEngineTraits$<$ Container $>$ ECT;\mbox{}\\
\hspace*{4\indentation}{\bf typedef\/} ECT::ExpEnabledContainer EC;\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Create\hspace*{1\indentation}some\hspace*{1\indentation}containers.}\mbox{}\\
\mbox{}\\
\hspace*{4\indentation}{\bf const\/} {\bf int\/} sz = 5;\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}Container c1(sz), c2(sz), c3(sz);\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Glom\hspace*{1\indentation}(optionally)\hspace*{1\indentation}expressions\hspace*{1\indentation}onto\hspace*{1\indentation}the\hspace*{1\indentation}containers.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}EC \&ec1 = ECT::Glom(c1);\mbox{}\\
\hspace*{4\indentation}EC \&ec2 = ECT::Glom(c2);\mbox{}\\
\hspace*{4\indentation}EC \&ec3 = ECT::Glom(c3);\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Prove\hspace*{1\indentation}that\hspace*{1\indentation}we\hspace*{1\indentation}have\hspace*{1\indentation}expressions.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}ec1 = 1.0;\mbox{}\\
\hspace*{4\indentation}ec2 = 20.0;\mbox{}\\
\hspace*{4\indentation}ec1[1] = std::sqrt(2.0)$/$2.0;\mbox{}\\
\mbox{}\\
\hspace*{4\indentation}ec3 = asin(ec1) + 3.0$\ast$ec2;\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}$\ast$$\ast$$\ast$\hspace*{1\indentation}NOTE\hspace*{1\indentation}$\ast$$\ast$$\ast$\hspace*{1\indentation}NOTE\hspace*{1\indentation}$\ast$$\ast$$\ast$\hspace*{1\indentation}NOTE\hspace*{1\indentation}$\ast$$\ast$$\ast$}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Note\hspace*{1\indentation}that\hspace*{1\indentation}we\hspace*{1\indentation}are\hspace*{1\indentation}now\hspace*{1\indentation}using\hspace*{1\indentation}the\hspace*{1\indentation}original\hspace*{1\indentation}container\hspace*{1\indentation}and\hspace*{1\indentation}not}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}the\hspace*{1\indentation}(optionally)\hspace*{1\indentation}expression-glommed\hspace*{1\indentation}version\hspace*{1\indentation}in\hspace*{1\indentation}the\hspace*{1\indentation}std::copy.}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}$\ast$$\ast$$\ast$\hspace*{1\indentation}NOTE\hspace*{1\indentation}$\ast$$\ast$$\ast$\hspace*{1\indentation}NOTE\hspace*{1\indentation}$\ast$$\ast$$\ast$\hspace*{1\indentation}NOTE\hspace*{1\indentation}$\ast$$\ast$$\ast$}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}std::copy(c3.begin(), c3.end(),\mbox{}\\
\hspace*{14\indentation}std::ostream\_iterator$<$Container::value\_type$>$(std::cout, {\tt "$\backslash$n"}));\mbox{}\\
\}\mbox{}\\
\mbox{}\\
{\bf int\/} main()\mbox{}\\
\{\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Call\hspace*{1\indentation}doit\hspace*{1\indentation}with\hspace*{1\indentation}std::vector$<$double$>$.}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}container\hspace*{1\indentation}does\hspace*{1\indentation}not\hspace*{1\indentation}have\hspace*{1\indentation}expression\hspace*{1\indentation}templates,\hspace*{1\indentation}and\hspace*{1\indentation}by}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}default\hspace*{1\indentation}will\hspace*{1\indentation}have\hspace*{1\indentation}Draco's\hspace*{1\indentation}XM\hspace*{1\indentation}expression\hspace*{1\indentation}template\hspace*{1\indentation}engine}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}glommed\hspace*{1\indentation}onto\hspace*{1\indentation}it\hspace*{1\indentation}inside\hspace*{1\indentation}doit.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}std::cout $\ll$ {\tt "doit$<$ std::vector$<$double$>$ $>$ ..."} $\ll$ std::endl;\mbox{}\\
\hspace*{4\indentation}doit$<$ std::vector$<${\bf double\/}$>$ $>$();\mbox{}\\
\mbox{}\\
\hspace*{4\indentation}std::cout $\ll$ std::endl;\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Call\hspace*{1\indentation}doit\hspace*{1\indentation}with\hspace*{1\indentation}UserVec$<$double$>$.}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}container\hspace*{1\indentation}already\hspace*{1\indentation}has\hspace*{1\indentation}expression\hspace*{1\indentation}templates,\hspace*{1\indentation}and}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}since\hspace*{1\indentation}it\hspace*{1\indentation}defines\hspace*{1\indentation}its\hspace*{1\indentation}own\hspace*{1\indentation}specialization\hspace*{1\indentation}of}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}ExpEngineTraits$<$\hspace*{1\indentation}UserVec$<$T$>$\hspace*{1\indentation}$>$\hspace*{1\indentation}that\hspace*{1\indentation}has\hspace*{1\indentation}been\hspace*{1\indentation}designed}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}to\hspace*{1\indentation}do\hspace*{1\indentation}no\hspace*{1\indentation}glomming,\hspace*{1\indentation}i.e.\hspace*{1\indentation}EC\hspace*{1\indentation}is\hspace*{1\indentation}just\hspace*{1\indentation}Container,}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}and\hspace*{1\indentation}ECT::Glom\hspace*{1\indentation}is\hspace*{1\indentation}a\hspace*{1\indentation}no-op,\hspace*{1\indentation}doit\hspace*{1\indentation}will\hspace*{1\indentation}use\hspace*{1\indentation}the\hspace*{1\indentation}UserVec's\hspace*{1\indentation}own}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}expression\hspace*{1\indentation}template\hspace*{1\indentation}machinery.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}std::cout $\ll$ {\tt "doit$<$ UserVec$<$double$>$ $>$ ..."} $\ll$ std::endl;\mbox{}\\
\hspace*{4\indentation}doit$<$ UserVec$<${\bf double\/}$>$ $>$();\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}{\bf return\/} 0;\mbox{}\\
\}\mbox{}\\
\mbox{}\\
{\cxxcom //---------------------------------------------------------------------------//}\mbox{}\\
{\cxxcom //\hspace*{30\indentation}end\hspace*{1\indentation}of\hspace*{1\indentation}expTraits.cc}\mbox{}\\
{\cxxcom //---------------------------------------------------------------------------//}\mbox{}\\
\end{flushleft}
