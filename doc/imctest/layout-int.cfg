%%
%% Creator: c++2latex -n -f -o layout-int.cfg layout-int.tex
%% Date:    Thu Oct 22 11:12:54 1998
%%
\expandafter\ifx\csname indentation\endcsname\relax
\newlength{\indentation}\fi
\setlength{\indentation}{0.5em}
\begin{tabbing}
\mbox{}\\
{\bf public\/}:\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}inline\hspace*{1\indentation}default\hspace*{1\indentation}constructor}\mbox{}\\
\hspace*{4\indentation}Layout({\bf int\/} num\_cells = 0) : face\_cell(num\_cells) \{\}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}set\hspace*{1\indentation}size\hspace*{1\indentation}member\hspace*{1\indentation}functions}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}set\hspace*{1\indentation}size\hspace*{1\indentation}of\hspace*{1\indentation}whole\hspace*{1\indentation}Layout\hspace*{1\indentation}and\hspace*{1\indentation}set\hspace*{1\indentation}size\hspace*{1\indentation}for\hspace*{1\indentation}number\hspace*{1\indentation}of\hspace*{1\indentation}faces\hspace*{1\indentation}in\hspace*{1\indentation}a}\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}particular\hspace*{1\indentation}cell}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} set\_size({\bf int\/} num\_cells) \{ face\_cell.resize(num\_cells); \}\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} {\bf void\/} set\_size({\bf int\/}, {\bf int\/});\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}get\hspace*{1\indentation}size\hspace*{1\indentation}member\hspace*{1\indentation}functions}\mbox{}\\
\hspace*{4\indentation}{\bf int\/} num\_cells() {\bf const\/} \{ {\bf return\/} face\_cell.size(); \}\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} {\bf int\/} num\_faces({\bf int\/}) {\bf const\/};\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}diagnostic\hspace*{1\indentation}functions}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} print(ostream \&, {\bf int\/}) {\bf const\/};\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}overloaded\hspace*{1\indentation}subscripting\hspace*{1\indentation}operators\hspace*{1\indentation}for\hspace*{1\indentation}assignment\hspace*{1\indentation}and\hspace*{1\indentation}retrieval}\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} {\bf int\/} {\bf operator\/}()({\bf int\/}, {\bf int\/}) {\bf const\/};\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} {\bf int\/}\& {\bf operator\/}()({\bf int\/}, {\bf int\/});\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}overloaded\hspace*{1\indentation}operators\hspace*{1\indentation}for\hspace*{1\indentation}equality}\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} {\bf bool\/} {\bf operator\/}==({\bf const\/} Layout \&) {\bf const\/};\mbox{}\\
\hspace*{4\indentation}{\bf bool\/} {\bf operator\/}$\neq$({\bf const\/} Layout \&rhs) {\bf const\/} \{ {\bf return\/} !($\ast${\bf this\/} == rhs); \}\mbox{}\\
\mbox{}\\
\end{tabbing}
