%%
%% Creator: c++2latex -n -f -o particle-int.cfg particle-int.tex
%% Date:    Thu Oct 22 11:12:57 1998
%%
\expandafter\ifx\csname indentation\endcsname\relax
\newlength{\indentation}\fi
\setlength{\indentation}{0.5em}
\begin{tabbing}
\mbox{}\\
{\bf public\/}:\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}Particle\hspace*{1\indentation}constructor}\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} Particle(vector$<${\bf double\/}$>$, vector$<${\bf double\/}$>$, {\bf double\/}, {\bf int\/}, Sprng, \mbox{}\\
\hspace*{20\indentation}{\bf double\/} = 1, {\bf double\/} = 1, string = {\tt "born"});\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}null\hspace*{1\indentation}constructor\hspace*{1\indentation}required\hspace*{1\indentation}as\hspace*{1\indentation}kluge\hspace*{1\indentation}for\hspace*{1\indentation}the\hspace*{1\indentation}STL\hspace*{1\indentation}containers\hspace*{1\indentation}which\hspace*{1\indentation}need\hspace*{1\indentation}a}\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}default\hspace*{1\indentation}constructor,\hspace*{1\indentation}this\hspace*{1\indentation}calls\hspace*{1\indentation}an\hspace*{1\indentation}assert(0)\hspace*{1\indentation}so\hspace*{1\indentation}you\hspace*{1\indentation}can't\hspace*{1\indentation}use\hspace*{1\indentation}it}\mbox{}\\
\hspace*{4\indentation}Particle() \{ Insist (0, {\tt "You tried to default construct a Particle!"}); \}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}transport\hspace*{1\indentation}solvers}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}IMC\hspace*{1\indentation}transport\hspace*{1\indentation}step}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} transport({\bf const\/} MT \&, {\bf const\/} Opacity$<$MT$>$ \&, Tally$<$MT$>$ \&,\mbox{}\\
\hspace*{19\indentation}SP$<$Diagnostic$>$ = SP$<$Diagnostic$>$());\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}other\hspace*{1\indentation}services}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}particle\hspace*{1\indentation}status\hspace*{1\indentation}functions}\mbox{}\\
\hspace*{4\indentation}{\bf bool\/} status() {\bf const\/} \{ {\bf return\/} alive; \}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} reset\_status() \{ alive = {\bf true\/}; \}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} kill\_particle() \{ alive = {\bf false\/}; \}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}accessors}\mbox{}\\
\hspace*{4\indentation}{\bf int\/} get\_cell() {\bf const\/} \{ {\bf return\/} cell; \}\mbox{}\\
\hspace*{4\indentation}{\bf double\/} get\_ew() {\bf const\/} \{ {\bf return\/} ew; \}\mbox{}\\
\hspace*{4\indentation}{\bf const\/} Sprng\& get\_random() {\bf const\/} \{ {\bf return\/} random; \}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}set\hspace*{1\indentation}functions\hspace*{1\indentation}for\hspace*{1\indentation}sourcing\hspace*{1\indentation}particles}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} set\_random(Sprng \&ran) \{ random = ran; \}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} set\_time\_left({\bf double\/} t) \{ time\_left = t; \}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} set\_descriptor(string s) \{ descriptor = s; \}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} set\_ew({\bf double\/} new\_ew) \{ ew = new\_ew; \}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} set\_cell({\bf int\/} new\_cell) \{ cell = new\_cell; \}\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}transport\hspace*{1\indentation}descriptors}\mbox{}\\
\hspace*{4\indentation}string desc() {\bf const\/} \{ {\bf return\/} descriptor; \}\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} {\bf static\/} {\bf int\/} get\_index(string);\mbox{}\\
\hspace*{4\indentation}{\bf inline\/} {\bf static\/} string get\_descriptor({\bf int\/});\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}public\hspace*{1\indentation}diagnostic\hspace*{1\indentation}services}\mbox{}\\
\hspace*{4\indentation}{\bf void\/} print(ostream \&) {\bf const\/};\mbox{}\\
\mbox{}\\
{\em \hspace*{2\indentation}//\hspace*{1\indentation}overloaded\hspace*{1\indentation}operators}\mbox{}\\
\hspace*{4\indentation}{\bf bool\/} {\bf operator\/}==({\bf const\/} Particle$<$MT$>$ \&) {\bf const\/};\mbox{}\\
\mbox{}\\
\end{tabbing}
