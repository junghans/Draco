%%
%% Creator: c++2latex -s 10 -n expTraits.hh
%% Date:    Wed Apr 21 15:53:29 1999
%%
\expandafter\ifx\csname indentation\endcsname\relax
\newlength{\indentation}\fi
\setlength{\indentation}{0.5em}
\begin{flushleft}
{\cxxcom /$\ast$-----------------------------------$\ast$-C-$\ast$-----------------------------------$\ast$/}\mbox{}\\
{\cxxcom /$\ast$\hspace*{1\indentation}expTraits.hh\hspace*{1\indentation}$\ast$/}\mbox{}\\
{\cxxcom /$\ast$\hspace*{1\indentation}Randy\hspace*{1\indentation}M.\hspace*{1\indentation}Roberts\hspace*{1\indentation}$\ast$/}\mbox{}\\
{\cxxcom /$\ast$\hspace*{1\indentation}Mon\hspace*{1\indentation}Apr\hspace*{1\indentation}19\hspace*{1\indentation}13:14:26\hspace*{1\indentation}1999\hspace*{1\indentation}$\ast$/}\mbox{}\\
{\cxxcom /$\ast$---------------------------------------------------------------------------$\ast$/}\mbox{}\\
{\cxxcom /$\ast$\hspace*{1\indentation}@$>$\hspace*{1\indentation}Default\hspace*{1\indentation}Expression\hspace*{1\indentation}Engine\hspace*{1\indentation}Traits\hspace*{1\indentation}$\ast$/}\mbox{}\\
{\cxxcom /$\ast$---------------------------------------------------------------------------$\ast$/}\mbox{}\\
\mbox{}\\
{\tt\#ifndef} \_\_ExpEngineTraits\_expTraits\_hh\_\_\mbox{}\\
{\tt\#define} \_\_ExpEngineTraits\_expTraits\_hh\_\_\mbox{}\\
\mbox{}\\
{\tt\#include} "{\tt xm/xm.hh}"\mbox{}\\
\mbox{}\\
{\bf namespace\/} rtt\_expTraits\mbox{}\\
\{\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
{\bf template\/}$<${\bf class\/} RCT$>$\mbox{}\\
{\bf class\/} ExpEngineTraits\mbox{}\\
\{\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}nested\hspace*{1\indentation}class\hspace*{1\indentation}gloms\hspace*{1\indentation}on\hspace*{1\indentation}the\hspace*{1\indentation}XM\hspace*{1\indentation}expression\hspace*{1\indentation}templates}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}to\hspace*{1\indentation}the\hspace*{1\indentation}class,\hspace*{1\indentation}RCT\hspace*{1\indentation}(Random\hspace*{1\indentation}Access\hspace*{1\indentation}Container\hspace*{1\indentation}Type)}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}Notice\hspace*{1\indentation}that\hspace*{1\indentation}this\hspace*{1\indentation}class\hspace*{1\indentation}publicly\hspace*{1\indentation}inherits\hspace*{1\indentation}from\hspace*{1\indentation}the\hspace*{1\indentation}original\hspace*{1\indentation}class.}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}enables\hspace*{1\indentation}the\hspace*{1\indentation}expression\hspace*{1\indentation}enabled\hspace*{1\indentation}class\hspace*{1\indentation}to\hspace*{1\indentation}act\hspace*{1\indentation}like\hspace*{1\indentation}the\hspace*{1\indentation}original}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}class.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}{\bf class\/} ERCT\mbox{}\\
\hspace*{8\indentation}: {\bf public\/} xm::Indexable$<${\bf typename\/} RCT::value\_type, ERCT$>$,\mbox{}\\
\hspace*{10\indentation}{\bf public\/} RCT\mbox{}\\
\hspace*{4\indentation}\{\mbox{}\\
\hspace*{6\indentation}{\bf public\/}:\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}Typedefs\hspace*{1\indentation}required\hspace*{1\indentation}by\hspace*{1\indentation}random\hspace*{1\indentation}access\hspace*{1\indentation}containers.}\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::pointer          iterator;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::const\_pointer    const\_iterator;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::reference        reference;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::const\_reference  const\_reference;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::size\_type        size\_type;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::difference\_type  difference\_type;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::value\_type       value\_type;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::allocator\_type   allocator\_type;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::pointer          pointer;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::const\_pointer    const\_pointer;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::const\_reverse\_iterator     const\_reverse\_iterator;\mbox{}\\
\hspace*{8\indentation}{\bf typedef\/} {\bf typename\/} RCT::reverse\_iterator           reverse\_iterator;\mbox{}\\
\mbox{}\\
\hspace*{6\indentation}{\bf private\/}:\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}No\hspace*{1\indentation}Data}\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
\hspace*{6\indentation}{\bf public\/}:\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}method\hspace*{1\indentation}required\hspace*{1\indentation}to\hspace*{1\indentation}disambiguate\hspace*{1\indentation}the\hspace*{1\indentation}bracket\hspace*{1\indentation}operator.}\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
\hspace*{8\indentation}{\bf const\/} value\_type \&{\bf operator\/}[]( {\bf int\/} i ) {\bf const\/}\mbox{}\\
\hspace*{8\indentation}\{\mbox{}\\
\hspace*{12\indentation}{\bf return\/} RCT::{\bf operator\/}[](i);\mbox{}\\
\hspace*{8\indentation}\}\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}method\hspace*{1\indentation}required\hspace*{1\indentation}to\hspace*{1\indentation}disambiguate\hspace*{1\indentation}the\hspace*{1\indentation}bracket\hspace*{1\indentation}operator.}\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
\hspace*{8\indentation}value\_type \&{\bf operator\/}[]( {\bf int\/} i )\mbox{}\\
\hspace*{8\indentation}\{\mbox{}\\
\hspace*{12\indentation}{\bf return\/} RCT::{\bf operator\/}[](i);\mbox{}\\
\hspace*{8\indentation}\}\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}method\hspace*{1\indentation}required\hspace*{1\indentation}for\hspace*{1\indentation}XM\hspace*{1\indentation}to\hspace*{1\indentation}work.}\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}Or\hspace*{1\indentation}else\hspace*{1\indentation}you\hspace*{1\indentation}wont\hspace*{1\indentation}be\hspace*{1\indentation}able\hspace*{1\indentation}to\hspace*{1\indentation}say...}\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{4\indentation}ec\hspace*{1\indentation}$=$\hspace*{1\indentation}val;}\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}where\hspace*{1\indentation}ec\hspace*{1\indentation}is\hspace*{1\indentation}an\hspace*{1\indentation}expression\hspace*{1\indentation}enabled\hspace*{1\indentation}container}\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
\hspace*{8\indentation}ERCT \&{\bf operator\/}=( {\bf const\/} value\_type \&val)\mbox{}\\
\hspace*{8\indentation}\{\mbox{}\\
\hspace*{12\indentation}std::fill(begin(), end(), val);\mbox{}\\
\hspace*{12\indentation}{\bf return\/} $\ast${\bf this\/};\mbox{}\\
\hspace*{8\indentation}\}\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{8\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}method\hspace*{1\indentation}required\hspace*{1\indentation}for\hspace*{1\indentation}XM\hspace*{1\indentation}to\hspace*{1\indentation}work.}\mbox{}\\
\hspace*{8\indentation}\mbox{}\\
\hspace*{8\indentation}{\bf template\/}$<${\bf class\/} X$>$\mbox{}\\
\hspace*{8\indentation}ERCT \&{\bf operator\/}=( {\bf const\/} xm::Xpr$<$ value\_type, X, ERCT $>$\& x )\mbox{}\\
\hspace*{8\indentation}\{\mbox{}\\
\hspace*{12\indentation}{\bf return\/} assign\_from( x );\mbox{}\\
\hspace*{8\indentation}\}\mbox{}\\
\hspace*{4\indentation}\};\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{2\indentation}{\bf public\/}:\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}The\hspace*{1\indentation}typedef\hspace*{1\indentation}that\hspace*{1\indentation}is\hspace*{1\indentation}used\hspace*{1\indentation}in\hspace*{1\indentation}applications.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}{\bf typedef\/} ERCT ExpEnabledContainer;\mbox{}\\
\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}This\hspace*{1\indentation}static\hspace*{1\indentation}method\hspace*{1\indentation}converts\hspace*{1\indentation}an\hspace*{1\indentation}instance\hspace*{1\indentation}of\hspace*{1\indentation}a\hspace*{1\indentation}container}\mbox{}\\
{\cxxcom \hspace*{4\indentation}//\hspace*{1\indentation}to\hspace*{1\indentation}a\hspace*{1\indentation}reference\hspace*{1\indentation}of\hspace*{1\indentation}an\hspace*{1\indentation}expression\hspace*{1\indentation}enabled\hspace*{1\indentation}container.}\mbox{}\\
\hspace*{4\indentation}\mbox{}\\
\hspace*{4\indentation}{\bf static\/} ERCT \&Glom(RCT \&rct)\mbox{}\\
\hspace*{4\indentation}\{\mbox{}\\
\hspace*{8\indentation}{\bf return\/} {\bf static\_cast\/}$<$ERCT \&$>$(rct);\mbox{}\\
\hspace*{4\indentation}\}\mbox{}\\
\};\mbox{}\\
\mbox{}\\
\}\hspace*{2\indentation}{\cxxcom //\hspace*{1\indentation}end\hspace*{1\indentation}namespace\hspace*{1\indentation}rtt\_expTraits}\mbox{}\\
\mbox{}\\
{\tt\#endif}    \hspace*{4\indentation}{\cxxcom /$\ast$\hspace*{1\indentation}\_\_ExpEngineTraits\_expTraits\_hh\_\_\hspace*{1\indentation}$\ast$/}\mbox{}\\
\mbox{}\\
{\cxxcom /$\ast$---------------------------------------------------------------------------$\ast$/}\mbox{}\\
{\cxxcom /$\ast$\hspace*{4\indentation}end\hspace*{1\indentation}of\hspace*{1\indentation}expTraits.hh\hspace*{1\indentation}$\ast$/}\mbox{}\\
{\cxxcom /$\ast$---------------------------------------------------------------------------$\ast$/}\mbox{}\\
\end{flushleft}
