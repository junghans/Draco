#!/bin/bash -l

#MSUB -l walltime=08:00:00
#MSUB -l nodes=1:ppn=16
#MSUB -j oe

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if test "${subproj}x" == "x"; then
   echo "Fatal Error, subproj not found in environment."
   exit 1
fi
if test "${regdir}x" == "x"; then
   echo "Fatal Error, regdir not found in environment."
   exit 1
fi
if test "${build_type}x" == "x"; then
   echo "Fatal Error, build_type not found in environment."
   exit 1
fi

# Environment setup
# ----------------------------------------
umask 0002
unset http_proxy
unset HTTP_PROXY
export VENDOR_DIR=/usr/projects/draco/vendors

epdash="-"
if test "${extra_params}x" = "x"; then
   epdash=""
fi

machine=`uname -n`
case $machine in
ml[0-9][0-9][0-9].localdomain) 
    ctestparts=Configure,Build,Test
    # Force new log file (vs appending)
    echo "     " > ${regdir}/logs/ml-${build_type}-${extra_params}${epdash}${subproj}-cbt.log 
    ;;
ml-fey*)
    ctestparts=Submit ;;
esac

echo "==========================================================================="
echo "Moonlight regression: ${ctestparts} from ${machine}."
echo "                      ${subproj}-${build_type}${epdash}${extra_params}"
echo "==========================================================================="

fn_exists()
{
    type $1 2>/dev/null | grep -q 'is a function'
    res=$?
    echo $res
    return $res
}

# Modules
# ----------------------------------------
result=`fn_exists module`
#echo "result = $result"
if test $result -eq 0; then 
    echo 'module function is defined'
else
    echo 'module function does not exist. defining a local function ...'
    source /usr/share/Modules/init/bash
    # module () 
    # { 
    #     eval `/opt/modules/3.2.6.7/bin/modulecmd bash $*`
    # }
fi

# Use modules found in the draco directory
module use ${regdir}/draco/environment/Modules/tu-fe
module use ${regdir}/draco/environment/Modules/hpc

# Clear any tcsh loaded modules as these are invalid when staring a new shell. 
# module purge &> /dev/null
module load friendly-testing 
module load intel/13.0.1 openmpi/1.4.5 
module load gsl/1.14-intel lapack/3.4.1-intel
module load trilinos/10.12.2-intel SuperLU_DIST/3.0-intel
module load ParMetis/3.1.1-intel ndi
module load cmake numdiff svn random123 eospac
comp=`basename $CXX`

case $extra_params in
"")
    # no-op
    ;;
cuda)
    module load cudatoolkit
    comp="intel-cuda"
    ;;
fulldiagnostics)
    comp="intel-fulldiagnostics"
    ;;
# intel13)
#     module unload openmpi/1.4.5 cudatoolkit intel/12.1.5
#     module load intel/13.0.1 openmpi
#     comp="intel-13.0.1"
#     ;;
pgi)
    module unload eospac ParMetis trilinos SuperLU_DIST gsl
    module unload lapack cudatoolkit openmpi intel
    module load pgi openmpi gsl/1.14-pgi
    comp=`basename $CXX`
    ;;
*)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system."
    exit 1
    ;;
esac
module list

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps: 
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to coder.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug

if test "${dashboard_type}x" = "x"; then
   dashboard_type=Nightly
fi
if test "${base_dir}x" = "x"; then
   base_dir=/scratch/kellyt/cdash/ml
fi

echo " "
echo "ml-regress.msub: dashboard_type = $dashboard_type"
echo "ml-regress.msub: base_dir       = $base_dir"
echo "ml-regress.msub: build_type     = $build_type"
echo "ml-regress.msub: comp           = $comp"
echo "ml-regress.msub: machine        = $machine"
echo "ml-regress.msub: subproj        = $subproj"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
    script_dir=${regdir}/draco/regression
    script_name=Draco_Linux64.cmake
elif test "${subproj}" == clubimc; then
    script_dir=${regdir}/jayenne/regression
    script_name=ClubIMC_Linux64.cmake
elif test "${subproj}" == wedgehog; then
    script_dir=${regdir}/jayenne/regression
    script_name=Wedgehog_Linux64.cmake
elif test "${subproj}" == milagro; then
    script_dir=${regdir}/jayenne/regression
    script_name=Milagro_Linux64.cmake
elif test "${subproj}" == capsaicin; then
    script_dir=${regdir}/capsaicin/scripts
    script_name=Capsaicin_Linux64.cmake
fi

export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
echo "ml-regress.msub: work_dir       = ${work_dir}"
echo " "
setup_dirs=`echo $ctestparts | grep Configure`
if ! test "${setup_dirs}x" = "x"; then
   if ! test -d ${work_dir}; then
      /usr/bin/install -d ${work_dir}/source
      /usr/bin/install -d ${work_dir}/build
      /usr/bin/install -d ${work_dir}/target
   else
      if test -d ${work_dir}/target/lib; then
         rm -rf ${work_dir}/target/*
      fi
      # keep the purger from removing the source files.
      find ${work_dir}/source/ -exec touch {} \;
   fi
fi

echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

##---------------------------------------------------------------------------##
## End of script
##---------------------------------------------------------------------------##

