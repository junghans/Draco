## -*- Mode: sh -*-
#! /bin/bash2
##---------------------------------------------------------------------------##
## Script to run regression tests for draco
##
## Usage:
##    draco_regression <opts>
##
## Options:
##
##     -n   Print the commands that would be executed, but do not
##          execute them.
##
##---------------------------------------------------------------------------##

##---------------------------------------------------------------------------##
## Setup environment

# get environment
source /home/regress/.bash_profile
source /home/regress/draco/regression/parse_options 
source /home/regress/draco/regression/set_env

# Replace default FORTRAN environment as a hack around EOSPAC5 bug
# (see SF bug report)
source /usr/local/lf9562/bash_setup

# set defaults
set_default_values $*

# parse options
parse_options $*

##---------------------------------------------------------------------------##
## Echo environment

${REGDIR}/regression/echo_env

##---------------------------------------------------------------------------##
## make regression directories

# REGDIR      : the regression top-level directory
# code_src    : location of draco source directory
# code_mpi    : location of parallel build target directory
# code_scalar : location of scalar build target directory
# code_opt    : location of parallel, optimized build target directory
# target_list : list of build target directories

code_src="${REGDIR}/${code}"

code_mpi="${REGDIR}/mpi"
code_mpi_dbg="${REGDIR}/mpi_dbg"
code_scalar="${REGDIR}/scalar"
code_opt="${REGDIR}/opt"
code_cov="${REGDIR}/cov"
code_apptest="${REGDIR}/apptest"
code_lampi_dbg="${REGDIR}/lampi_dbg"

target_list="${code_mpi} ${code_scalar} ${code_opt}"

##---------------------------------------------------------------------------##
## set up SourceForge cvs

# Find cvs

cvs=`which cvs`

# set cvs environment
export CVS_RSH="${REGDIR}/regression/draco_ssh"

cvsroot="-z9 -d sf.lanl.gov:/cvsroot/${code}"

##---------------------------------------------------------------------------##
## Checkout draco

# goto regression directory and do a draco checkout

cd ${REGDIR}

# remove the source directory

if [ -d $code_src ]; then
    echo ">>> Removing ${code_src}, ${code} source code"
    ${echoonly} rm -rf $code_src
fi

# checkout draco

echo ">>> Checking out ${code} in ${REGDIR}"
echo "${cvs} -q $cvsroot checkout -P ${code}"
${echoonly} ${cvs} -q $cvsroot checkout -P ${code}

##---------------------------------------------------------------------------##
## Set up vendors
## VENDOR_LIB_DIR and VENDOR_INC_DIR are set in .bashrc.

VENDOR_SETUP="--with-sprng-inc --with-sprng-lib --with-grace-inc \
--with-grace-lib --with-gandolf-lib --with-eospac-lib \
--with-mpi-inc --with-mpi-lib --with-pcg-lib --with-lapack=atlas \
--with-lapack-lib --with-gsl-inc --with-gsl-lib"

##---------------------------------------------------------------------------##
## LOOP THROUGH AND DO BUILD AND CHECKS

for target in ${target_list}; do

    cd ${REGDIR}

    case $target in
	
	# setup parallel build options
	${code_mpi})

            # Source mpich
            . $MPI_DIR/mpich.sh p4-lahey
            echo $MPI_TAG

	    OPTIONS='--with-c4=mpi'
	    VENDOR_OPTIONS="${MPI_SETUP} ${VENDOR_SETUP}"
	;;

	# setup serial build options
	${code_scalar})
	    OPTIONS=''
	    VENDOR_OPTIONS="${VENDOR_SETUP}"
	;;

	# setup of parallel optimized options
	${code_opt})

            # Source mpich
            . $MPI_DIR/mpich.sh p4-lahey
            echo $MPI_TAG

	    OPTIONS='--with-c4=mpi --with-opt=2 --with-dbc=0'
	    VENDOR_OPTIONS="${MPI_SETUP} ${VENDOR_SETUP}"
	;;

        # LAMPI version
        ${code_lampi_dbg})

            # Source lampi
            echo "source $MPI_DIR/lampi.sh shmem-lahey"
            . $MPI_DIR/lampi.sh shmem-lahey
            echo "MPI_TAG = $MPI_TAG"

            MPI_SETUP="--with-mpi=lampi $MPI_SETUP"
            OPTIONS='--enable-shared --with-c4=mpi --with-dbc=7 --enable-debug'
            STLPORT_SETUP="--with-stlport=/codes/radtran/vendors/stlport/Linux"
            VENDOR_OPTIONS="${MPI_SETUP} ${VENDOR_SETUP} ${STLPORT_SETUP}"
        ;;

	# catchall
	*)
            echo ">>>"
            echo ">>> \$target = $target"
	    echo ">>> Non-specified target! EXITING"
	    exit 1
	;;

    esac

    # remove the old target directory if it exists
    if [ -d $target ]; then
	echo ">>> Removing old $target target directory"
	${echoonly} rm -rf $target
    fi

    # build the target directory
    echo ">>> Building $target target directory"
    mkdir $target    
    mkdir $target/draco

    # do configure and make inside of target directory
    echo ">>> Running configure in $target/draco"
    cd $target/draco

    echo "$code_src/configure --prefix=$target $OPTIONS $VENDOR_OPTIONS"
    ${echoonly} $code_src/configure --prefix=$target $OPTIONS $VENDOR_OPTIONS

    # do gmake check
    echo ">>> Doing gmake check in $target/draco"
    
    echo "gmake -k check nj=2"
    ${echoonly} gmake -k check nj=2
    
done
