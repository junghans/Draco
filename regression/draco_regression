## -*- Mode: sh -*-
#! /bin/bash2
##---------------------------------------------------------------------------##
## Script to run regression tests for draco
##
## Usage:
##    draco_regression <opts>
##
## Options:
##
##     -n   Print the commands that would be executed, but do not
##          execute them.
##
##---------------------------------------------------------------------------##
## $Id$
##---------------------------------------------------------------------------##

##---------------------------------------------------------------------------##
## Setup environment

# get environment
source /home/regress/.bash_profile
source /home/regress/draco/regression/parse_options 
source /home/regress/draco/regression/set_env

# Replace default FORTRAN environment as a hack around EOSPAC5 bug
# (see SF bug report)
if [ "`uname -m`" != "x86_64" ]; then
    source /ccs/opt/x86/lf9562/bash_setup
    BULLSEYE_DIR=/ccs/opt/x86/bullseye
elif test -d /ccs/codes/radtran/vendors/CCS64-gnu/Bullseye; then
    BULLSEYE_DIR=/ccs/codes/radtran/vendors/CCS64-gnu/Bullseye
fi

# set defaults
set_default_values $*

# parse options
parse_options $*

##---------------------------------------------------------------------------##
## make regression directories

# REGDIR      : the regression top-level directory, where scripts,
#             : environment stuff, and logs live
# BUILDDIR    : the place where we will do checkouts and builds
# code_src    : location of draco source directory
# code_mpi    : location of parallel build target directory
# code_scalar : location of scalar build target directory
# code_opt    : location of parallel, optimized build target directory
# target_list : list of build target directories

code_src="${BUILDDIR}/${code}"

code_mpi="${BUILDDIR}/mpi"
code_mpi_dbg="${BUILDDIR}/mpi_dbg"
code_scalar="${BUILDDIR}/scalar"
code_opt="${BUILDDIR}/opt"
code_cov_mpi="${BUILDDIR}/cov_mpi"
code_cov_scalar="${BUILDDIR}/cov_scalar"
code_apptest="${BUILDDIR}/apptest"
code_lampi_dbg="${BUILDDIR}/lampi_dbg"
docs="${BUILDDIR}/docs"

if test ${withcoverage:-no} = yes; then
   echo ">>> Proceeding with code coverage regression run."
##   target_list="${code_cov_mpi} ${code_cov_scalar}"
   
   target_list="${code_cov_mpi}"
   if test -x ${BULLSEYE_DIR}/bin/cov01; then
      echo "build dir = ${BUILDDIR}"
      export PATH=${PATH}:${BULLSEYE_DIR}/bin
      export COVFILE="${BUILDDIR}/draco.cov"
      if test -f ${COVFILE}; then
         echo "Removing ${COVFILE}."
         rm ${COVFILE}
      fi
      export COVCLASSCFG="${REGDIR}/regression/covclass.cfg"
      export COVDIRCFG="${REGDIR}/regression/covclass.cfg"
      export COVFNCFG="${REGDIR}/regression/covclass.cfg"
      export COVSRCCFG="${REGDIR}/regression/covclass.cfg"
      cov01 --on
      echo $COVCLASSCFG
      echo $COVDIRCFG
      echo $COVFNCFG
      echo $COVSRCCFG
      echo $COVFILE
   else
      echo " "
      echo ">>>  Cannot find Bullseye bin directory.  Aborting."
      echo " "
      exit 1
   fi
else
   target_list="${code_mpi} ${code_scalar} ${code_opt}"
fi

##---------------------------------------------------------------------------##
## Echo environment

${REGDIR}/regression/echo_env

##---------------------------------------------------------------------------##
## set up SourceForge cvs

# Find cvs

cvs=`which cvs`

# set cvs environment
export CVS_RSH="${REGDIR}/regression/draco_ssh"

cvsroot="-d /ccs/codes/radtran/cvsroot"

##---------------------------------------------------------------------------##
## Checkout draco

# goto regression directory and do a draco checkout

cd ${BUILDDIR}

# remove the source directory

if [ -d $code_src ]; then
    echo ">>> Removing ${code_src}, ${code} source code"
    ${echoonly} rm -rf $code_src
fi

# checkout draco

echo ">>> Checking out ${code} in ${BUILDDIR}"
echo "${cvs} -q $cvsroot checkout -P ${code}"
${echoonly} ${cvs} -q $cvsroot checkout -P ${code}

# build configures
echo "cd $code_src; ./draco_config"
${echoonly} cd $code_src; ./draco_config

##---------------------------------------------------------------------------##
## Set up vendors
## VENDOR_LIB_DIR and VENDOR_INC_DIR are set in .bashrc.

# MPI_SETUP="--with-mpi-inc --with-mpi-lib"

# Don't test pcgWrap for now; there's no x86_64 libpcg
VENDOR_SETUP=""
#"--with-sprng-inc --with-sprng-lib --with-grace-inc \
#--with-grace-lib --with-gandolf-lib --with-eospac-lib --enable-shared \
#--with-lapack=atlas --with-lapack-lib --with-gsl-inc --with-gsl-lib"
if [ "`uname -m`" != "x86_64" ]; then
#    LIBS_SETUP="--with-libs='-L/usr/lib/gcc/x86_64-redhat-linux/4.1.2 -lgfortran'"
#else
    LIBS_SETUP="--with-libs='-L/ccs/codes/radtran/vendors/libf2c -lf2c'"
fi



##---------------------------------------------------------------------------##
## LOOP THROUGH AND DO BUILD AND CHECKS

for target in ${target_list}; do

    cd ${BUILDDIR}

    case $target in
	
	# setup parallel build options
	${code_mpi})
        if [ "`uname -m`" == "x86_64" ]; then
	    MPIRUN='/ccs/codes/mpi/openmpi/Linux64/1.3.3/bin/mpirun'
	    MPI_INC_DIR='/ccs/codes/mpi/openmpi/Linux64/1.3.3/include'
	    MPI_LIB_DIR='/ccs/codes/mpi/openmpi/Linux64/1.3.3/lib'
	    MPI_TAG='openmpi'
	    export MPI_INC_DIR
	    export MPI_LIB_DIR
	    export MPIRUN
	    export MPI_TAG  

	    OPTIONS='--with-c4=mpi --with-mpi=openmpi --enable-shared'
        else
            # Source mpich
            . $MPI_DIR/mpich.sh shmem-lahey
            cleanipcs
            echo $MPI_TAG

	    OPTIONS='--with-c4=mpi'
        fi

#	VENDOR_OPTIONS="${MPI_SETUP} ${VENDOR_SETUP}"
	VENDOR_OPTIONS="${VENDOR_SETUP}"
	MAKE_OPTIONS="check"
	;;

	# setup serial build options
	${code_scalar})
	    OPTIONS='--with-c4=scalar'
	    VENDOR_OPTIONS="${VENDOR_SETUP}"
            MAKE_OPTIONS="check"
	;;

	# setup of parallel optimized options
	${code_opt})
        if [ "`uname -m`" == "x86_64" ]; then
	    MPIRUN='/ccs/codes/mpi/openmpi/Linux64/1.3.3/bin/mpirun'
	    MPI_INC_DIR='/ccs/codes/mpi/openmpi/Linux64/1.3.3/include'
	    MPI_LIB_DIR='/ccs/codes/mpi/openmpi/Linux64/1.3.3/lib'
	    MPI_TAG='openmpi'
	    export MPI_INC_DIR
	    export MPI_LIB_DIR
	    export MPIRUN
	    export MPI_TAG  

	    OPTIONS='--with-c4=mpi --with-mpi=openmpi --with-opt=2 --with-dbc=0'
	else
            # Source mpich
            . $MPI_DIR/mpich.sh shmem-lahey
            cleanipcs
            echo $MPI_TAG

	    OPTIONS='--with-c4=mpi --with-opt=2 --with-dbc=0'
	fi

#	VENDOR_OPTIONS="${MPI_SETUP} ${VENDOR_SETUP}"
	VENDOR_OPTIONS="${VENDOR_SETUP}"
	MAKE_OPTIONS="check"
	;;

       # setup code coverage options: use shared libs, no dbc.
       ${code_cov_mpi})
           if [ "`uname -m`" == "x86_64" ]; then
              MPIRUN='/ccs/codes/mpi/openmpi/Linux64/1.3.3/bin/mpirun'
              MPI_INC_DIR='/ccs/codes/mpi/openmpi/Linux64/1.3.3/include'
              MPI_LIB_DIR='/ccs/codes/mpi/openmpi/Linux64/1.3.3/lib'
              MPI_TAG='openmpi'
              export MPI_INC_DIR
              export MPI_LIB_DIR
              export MPIRUN
              export MPI_TAG  
          else
             echo ">>> source /ccs/codes/mpi/bin/mpich.sh shmem-lahey"
             source /ccs/codes/mpi/bin/mpich.sh shmem-lahey
             cleanipcs
             echo ">>> source /home/regress/capsaicin/scripts/changevendors.sh -v"
          fi
          #setup_using_env_vars
          VENDOR_OPTIONS="${MPI_SETUP} ${VENDOR_SETUP}"
          OPTIONS='--with-c4=mpi --with-mpi=openmpi --enable-debug --with-dbc=0 --enable-shared'
          MAKE_OPTIONS="check CC=${BULLSEYE_DIR}/bin/gcc CXX=${BULLSEYE_DIR}/bin/g++"
       ;;
 
       # setup code coverage options: 
       ${code_cov_scalar})
          #echo ">>> source /ccs/codes/mpi/bin/mpich.sh scalar"
          #source /ccs/codes/mpi/bin/mpich.sh scalar
          export MPI_INC_DIR=
          export MPI_LIB_DIR=
          export MPIRUN=
          export MPI_TAG='scalar'
          export MPI_LONGTAG='scalar'
 
          echo ">>> source /home/regress/capsaicin/scripts/changevendors.sh -v"
          source /home/regress/capsaicin/scripts/changevendors.sh -v
          #setup_using_env_vars
          VENDOR_OPTIONS="${VENDOR_SETUP}"
          OPTIONS='--with-c4=scalar --enable-debug --with-dbc=0'
          MAKE_OPTIONS="check CC=${BULLSEYE_DIR}/bin/gcc CXX=${BULLSEYE_DIR}/bin/g++"
       ;;
	# catchall
	*)
            echo ">>>"
            echo ">>> \$target = $target"
	    echo ">>> Non-specified target! EXITING"
	    exit 1
	;;

    esac

    # ensure that mpi was setup.  if not, nothing will work.
    if test ${MPI_TAG:-none} = none; then
       echo " "
       echo ">>>>> FATAL ERROR: MPI_TAG not set."
       echo " "
       exit 1
    fi

    # remove the old target directory if it exists
    if [ -d $target ]; then
	echo ">>> Removing old $target target directory"
	${echoonly} rm -rf $target
    fi

    # build the target directory
    echo ">>> Building $target target directory"
    mkdir $target    
    mkdir $target/draco

    # do configure and make inside of target directory
    echo ">>> Running configure in $target/draco"
    pushd $target/draco

    echo "$code_src/configure --prefix=$target $OPTIONS $VENDOR_OPTIONS ${LIBS_SETUP}"
    eval ${echoonly} $code_src/configure --prefix=$target $OPTIONS $VENDOR_OPTIONS ${LIBS_SETUP}

    # do gmake check
    echo ">>> Doing gmake check in $target/draco"
    
    echo "gmake -k ${MAKE_OPTIONS} nj=2"
    ${echoonly} gmake -k ${MAKE_OPTIONS} nj=2
    
    popd

done

##---------------------------------------------------------------------------##
## If this is a coverage analysis create a report!

if test ${withcoverage:-no} = yes; then

   pushd draco/src
   echo "pushd: `pwd`"

   echo " "
   echo ">>> Generating coverage reports..."
   # coverage per directory
   covdir -mq -w256
   echo " "
   # coverage per file
   covsrc -mq -w256
   echo " "
   # coverage per class
   if test ${covclass:-true} = true; then
     covclass -mq -w256
   else
     echo ">>> omitting coverage per class report."
   fi
   echo " "
   # coverage per function
   if test ${covfun:-true} = true; then
      covfn -mq -w384
   else
      echo ">>> omitting coverage per function report."
   fi
   echo " "
   # detailed coverage report
   if test ${covdetail:-true} = true; then
      covbr -w256
   else
      echo ">>> omitting detailed coverage report."
   fi
   echo " "
   echo ">>> Done with coverage reports..."

   cov01 --off

   popd 
   echo "popd: back to `pwd`"

   # Lines of code statistics:

   pushd draco
   echo "pushd: `pwd`"

   echo " "
   echo ">>> Lines-of-code statistics..."
   tools/count_loc.sh

   echo " "
   popd &> /dev/null
   echo "popd: back to `pwd`"
fi

##---------------------------------------------------------------------------##
## End of script
