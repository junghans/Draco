# -*-sh-*-
# Valgrind Suppression Instructions
# generate these expressions by specifying 'valgrind --gen-suppressions=yes'

# For help, use '--gen-suppressions=[yes|all]'

# Example valgrind use:
# valgrind -q --tool=memcheck --leak-check=full --show-reachable=yes --num-callers=50 /ccs/codes/mpi/openmpi/Linux64/1.3.3/bin/mpiexec -np 1 phw hello
# Options: --suppressions="$HOME/draco/regression/valgrind_suppress.txt"

# OR --------

# mpirun -np 1 valgrind --leak-check=full --suppressions=/home/kgt/draco/regression/valgrind_suppress.txt ./phw

## -------------------------------------------------------------------------- ##
## OpenMPI-1.3.3
## -------------------------------------------------------------------------- ##
{
   <libmpi-syscall>
   Memcheck:Param
   sched_setaffinity(mask)
   fun:syscall
   ...
   obj:/*/libmpi.so*
}
{
   <libopen-rte-syscall>
   Memcheck:Param
   sched_setaffinity(mask)
   fun:syscall
   ...
   obj:/*/libopen-rte.so*
}
{
   <libmpi-writev>
   Memcheck:Param
   writev(vector[...])
   ...
   obj:/*/libmpi.so*
}
{
  <libopen-rte>
  Memcheck:Leak
  ...
  obj:/*/libopen-rte*
}
{
  <libopen-pal>
  Memcheck:Leak
  ...
  obj:/*/libopen-pal*
}
{
  <libmpi memory leaks should be ignored>
  Memcheck:Leak
  ...
  obj:/*/libmpi.so*
}
{
  <orterun memory leaks should be ignored>
  Memcheck:Leak
  ...
  fun:orterun
}

#--------------------------------------------------------
## Inserted for Yellowrail

{
  <yellowrail: syscall munmap>
  Memcheck:Addr1
  ...
  obj:/*/libmpi.so*
}
{
  <yellowrail: syscall munmap>
  Memcheck:Addr1
  ...
  obj:/*/libopen-rte.so*
}
{
  <yellowrail: syscall mempolicy>
  Memcheck:Value1
  ...
  obj:/*/libmpi.so*
}
{
  <yellowrail: syscall munmap>
  Memcheck:Value1
  ...
  obj:/*/libopen-rte.so*
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   ...
   obj:/*/libmthca-rdmav2.so
}
{
   <insert_a_suppression_name_here>
   Memcheck:Param
   close(fd)
   ...
   obj:/*/libmpi.so*
}
{
   <insert_a_suppression_name_here>
   Memcheck:Param
   write(buf)
   ...
   obj:/*/libmpi.so*
}
{
   <insert_a_suppression_name_here>
   Memcheck:Param
   mbind(nodemask)
   ...
   obj:/*/libmpi.so*
}
{
   openmpi/memcheck/cond
   Memcheck:Cond
   ...
   obj:/*/libmpi.so*
}
{
   openmpi/memcheck/param
   Memcheck:Param
   set_mempolicy(nodemask)
   ...
   obj:/*/libmpi.so*
}
{
   openmpi/memcheck/value8
   Memcheck:Value8
   ...
   obj:/*/libmpi.so*
}
#--------------------------------------------------------
## Inserted for Turing
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   ...
   obj:/lib64/ld-2.5.so
}
#--------------------------------------------------------
## Python suppressions
{
   python_lib/memcheck/leak
   Memcheck:Leak
   ...
   obj:/*/libpython2.4.so*
}
#--------------------------------------------------------
## CMake suppressions
{
   ld/memcheck/leak
   Memcheck:Leak
   ...
   obj:/*/ld
   ...
}
{
   cmake/memcheck/leak
   Memcheck:Leak
   ...
   obj:/*/cmake
   ...
}
{
   as/memcheck/leak
   Memcheck:Leak
   ...
   obj:/*/as
   ...
}
{
   cmake/handle_braces/memleak
   Memcheck:Leak
   ...
   fun:handle_braces
   fun:do_spec_1
   ...
}
{
   cmake/process_command/memleak
   Memcheck:Leak
   ...
   fun:process_command
   ...
}
{
   cmake/find_a_file/memleak
   Memcheck:Leak
   ...
   fun:find_a_file
   ...
}
{
   cmake/_obstack_begin/memleak
   Memcheck:Leak
   ...
   fun:_obstack_begin
   ...
}
{
   cmake/xstrdup/memleak
   Memcheck:Leak
   ...
   fun:xstrdup
   ...
}
{
   cmake/decode_options/memleak
   Memcheck:Leak
   ...
   fun:decode_options
   ...
}
{
   cmake/concat/memleak
   Memcheck:Leak
   ...
   fun:concat
   ...
}
{
   cmake/main/xcalloc/memleak
   Memcheck:Leak
   fun:calloc
   fun:xcalloc
   fun:main
}
{
   cmake/main/malloc/cmake
   Memcheck:Leak
   ...
   obj:*/cmake
   ...
}

## ---------------------------------------------------------------------- ##
## Added with upgrade to valgrind 3.6.1
## ---------------------------------------------------------------------- ##

{
   tstSP/condjump/ld25so
   Memcheck:Cond
   fun:index
   fun:expand_dynamic_string_token
   ...
   obj:/lib64/ld-2.5.so
   ...
}
{
   tstSP/condjump/ld25so
   Memcheck:Cond
   fun:_dl_relocate_object
   ...
   obj:/lib64/ld-2.5.so
   ...
}

## ---------------------------------------------------------------------- ##
## Numdiff
## ---------------------------------------------------------------------- ##

# ==24572== Use of uninitialised value of size 8
# ==24572==    at 0x38B5024F8B: __gmpn_mul_basecase (in /usr/lib64/libgmp.so.3.3.3)
# ==24572==    by 0x38B501FB23: __gmpn_mul (in /usr/lib64/libgmp.so.3.3.3)
# ==24572==    by 0x38B5008661: __gmpf_set_str (in /usr/lib64/libgmp.so.3.3.3)
# ==24572==    by 0x4043D2: init_mpa (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==24572==    by 0x40ABB6: init_mpa_support (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==24572==    by 0x40BC6F: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
{
   numdiff/uninit8/use
   Memcheck:Value8
   ...
   fun:init_mpa
   fun:init_mpa_support
   fun:main
}
# ==18912== Conditional jump or move depends on uninitialised value(s)
# ==18912==    at 0x38B501FB03: __gmpn_mul (in /usr/lib64/libgmp.so.3.3.3)
# ==18912==    by 0x38B5008661: __gmpf_set_str (in /usr/lib64/libgmp.so.3.3.3)
# ==18912==    by 0x4043D2: init_mpa (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18912==    by 0x40ABB6: init_mpa_support (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18912==    by 0x40BC6F: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
{
   <insert_a_suppression_name_here>
   Memcheck:Cond
   ...
   fun:__gmpf_set_str
   fun:init_mpa
   fun:init_mpa_support
   fun:main
}
#===================== text compare =============================================#

# ==18889== Conditional jump or move depends on uninitialised value(s)
# ==18889==    at 0x38B5007F48: __gmpf_set (in /usr/lib64/libgmp.so.3.3.3)
# ==18889==    by 0x404740: Cabs (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18889==    by 0x4052C8: cmp_fields (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18889==    by 0x405CD2: cmp_lines (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18889==    by 0x40646B: cmp_files (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18889==    by 0x40BE6C: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
{
   numdiff/text1
   Memcheck:Cond
   ... 
   fun:cmp_fields
   fun:cmp_lines
   fun:cmp_files
   fun:main
}
# ==18881== Use of uninitialised value of size 8
# ==18881==    at 0x38B500C9FD: __gmpf_cmp (in /usr/lib64/libgmp.so.3.3.3)
# ==18881==    by 0x4048BB: cmp (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18881==    by 0x4052DB: cmp_fields (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18881==    by 0x405CD2: cmp_lines (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18881==    by 0x40646B: cmp_files (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
# ==18881==    by 0x40BE6C: main (in /ccs/codes/radtran/vendors/numdiff-5.2.1/bin/numdiff)
{
   numdiff/text/2
   Memcheck:Value8
   ...
   fun:cmp_fields
   fun:cmp_lines
   fun:cmp_files
   fun:main
}
# ==18871== Use of uninitialised value of size 8
# ==18871==    at 0x38B501E9C0: __gmpn_divrem_1 (in /usr/lib64/libgmp.so.3.3.3)
{
   numdiff/text/3
   Memcheck:Value8
   ...
   fun:__gmpn_divrem_1
   ...
}
# ==25358== Use of uninitialised value of size 8
# ==25358==    at 0x38B501E9C0: __gmpn_divrem_1 (in /usr/lib64/libgmp.so.3.3.3)
{
   numdiff/text/4
   Memcheck:Value8
   ...
   fun:__gmpn_divrem
   ...
}
