#!/bin/bash -l

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if test "${subproj}x" == "x"; then
   echo "Fatal Error, subproj not found in environment."
   exit 1
fi
if test "${regdir}x" == "x"; then
   echo "Fatal Error, regdir not found in environment."
   exit 1
fi
if test "${build_type}x" == "x"; then
   echo "Fatal Error, build_type not found in environment."
   exit 1
fi
if test "${logdir}x" == "x"; then
   echo "Fatal Error, logdir not found in environment."
   exit 1
fi

# Environment setup
# ----------------------------------------
umask 0002
unset http_proxy
unset HTTP_PROXY
export VENDOR_DIR=/scratch/vendors
export AUTODOCDIR=/ccs/codes/radtran/autodoc

run () {
    echo $1
    if ! [ $dry_run ]; then
       eval $1
    fi
}

fn_exists()
{
    type $1 2>/dev/null | grep -q 'is a function'
    res=$?
    echo $res
    return $res
}

# Header
# ----------------------------------------
# epdash="-"
# if test "${extra_params}x" = "x"; then
#    epdash=""
# fi
machine=`uname -n | sed -e 's/[.].*//g'`
case $machine in
ccscs[0-9])
    ctestparts=Configure,Build,Test,Submit
    # Force new log file (vs appending)
    echo "     " > ${logdir}/ccscs-${build_type}${epdash}${extra_params}-${subproj}-cbts.log
    echo "==========================================================================="
    echo "CCSC Regression: ${ctestparts} from ${machine}."
    echo "                 ${subproj}-${build_type}${epdash}${extra_params}"
    echo "==========================================================================="
    ;;
#ccscs-fey*)
#    ctestparts=Submit ;;
*)
    echo "FATAL ERROR: Machine ( $machine ) unknown by regression system"
    exit 1 ;;
esac

# Modules
# ----------------------------------------
#if test -z "$MODULESHOME"; then
# if test -f /ccs/codes/radtran/vendors/modules-3.2.9/init/bash; then
#    source /ccs/codes/radtran/vendors/modules-3.2.9/init/bash
# fi
#fi

result=`fn_exists module`
if test $result -eq 0; then
  echo 'module function is defined'
else
  echo 'module function does not exist. defining a local function ...'
  source /usr/share/Modules/init/bash
fi

source /usr/share/Modules/init/bash
run "module purge"
run "module load user_contrib"
run "module load gcc openmpi cmake"
run "module load dracoscripts subversion random123 valgrind"
run "module load eospac lapack gsl" # grace
run "module load SuperLU_DIST/4.3"
run "module load ndi metis parmetis trilinos"
run "module load doxygen graphviz" # qt
comp=gcc

case $extra_params in
"")
  # no-op
  ;;
coverage)
  # comp=gcc-5.2.0
  echo "Coverage option selected."
  if ! test "${build_type}" == "Debug"; then
    echo "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    exit 1
  fi
  build_type=Coverage
  run "module load bullseyecoverage"
  CXX=`which g++`
  CC=`which gcc`
  ;;
bounds_checking)
  echo "Bounds checking option selected."
  if ! test "${build_type}" == "Debug"; then
    echo "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    exit 1
  fi
  bounds_checking=on
  run "module swap SuperLU_DIST SuperLU_DIST/4.3-bc"
  run "module swap trilinos trilinos/12.6.1-bc"
  run "module swap parmetis parmetis/4.0.3-bc"
  ;;
clang)
  run "module purge"
  run "module load user_contrib"
  run "module load llvm openmpi cmake"
  run "module load dracoscripts subversion random123"
  run "module load lapack gsl" # eospac
  run "module load SuperLU_DIST"
  run "module load ndi metis parmetis trilinos"
  run "module load graphviz"
  comp=clang
  ;;
fulldiagnostics)
  comp="intel-fulldiagnostics"
  ;;
gcc530)
  run "module purge"
  run "module load user_contrib"
  run "module load gcc/5.3.0 openmpi cmake"
  run "module load dracoscripts subversion random123"
  run "module load lapack gsl eospac"
  run "module load SuperLU_DIST"
  run "module load ndi metis parmetis trilinos"
  comp=gcc-5.3.0
  ;;
gcc530bc)
  echo "Bounds checking option selected."
  if ! test "${build_type}" == "Debug"; then
    echo "FATAL ERROR: build_type (-b) must be Debug when using extra option (-e) coverage."
    exit 1
  fi
  bounds_checking=on
  run "module purge"
  run "module load user_contrib"
  run "module load gcc/5.3.0 openmpi cmake"
  run "module load dracoscripts subversion random123"
  run "module load lapack gsl"
  run "module load SuperLU_DIST/4.3-bc"
  run "module load ndi metis/5.1.0-bc parmetis/4.0.3-bc trilinos/12.6.2-bc"
  comp=gcc-5.3.0
  ;;
*)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system."
    exit 1
    ;;
esac
run "module list"

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps:
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to rtt.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug, Coverage

if test "${dashboard_type}x" = "x"; then
   dashboard_type=Nightly
fi
if test "${base_dir}x" = "x"; then
   # moniker=`whoami`
   # base_dir=/scratch/${moniker}
   base_dir=/scratch/regress/cdash
   mkdir -p $base_dir
   if ! test -d ${base_dir}; then
      echo "Fatal Error, base_dir=${base_dir} not found in environment."
      exit 1
   fi
fi

echo " "
echo "ccscs-regress.msub: dashboard_type = $dashboard_type"
echo "ccscs-regress.msub: base_dir       = $base_dir"
echo "ccscs-regress.msub: build_type     = $build_type"
echo "ccscs-regress.msub: comp           = $comp"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
    script_dir=${regdir}/draco/regression
    script_name=Draco_Linux64.cmake
elif test "${subproj}" == jayenne; then
    script_dir=${regdir}/jayenne/regression
    script_name=Jayenne_Linux64.cmake
elif test "${subproj}" == capsaicin; then
    script_dir=${regdir}/capsaicin/scripts
    script_name=Capsaicin_Linux64.cmake
elif test "${subproj}" == asterisk; then
    script_dir=${regdir}/asterisk/regression
    script_name=Asterisk_Linux64.cmake
fi

if test "${regress_mode}" = "off"; then
    export work_dir=${base_dir}/cdash/${subproj}/${dashboard_type}_${comp}/${build_type}
    export buildname_append="-${USER}"
else
    export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
fi
echo "ccscs-regress.msub: work_dir       = ${work_dir}"
echo " "
setup_dirs=`echo $ctestparts | grep Configure`
if ! test "${setup_dirs}x" = "x"; then
   if ! test -d ${work_dir}; then
      /usr/bin/install -d ${work_dir}/source
      /usr/bin/install -d ${work_dir}/build
      /usr/bin/install -d ${work_dir}/target
   else
      if test -d ${work_dir}/target/lib; then
         rm -rf ${work_dir}/target/*
      fi
      # empty the autodoc directory to force new build
      if test -d ${word_dir}/build/autodoc; then
         rm -rf ${word_dir}/build/autodoc/*
      fi
      # keep the purger from removing the source files.
      # find ${work_dir}/source/ -exec touch {} \;
   fi
fi

if test "${build_type}" = "Coverage"; then
   # Coverage build imply Debug builds.
   build_type="Debug,${build_type}"
   run "export COVFILE=${work_dir}/build/CMake.cov"
   if test -f ${COVFILE}; then
      run "rm -f ${COVFILE}"
      cov01 --on
   fi
fi
if test "${bounds_checking:-off}" = "on"; then
    build_type="${build_type},bounds_checking"
fi

# Environment
echo " "
echo "--------------------(environment)------------------------------"
set
echo "--------------------(end environment)--------------------------"

echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

run "chgrp -R draco ${work_dir}"
run "chmod -R g+rwX ${work_dir}"

echo "All done."
