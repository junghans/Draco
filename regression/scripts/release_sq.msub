#!/bin/bash -l

#MSUB -l partition=seq
#MSUB -l nodes=128
#MSUB -q pdebug
#MSUB -l walltime=02:00:00
#MSUB -oe
#MSUB -o /usr/gapps/jayenne/draco-6_17_0/logs/release_sq_xl.log

## Check modules...
## Update logfile (above)
## Update var:
##  - $ddir
##  - $dmpi
##  - $df90
##  - $dcpp
## Update CONFIG_BASE

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Helpful functions:

die () { echo "ERROR: $1"; exit 1;}

run () {
    echo $1
    if ! test $dry_run; then
        eval $1
    fi
}

# Permissions - new files should be marked u+rwx,g+rwx,o+rx
umask 0002
install_group="dacodes"
build_permissions="g+rwX,o=g-w"
install_permissions="g+rwX,o=g-w"

# --------------------
# Environment
# --------------------

# Vendor/Environment setup
export VENDOR_DIR=/usr/gapps/jayenne/vendors

# LLNL uses dotkit instead of modules
export DK_NODE=${DK_NODE}:${VENDOR_DIR}/Modules/sq
source /usr/local/tools/dotkit/init.sh

# Draco dotkits
use xlc121
# use gcc472
use numdiff
use gsl
use random123

# LLNL dotkits
use cmake
use erase=del
use alia1++

export OMP_NUM_THREADS=4

# Define your source and build information here.

PATCH_VER=0
ddir="draco-6_17_${PATCH_VER}"
platform=sq
dmpi=mpich215
df90=xl141
dcpp=xl121
flavor="${platform}-${dmpi}-${dcpp}-${df90}"

# Define your source and build information here.

source_prefix="/usr/gapps/jayenne/$ddir"
build_prefix="/nfs/tmp2/$USER/$ddir/${flavor}"
install_prefix="$source_prefix/${flavor}"

# =============================================================================

# Define the meanings of various configure features:

OPTIMIZE_ON="-DCMAKE_BUILD_TYPE=Release"
OPTIMIZE_OFF="-DCMAKE_BUILD_TYPE=Debug"

LOGGING_ON="-DDRACO_DIAGNOSTICS=7 -DDRACO_TIMING=1"
LOGGING_OFF="-DDRACO_DIAGNOSTICS=0 -DDRACO_TIMING=0"

# Define the meanings of the various code versions:

VERSIONS=( "debug" "opt" )
OPTIONS=(\
    "$OPTIMIZE_OFF $LOGGING_OFF" \
    "$OPTIMIZE_ON  $LOGGING_OFF" \
)

PACKAGES=("draco")

# =============
# Configure, Build and Run the Tests
# =============

# Loop over the code versions:

for (( i=0 ; i < ${#VERSIONS[@]} ; ++i )); do

    version=${VERSIONS[$i]}
    options=${OPTIONS[$i]}
    draco_dir=${DRACO_PREFIX}/${DRACO_VERSIONS[$1]}

    echo
    echo
    echo "# Code Version: $version ($options)"
    echo "# ------------"
    echo

    # Create install directory
    install_dir="$install_prefix/$version"
    run "mkdir -p $install_dir" || die "Could not create $install_dir"

    # Loop over the packages.
    for package in ${PACKAGES[@]}; do
        echo
        echo "#    Package: $package"
        echo "#    -------"
        echo

        source_dir="$source_prefix/source/$package"
        build_dir="$build_prefix/$version/${package:0:1}"
        if test -d ${build_dir}; then
            run "rm -rf ${build_dir}"
        fi

        run "mkdir -p $build_dir" || die "Could not create directory $build_dir."
        run "cd $build_dir"
        run "cmake -DCMAKE_INSTALL_PREFIX=$install_dir \
             -DDRACO_LIBRARY_TYPE=STATIC -DDRACO_VERSION_PATCH=${PATCH_VER} \
            $options $source_dir" \
            || die "Could not configure in $build_dir from source at $source_dir"
        run "make -j32 install"  || die "Could not build code/tests in $build_dir"
        run "ctest -j128" # Allow some tests to fail.
        # 2nd install command may fix rpath issues for installed binaries
        run "make rebuild_cache"
        run "make -j32 install"  || die "Could not build code/tests in $build_dir"
        run "chmod -R $build_permissions $build_dir"

    done

    # Set access to install dir.
    run "chmod -R $install_permissions $install_dir"

done

# Set access to top level install dir.
run "chmod $install_permissions $install_prefix"
run "chgrp -R $install_group $install_prefix"
