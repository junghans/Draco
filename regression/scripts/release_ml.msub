#!/bin/bash -l

#MSUB -l walltime=04:00:00
#MSUB -l nodes=1:ppn=16
#MSUB -j oe
#MSUB -o /usr/projects/draco/draco-6_17_0/logs/release_ml.log

## Check modules...
## Update logfile (above)
## Update var:
##  - $ddir
##  - $dmpi
##  - $df90
##  - $dcpp
## Update CONFIG_BASE

# Helpful functions:
die () { echo "ERROR: $1"; exit 1;}

run () {
    if [ $dry_run ]
    then echo $1
    else eval $1
    fi
}

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Permissions - new files should be marked u+rwx,g+rwx,o+rx
umask 0002
if test `groups | grep othello | wc -l` = 1; then
    install_group="othello"
    install_permissions="g+rwX,o-rwX"
else
    install_group="draco"
    install_permissions="g+rwX,o=g-w"
fi
build_permissions="g+rwX"

# environment (use draco modules)
run "module use /usr/projects/draco/vendors/Modules/hpc"
run "module purge"
run "module load friendly-testing user_contrib"
run "module load cmake/3.3.1 svn numdiff"
run "module load intel/14.0.4 openmpi/1.6.5"
run "module load random123 eospac/v6.2.4"
run "module list"

CONFIG_BASE="-DDRACO_VERSION_PATCH=0"

# Define your source and build information here.

ddir=draco-6_17_0
platform=ml
dmpi=openmpi165
df90=intel1404
dcpp=intel1404

source_prefix="/usr/projects/draco/$ddir"
build_prefix="/scratch/$USER/$ddir/$platform-${dmpi}-${df90}-${dcpp}"
install_prefix="$source_prefix/$platform-${dmpi}-${df90}-${dcpp}"


# =============================================================================
# checkit_core
#
# This script can be used either stand-alone or sourced into a buildit
# script which defines the variables that it needs.
#
# It requires the following enviromnent variables to be defined:
#
# |----------------+-------------+--------------------------------------------|
# | Name           | Specificity | Description                                |
# |----------------+-------------+--------------------------------------------|
# | build_prefix   | build       | Destination directory of the build trees.  |
# | MAKE           | platform    | Make command.                              |
# |----------------+-------------+--------------------------------------------|
#
# Optionally, if "dry_run" is defined, all commands are output to
# stdio, but not executed. This can be useful to create a "rebuild"
# script which repeats the configure and build process.
#
#
# Results:
#
# This script runs $MAKE run in four versions of the code: debug,
# debug_nodbc, opt, and opt_log.
#
# =============================================================================



# Define the meanings of various configure features:

OPTIMIZE_ON="-DCMAKE_BUILD_TYPE=Release"
OPTIMIZE_OFF="-DCMAKE_BUILD_TYPE=Debug"

LOGGING_ON="-DDRACO_DIAGNOSTICS=7 -DDRACO_TIMING=1"
LOGGING_OFF="-DDRACO_DIAGNOSTICS=0 -DDRACO_TIMING=0"

# Define the meanings of the various code versions:

VERSIONS=( "debug" "opt" )
OPTIONS=(\
    "$OPTIMIZE_OFF $LOGGING_OFF" \
    "$OPTIMIZE_ON  $LOGGING_OFF" \
)

PACKAGES=("draco")

# =============
# Configure, Build and Run the Tests
# =============


# Loop over the code versions:

for (( i=0 ; i < ${#VERSIONS[@]} ; ++i ))
do

    version=${VERSIONS[$i]}
    options=${OPTIONS[$i]}

    echo
    echo
    echo "# Code Version: $version"
    echo "# ------------"
    echo

    # Create install directory
    install_dir="$install_prefix/$version"
    run "mkdir -p $install_dir" || die "Could not create $install_dir"

    # Loop over the packages.
    for package in ${PACKAGES[@]}
    do
        echo
        echo "#    Package: $package"
        echo "#    -------"
        echo

        source_dir="$source_prefix/source/$package"
        build_dir="$build_prefix/$version/${package:0:1}"
        if test -d ${build_dir}; then
            run "rm -rf ${build_dir}"
        fi

        run "mkdir -p $build_dir" || die "Could not create directory $build_dir."
        run "cd $build_dir"
        run "cmake -DCMAKE_INSTALL_PREFIX=$install_dir \
            $options $CONFIG_BASE $source_dir" \
            || die "Could not configure in $build_dir from source at $source_dir"
        run "make -j24 install"  || die "Could not build code/tests in $build_dir"
        run "ctest -j14" # Allow some tests to fail.
        # 2nd install command may fix rpath issues for installed binaries
        run "make rebuild_cache"
        run "make -j24 install"  || die "Could not build code/tests in $build_dir"
        run "chmod -R $build_permissions $build_dir"

    done

    # Set access to install dir.
    run "chmod -R $install_permissions $install_dir"

done

# Set access to top level install dir.
run "chmod $install_permissions $install_prefix"
run "chgrp -R ${install_group} $install_prefix"

run "chgrp draco $source_prefix $source_prefix/source $source_prefix/logs"
run "chmod $install_permissions $source_prefix $source_prefix/source $source_prefix/logs"
