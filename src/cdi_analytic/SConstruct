#-*-Python-*-
# Sconstruct for draco/c4
# T. M. Kelley
# Mar. 27, 2007
# Input to scons
# (c) Copyright 2007 LANSLLC all rights reserved.

package_name = "cdi_analytic"

# c4 source files, target, & libs
sources = [
    "Analytic_EoS.cc",
    "Analytic_Gray_Opacity.cc",
    "Analytic_Models.cc",
    "Analytic_Multigroup_Opacity.cc",
    "Analytic_Odfmg_Opacity.cc",
    "Release.cc",
    ]

target  = "rtt_" + package_name

# headers for export 
headers = [
    "Analytic_EoS.hh",
    "Analytic_Gray_Opacity.hh",
    "Analytic_Models.hh",
    "Analytic_Multigroup_Opacity.hh",
    "Analytic_Odfmg_Opacity.hh",
    "Release.hh",
    ]

# external pieces:
scons_dir = "../../../scons"
execfile(scons_dir + "/scons_master")
if arch == 'x86':
    master_suffix = "host"
else:
    master_suffix = "cell"
execfile(scons_dir + "/scons_project")
execfile(scons_dir + "/scons_master_%s" % master_suffix)

# where to build
from os.path import join
build_dir    = join(build_root,"draco",package_name)
full_target  = join(build_dir,target)
full_sources = map( lambda x: join(build_dir,x), sources)
full_headers = map( lambda x: join(build_dir,x), headers)

# install dirs

install_libdir = export_libdir
install_incdir = join(export_incdir,package_name)
install_cnfdir = join(export_incdir,package_name,package_name)

libs += [
    ]

libpaths += [
    ]

cpppaths += [
    ".",
    project_incdir,
    ]


cxxflags += ""

# load a build environment
compiler_file = "scons_compiler_%s_%s_%s" % (c4, arch, compiler)
include_guard = compiler_file + "_included"
if include_guard not in dir():
    execfile(scons_dir + "/%s" % compiler_file)

# build in the build dir
env.VariantDir(build_dir, '.')


# What to do:
# 1. configure config.h

## pass key,value pairs to the configure gen script through this dictionary.
## You'll need to supply a python module named gen_<package_name>_config; that
## module must have a function named generate_config_h.  See
## draco/src/c4/gen_c4_config for an example.
config_h_config = {
    }

env['config'] = config_h_config
import gen_cdi_analytic_config 
configurator  = Builder( action = gen_cdi_analytic_config.generate_config_h)
env["BUILDERS"]["GenConfig"] = configurator
config_target = env.GenConfig( join(build_dir,package_name,'config.h'),
                               'config.h.pyin')
env.Alias("configure", config_target)


# 2. build the library
lib_target = env.Library( full_target, full_sources)

# 3. install targets for library, headers
env.Install( install_libdir, lib_target)
env.Install( install_incdir, headers)
env.Install( install_cnfdir, [join(build_dir,package_name,"config.h")])

# influential alias
install_target = env.Alias( "install", [install_libdir,
                                        install_incdir,
                                        install_cnfdir])

# Default things:
env.Default( [
    config_target,
    lib_target,
    install_target
    ])

# recurse into test directory 
SConscript("test/SConscript")


# version

__id__ = "$Id$"

# End of file

