############################## -*- makefile -*- ###############################
# draco/src/config/SunOS.cf
# Geoffrey Furnish
# 12 February 1996
###############################################################################
# @> This file contains configuration data for compiling on XTM SPARC Ultra's.
###############################################################################

mach	= sun
cmplr	=
optns	=

PCG_LIB_DIR	= $(HOME)/lib
PCG_LIB		= -L$(PCG_LIB_DIR) -lpcg_f77_sun_sol
LAPACK_LIB	= -llapack_sun_sol -lblas_sun_sol -L/usr/local/lang/beta/lib -lF77 -lM77 -lsunmath

# Sun CC doesn't cut it, so use KCC for now.
cxx	:= KCC

# Currently avoid the gui support, until we can get all the tools built.
spartan	:= yes

# Don't have MPI emulation environments on XTM Sparc's yet.
c4	:= no

# Tools which are independent of the compiler

ar	= /bin/ar
ranlib	= /bin/true

#-----------------------------------------------------------------------------#
# Kuck and Associates C++

ifeq ($(cxx),KCC)

CC	= cc
CXX	= KCC -x --no_implicit_include
cmplr	= kai

DEBUG_FLAG	=

MAKEDEPEND	= $(CXX) -M
CXX_DEPEND_FLAG	= $(CXXFLAGS)

preinstantiate	:= yes

ifndef kcc_deps
kcc_deps := yes
endif

ifeq ($(kcc_deps),yes)
ifneq ($(gendeps),no)
CXX	+= --output_dependencies .dkcc.$(basename $(notdir $*))_$(env)
endif
endif

INSTANTIALYZER	+= -m edg

ifeq ($(c4),no)
SYS_FLAGS = -DNOMPI
comm	:=
else
comm	:= c4
SYS_FLAGS = 
SYS_LIBS = -lmpi
endif

ifdef nj
ifneq ($(kcc),old)
lib_cmd	:= $(CXX) --parallel_build $(nj) -o
SYS_LINK_FLAGS	:= --parallel_build $(nj)
else
lib_cmd	:= $(CXX) -o
endif
else
lib_cmd	:= $(CXX) -o
endif

ifndef opt
opt	= g
endif

ifeq ($(opt),g)
optns		= g
cxx_opt         = +K0
shared		:= no
endif

ifeq ($(opt),0)
optns		= o0
cxx_opt		= +K1 -O0 --inline_keyword_space_time=0.0 --inline_auto_space_time=0.0
shared		:= no
endif

ifeq ($(opt),1)
optns		= o1
ASSERT_FLAG	= -DNOASSERT
cxx_opt		= +K1 -O1
endif

ifeq ($(opt),2)
optns		= o2
ASSERT_FLAG	= -DNOASSERT
cxx_opt		= +K2 -O2
endif

ifeq ($(opt),3)
optns		= o3
ASSERT_FLAG	= -DNOASSERT
cxx_opt		= +K3 -O3
endif

CXX	+= $(cxx_opt)

endif				# Photon C++
#-----------------------------------------------------------------------------#
# Sun C++

ifeq ($(cxx),CC)

# Note: Not configured.  This is what we used on SGI's.  Once Sun CC
# catches up to the standard, we could re-evaluate what it takes to get
# Draco building with Sun CC.

CC	= cc
CXX	= CC -LANG:ansi-for-init-scope=ON:restrict=ON -mips4 \
	-no_auto_include -I/v/furnish/local/stlport

ifndef arch
arch	= n32
endif

ifeq ($(arch),n32)
CXX += -n32
cmplr	= sn32
endif

ifeq ($(arch),64)
CXX += -64
cmplr	= s64
endif

DEBUG_FLAG	=

MAKEDEPEND	= $(CXX) -M
CXX_DEPEND_FLAG	= $(CXXFLAGS)

preinstantiate	:= yes

ifndef sgi_deps
sgi_deps := yes
endif

ifeq ($(sgi_deps),yes)
ifneq ($(gendeps),no)
CXX	+= -MDupdate .d.$(basename $(notdir $*))_$(env)
endif
endif

INSTANTIALYZER	+= -m edg

ifeq ($(c4),no)
SYS_FLAGS = -DNOMPI
comm	:=
PCG_LIB		= -L$(HOME)/lib -lpcg_f77_sgi_n32
else
comm	:= c4
SYS_FLAGS = 
SYS_LIBS = -lmpi
PCG_LIB		= -L$(HOME)/lib -lpcg_mpif77_sgi_n32
endif

ifdef nj
lib_cmd	:= $(CXX) -J $(nj) -ar -o
SYS_LINK_FLAGS	:= -J $(nj)
else
lib_cmd	:= $(CXX) -ar -o
endif

ifndef opt
opt	= 0
endif

ifeq ($(opt),g)
optns		= g
cxx_opt		= -g
endif

ifeq ($(opt),0)
optns		= g
cxx_opt		= -g
endif

ifeq ($(opt),1)
optns		= o1
ASSERT_FLAG	= -DNOASSERT
cxx_opt		= -O1
endif

ifeq ($(opt),2)
optns		= o2
ASSERT_FLAG	= -DNOASSERT
cxx_opt		= -O2
endif

ifeq ($(opt),3)
optns		= o3
ASSERT_FLAG	= -DNOASSERT
cxx_opt		= -O3
endif

CXX	+= $(cxx_opt)

endif				# SGI C++
#-----------------------------------------------------------------------------#

ifeq ($(need_python),yes)

PYTHON_BASE = /users/furnish/v/py
PYTHON_INC_DIR = $(PYTHON_BASE)/include/python1.4
PYTHON_CFG_DIR = $(PYTHON_BASE)/lib/python1.4/config
PY_INC_FLAG = -I$(PYTHON_INC_DIR) -I$(PYTHON_CFG_DIR)

PYTHON_FLAG += -DHAVE_CONFIG_H

#CXX_DEPEND_FLAG = $(CXX_INC_FLAGS) $(PYTHON_FLAG)

# These are the Python stock libraries.

PYLIBS =	$(PYTHON_CFG_DIR)/libModules.a \
		$(PYTHON_CFG_DIR)/libPython.a \
		$(PYTHON_CFG_DIR)/libObjects.a \
		$(PYTHON_CFG_DIR)/libParser.a

# Now add the rest of the stuff which has to go on the end of the line
# when linking Python shells.

#PYLIBS += -L$(PYTHON_BASE)/lib -ltk4.1 -ltcl7.5 -lMatrix -lBLT -lplplotdtk \
#		-lX11 -lm
PYLIBS += -L$(PYTHON_BASE)/lib -ltk8.0 -ltcl8.0 -lX11

# Now configure the PYTHONPATH

MACHDEP=
DESTLIB=$(PYTHON_BASE)/lib/python
DESTLIB=$(PYTHON_BASE)/lib/python1.4
TKPATH=:$(DESTLIB)/tkinter
#PLPLOTPATH=:$(DESTLIB)/plplot
NUMERICPATH=:$(DESTLIB)/NumPy
#MACHDEPPATH=:$(DESTLIB)/$(MACHDEP)
TESTPATH=:$(DESTLIB)/test
DESTPATH=:$(DESTLIB)
SITEPATH=
COREPYTHONPATH=.$(SITEPATH)$(DESTPATH)$(TESTPATH)$(MACHDEPPATH)$(STDWINPATH)$(TKPATH)$(NUMERICPATH)$(PLPLOTPATH)
PYTHONPATH=$(COREPYTHONPATH):$(SRC_TOP)/pylib

endif

env	:= $(mach)$(cmplr)$(optns)$(comm)

#include $(SRC_TOP)/config/.pooma.$(env)

#POOMA_INC_FLAG	= $(POOMA_INCLUDES)
#POOMA_FLAGS	= $(POOMA_INCLUDES) $(POOMA_DEFINES)
#POOMA_LIB_DIR	= $(POOMA_LFLAGS)
#POOMA_LIB	= $(POOMA_LIBS)

###############################################################################
#                        End of gts/src/config/IRIX64.cf
###############################################################################

