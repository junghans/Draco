#-*-Python-*-
# Sconscipt for draco/test/ds++
# T. M. Kelley
# Nov 11, 2008
# Input to scons: meant to be called from a master SConstruct script
# primary target: check
# (c) Copyright 2008 LANSLLC all rights reserved.

package_name = "ds++"

tested_lib  = "rtt_" + package_name

import os

# source files, targets
tst_sources     = filter( lambda x: (x[-3:] == ".cc") and \
                          (x[:4] == "Test" or x[:3] == "tst"),
                          os.listdir('.'))
tst_targets = [src[:-3] for src in tst_sources]
test_lib_sources = ["ds_test.cc"]
test_lib_headers = ["ds_test.hh"]
test_lib         = "ds_test"

# external pieces:
scons_dir = "../../../../scons"
execfile(scons_dir + "/scons_master")
if arch == 'x86':
    master_suffix = "host"
else:
    master_suffix = "cell"
execfile(scons_dir + "/scons_project")
execfile(scons_dir + "/scons_master_%s" % master_suffix)

# where to build
from os.path import join
build_dir     = join(build_root,"draco",package_name,"test")
full_test_lib = join(build_dir,test_lib)
full_tst_sources = map( lambda x: join(build_dir,x), tst_sources)
full_lib_sources = map( lambda x: join(build_dir,x), test_lib_sources)
full_headers     = map( lambda x: join(build_dir,x), test_lib_headers)
full_tst_targets = map( lambda x: join(build_dir,x), tst_targets)

# install dirs
## install_libdir = export_libdir
## install_incdir = join(export_incdir,package_name)
## install_cnfdir = join(export_incdir,package_name,package_name)

libs += [
    test_lib,
    tested_lib,
    ]

libpaths += [
    build_dir,
    project_libdir
    ]

cpppaths += [
    ".",
    "..",
    project_incdir
    ]

cxxflags += ""


# build environment
compiler_file = "scons_compiler_%s_%s_%s" % (c4, arch, compiler)
include_guard = compiler_file + "_included"
if include_guard not in dir():
    execfile(scons_dir + "/%s" % compiler_file)

# build in the build directory
env.VariantDir(build_dir, '.')


# What to do:
# 1. build the test library
lib_target = env.Library( full_test_lib, full_lib_sources)

# 2. build the test programs
test_targets = [env.Program( t,s, LIBS=libs, LIBPATH=libpaths) \
                for (t,s) in zip(full_tst_targets,full_tst_sources)]

# add these to the "check" target
Alias("check",lib_target)
Alias("check",test_targets)

## # 3. run the test programs
## tools_dir   = join(draco_source_root,"..","tools")
## launcher    = join(tools_dir,"launchtest.py")
## filterer    = join(tools_dir,"test_filter.py")
## output_file = join(build_dir,"check_out")

## # make up launcher command line
## launcher_args = ""
## if c4 == 'mpi':
##     n_procs = [1,2,4]
##     launcher_args += "-m "

## runner = Builder(action = "%s %s $SOURCE | %s >> $TARGET" %(launcher, launcher_args, filterer),
##                  multi=1,
##                  ## chdir=1, # change to build dir 
##                  )
## env['BUILDERS']['RunTest'] = runner
## env['ENV']['LD_LIBRARY_PATH'] = os.environ['LD_LIBRARY_PATH']
## run_target = [env.RunTest(output_file,t) for t in full_tst_targets]
## AlwaysBuild(run_target)

## # add run target to the 'check' target
## Alias('run', run_target)


# version

__id__ = "$Id$"

# End of file

