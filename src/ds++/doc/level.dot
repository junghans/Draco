digraph bubba_package_level {

    /* graph attributes */
    center=1;
    size="8,14";
    ranksep=1;

   /* levels */
   level0 [shape=plaintext, label="Level 0:", fontsize=14];
   level1 [shape=plaintext, label="Level 1:", fontsize=14];
   level2 [shape=plaintext, label="Level 2:", fontsize=14];
   level3 [shape=plaintext, label="Level 3:", fontsize=14];
   level4 [shape=plaintext, label="Level 4:", fontsize=14];
   level5 [shape=plaintext, label="Level 5:", fontsize=14];

   level5 -> level4 -> level3 -> level2 -> level1 -> level0;

   /* level 0 */
   test_ds_testhh [shape=box, label="test/ds_test.hh" color=orange];
   timeh [shape=box, label="time.h" color=red];
   isSortedhh [shape=box, label="isSorted.hh"];
   destroyhh [shape=box, label="destroy.hh"];
   ArraySizesthh [shape=box, label="ArraySizes.t.hh"];
   Thin_Ptrhh [shape=box, label="Thin_Ptr.hh"];
   Boundshh [shape=box, label="Bounds.hh"];
   RefArrayhh [shape=box, label="RefArray.hh"];
   Vector_Liteihh [shape=box, label="Vector_Lite.i.hh"];
   Arraythh [shape=box, label="Array.t.hh"];
   DynArrayhh [shape=box, label="DynArray.hh"];
   dsxx_configh [shape=box, label="ds++/config.h" color=red];
   Releasehh [shape=box, label="Release.hh"];
   Check_Stringshh [shape=box, label="Check_Strings.hh"];

   /* level 1 */
   Asserthh [shape=box, label="Assert.hh"];
   Releasecc [shape=box, label="Release.cc"];
   ArraySizeshh [shape=box, label="ArraySizes.hh"];
   test_ds_testcc [shape=box, label="test/ds_test.cc" color=orange];
   RefArraythh [shape=box, label="RefArray.t.hh"];

   /* level 2 */
   Arrayhh [shape=box, label="Array.hh"];
   Vector_Litehh [shape=box, label="Vector_Lite.hh"];
   Allocatorshh [shape=box, label="Allocators.hh"];
   Index_Sethh [shape=box, label="Index_Set.hh"];
   test_tstCheck_Stringscc [shape=box, label="test/tstCheck_Strings.cc" color=orange];
   SPhh [shape=box, label="SP.hh"];
   Soft_Equivalencehh [shape=box, label="Soft_Equivalence.hh"];
   test_tstDynArraycc [shape=box, label="test/tstDynArray.cc" color=orange];
   test_tstBoundscc [shape=box, label="test/tstBounds.cc" color=orange];
   DynArraythh [shape=box, label="DynArray.t.hh"];
   test_tstAssertcc [shape=box, label="test/tstAssert.cc" color=orange];
   Assertcc [shape=box, label="Assert.cc"];
   File_Streamshh [shape=box, label="File_Streams.hh"];
   Safe_Ptrhh [shape=box, label="Safe_Ptr.hh"];
   DBC_Arrayhh [shape=box, label="DBC_Array.hh"];
   Packing_Utilshh [shape=box, label="Packing_Utils.hh"];
   SortPermutationhh [shape=box, label="SortPermutation.hh"];

   /* level 3 */
   test_tstSoft_Equivcc [shape=box, label="test/tstSoft_Equiv.cc" color=orange];
   test_tstFile_Streamscc [shape=box, label="test/tstFile_Streams.cc" color=orange];
   test_tstVector_Litecc [shape=box, label="test/tstVector_Lite.cc" color=orange];
   DynArray_ptcc [shape=box, label="DynArray_pt.cc"];
   Mathh [shape=box, label="Mat.hh"];
   Safe_Dividehh [shape=box, label="Safe_Divide.hh"];
   test_tstArraycc [shape=box, label="test/tstArray.cc" color=orange];
   test_tstPacking_Utilscc [shape=box, label="test/tstPacking_Utils.cc" color=orange];
   DBC_Ptrhh [shape=box, label="DBC_Ptr.hh"];
   File_Streamscc [shape=box, label="File_Streams.cc"];
   test_tstSortPermutationcc [shape=box, label="test/tstSortPermutation.cc" color=orange];
   Index_Counterhh [shape=box, label="Index_Counter.hh"];
   test_tstAllocatorscc [shape=box, label="test/tstAllocators.cc" color=orange];
   RCFhh [shape=box, label="RCF.hh"];
   test_tstIndex_Setcc [shape=box, label="test/tstIndex_Set.cc" color=orange];
   test_tstSPcc [shape=box, label="test/tstSP.cc" color=orange];
   test_tstDBC_Arraycc [shape=box, label="test/tstDBC_Array.cc" color=orange];

   /* level 4 */
   test_tstRCFcc [shape=box, label="test/tstRCF.cc" color=orange];
   test_tstDBC_Ptrcc [shape=box, label="test/tstDBC_Ptr.cc" color=orange];
   test_tstMatcc [shape=box, label="test/tstMat.cc" color=orange];
   test_tstSafe_Dividecc [shape=box, label="test/tstSafe_Divide.cc" color=orange];
   test_tstMat2RAcc [shape=box, label="test/tstMat2RA.cc" color=orange];
   Index_Converterhh [shape=box, label="Index_Converter.hh"];
   test_tstMat5RAcc [shape=box, label="test/tstMat5RA.cc" color=orange];
   test_tstMat3RAcc [shape=box, label="test/tstMat3RA.cc" color=orange];
   test_tstMat4RAcc [shape=box, label="test/tstMat4RA.cc" color=orange];
   test_tstMat1RAcc [shape=box, label="test/tstMat1RA.cc" color=orange];

   /* level 5 */
   test_tstIndex_Convertercc [shape=box, label="test/tstIndex_Converter.cc" color=orange];
   test_tstIndex_Countercc [shape=box, label="test/tstIndex_Counter.cc" color=orange];

   /* Dependencies */
   {rank=same; level0 test_ds_testhh timeh isSortedhh destroyhh ArraySizesthh Thin_Ptrhh Boundshh RefArrayhh Vector_Liteihh Arraythh DynArrayhh dsxx_configh Releasehh Check_Stringshh};
   {rank=same; level1 Asserthh Releasecc ArraySizeshh test_ds_testcc RefArraythh};
   {rank=same; level2 Arrayhh Vector_Litehh Allocatorshh Index_Sethh test_tstCheck_Stringscc SPhh Soft_Equivalencehh test_tstDynArraycc test_tstBoundscc DynArraythh test_tstAssertcc Assertcc File_Streamshh Safe_Ptrhh DBC_Arrayhh Packing_Utilshh SortPermutationhh};
   {rank=same; level3 test_tstSoft_Equivcc test_tstFile_Streamscc test_tstVector_Litecc DynArray_ptcc Mathh Safe_Dividehh test_tstArraycc test_tstPacking_Utilscc DBC_Ptrhh File_Streamscc test_tstSortPermutationcc Index_Counterhh test_tstAllocatorscc RCFhh test_tstIndex_Setcc test_tstSPcc test_tstDBC_Arraycc};
   {rank=same; level4 test_tstRCFcc test_tstDBC_Ptrcc test_tstMatcc test_tstSafe_Dividecc test_tstMat2RAcc Index_Converterhh test_tstMat5RAcc test_tstMat3RAcc test_tstMat4RAcc test_tstMat1RAcc};
   {rank=same; level5 test_tstIndex_Convertercc test_tstIndex_Countercc};

   /* level 1 */
   Asserthh -> {};
   Asserthh -> { dsxx_configh} [color=red, style=dotted];
   Releasecc -> { Releasehh};
   ArraySizeshh -> { ArraySizesthh};
   test_ds_testcc -> { test_ds_testhh} [color=orange, style=dotted];
   RefArraythh -> { RefArrayhh};

   /* level 2 */
   Arrayhh -> { RefArrayhh Asserthh Arraythh};
   Vector_Litehh -> { Asserthh Vector_Liteihh};
   Allocatorshh -> { Asserthh};
   Index_Sethh -> { Asserthh};
   test_tstCheck_Stringscc -> { Check_Stringshh Releasehh Asserthh} [color=orange, style=dotted];
   SPhh -> { Asserthh};
   Soft_Equivalencehh -> { Asserthh};
   test_tstDynArraycc -> { Asserthh Releasehh test_ds_testhh DynArrayhh} [color=orange, style=dotted];
   test_tstBoundscc -> { Asserthh Releasehh Boundshh test_ds_testhh} [color=orange, style=dotted];
   DynArraythh -> { DynArrayhh Asserthh};
   test_tstAssertcc -> { test_ds_testhh Asserthh Releasehh} [color=orange, style=dotted];
   Assertcc -> { Asserthh};
   File_Streamshh -> { Asserthh};
   Safe_Ptrhh -> { Asserthh};
   DBC_Arrayhh -> { Asserthh};
   Packing_Utilshh -> { Asserthh};
   SortPermutationhh -> { Asserthh isSortedhh};

   /* level 3 */
   test_tstSoft_Equivcc -> { test_ds_testhh Releasehh Soft_Equivalencehh} [color=orange, style=dotted];
   test_tstFile_Streamscc -> { Releasehh File_Streamshh Soft_Equivalencehh test_ds_testhh} [color=orange, style=dotted];
   test_tstVector_Litecc -> { test_ds_testhh Vector_Litehh Soft_Equivalencehh} [color=orange, style=dotted];
   DynArray_ptcc -> { DynArraythh};
   Mathh -> { Allocatorshh Boundshh destroyhh};
   Safe_Dividehh -> { Soft_Equivalencehh};
   test_tstArraycc -> { test_ds_testhh Releasehh ArraySizeshh Arrayhh} [color=orange, style=dotted];
   test_tstPacking_Utilscc -> { test_ds_testhh Releasehh Packing_Utilshh Soft_Equivalencehh} [color=orange, style=dotted];
   DBC_Ptrhh -> { Safe_Ptrhh Thin_Ptrhh};
   File_Streamscc -> { File_Streamshh};
   test_tstSortPermutationcc -> { SortPermutationhh Releasehh} [color=orange, style=dotted];
   Index_Counterhh -> { Index_Sethh};
   test_tstAllocatorscc -> { Allocatorshh test_ds_testhh} [color=orange, style=dotted];
   RCFhh -> { SPhh};
   test_tstIndex_Setcc -> { Releasehh test_ds_testhh Index_Sethh} [color=orange, style=dotted];
   test_tstSPcc -> { test_ds_testhh Releasehh SPhh} [color=orange, style=dotted];
   test_tstDBC_Arraycc -> { DBC_Arrayhh Releasehh test_ds_testhh} [color=orange, style=dotted];
   test_tstDBC_Arraycc -> { timeh} [color=red, style=dotted];

   /* level 4 */
   test_tstRCFcc -> { Releasehh Soft_Equivalencehh RCFhh test_ds_testhh} [color=orange, style=dotted];
   test_tstDBC_Ptrcc -> { test_ds_testhh Releasehh DBC_Ptrhh} [color=orange, style=dotted];
   test_tstMatcc -> { Releasehh test_ds_testhh Mathh} [color=orange, style=dotted];
   test_tstSafe_Dividecc -> { Safe_Dividehh Releasehh test_ds_testhh} [color=orange, style=dotted];
   test_tstMat2RAcc -> { Mathh} [color=orange, style=dotted];
   Index_Converterhh -> { Index_Counterhh};
   test_tstMat5RAcc -> { Mathh} [color=orange, style=dotted];
   test_tstMat3RAcc -> { Mathh} [color=orange, style=dotted];
   test_tstMat4RAcc -> { Mathh} [color=orange, style=dotted];
   test_tstMat1RAcc -> { Mathh} [color=orange, style=dotted];

   /* level 5 */
   test_tstIndex_Convertercc -> { Releasehh test_ds_testhh Index_Converterhh} [color=orange, style=dotted];
   test_tstIndex_Countercc -> { Releasehh test_ds_testhh Index_Converterhh} [color=orange, style=dotted];

}
