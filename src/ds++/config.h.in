/*-----------------------------------*-C-*-----------------------------------*/
/*!
 * \file   config.h 
 * \brief  CPP defines necessary for the ds++ package.
 * \note   Copyright (C) 2010-2012 Los Alamos National Security, LLC.
 * \version $Id$
 */
/*---------------------------------------------------------------------------*/

#ifndef __dsxx_config_h__
#define __dsxx_config_h__

/* hostname */
#include <limits.h>        // HOST_NAME_MAX, hostname

/*---------------------------------------------------------------------------*/
/* Draco/CMake build system variables */
/*---------------------------------------------------------------------------*/

/* DBC ENVIRONMENTS */
#define DBC @DRACO_DBC_LEVEL@

/* define BUILDING_DLL */
#cmakedefine BUILDING_DLL @BUILDING_DLL@

/* define DRACO_SHARED_LIBS */
#cmakedefine DRACO_SHARED_LIBS @DRACO_SHARED_LIBS@

/* Version Inforation */
#define DRACO_BUILD_DATE "@DRACO_BUILD_DATE@"
#define DRACO_BUILD_TYPE "@CMAKE_BUILD_TYPE@"
#cmakedefine DRACO_VERSION @DRACO_VERSION@
#cmakedefine DRACO_VERSION_FULL @DRACO_VERSION_FULL@
#define DRACO_VERSION_MAJOR "@DRACO_VERSION_MAJOR@"
#define DRACO_VERSION_MINOR "@DRACO_VERSION_MINOR@"
#define DRACO_VERSION_PATCH "@DRACO_VERSION_PATCH@"

/* System Type */
#cmakedefine MSVC @MSVC@
#cmakedefine UNIX @UNIX@
#cmakedefine draco_isLinux
#cmakedefine draco_isOSF1
#cmakedefine draco_isDarwin
#cmakedefine draco_isAIX
#cmakedefine draco_isLinux_with_aprun
#cmakedefine draco_isCatamount
#cmakedefine draco_isPGI
#cmakedefine DRACO_UNAME @DRACO_UNAME@
#cmakedefine HAVE_CUDA @HAVE_CUDA@
#cmakedefine APPLE @APPLE@

/*---------------------------------------------------------------------------*/
/* Platform checks */
/*---------------------------------------------------------------------------*/

/* Support for C99's restrict keyword */
#cmakedefine HAVE_RESTRICT
/* restrict is valid keyword in C99 but not in C++11.  Protect this define so
 * that it is set only for C++ */
#ifdef __cplusplus
#define restrict @RESTRICT_KEYWORD@
#endif /* __cplusplus */

#if defined __APPLE__
#define register 
#endif

/* Platform checks for various functions */

#cmakedefine HAVE_UNISTD_H   @HAVE_UNISTD_H@
#cmakedefine HAVE_LIMITS_H   @HAVE_LIMITS_H@
#cmakedefine HAVE_WINSOCK2_H @HAVE_WINSOCK2_H@

/* Use the POSIX minimum guarantee if HOST_NAME_MAX is not found.  Should be
 * located in climits (also posixl_lim.h, limits.h, syslimits.h). */
#cmakedefine HAVE_HOST_NAME_MAX
#cmakedefine HAVE_MAXHOSTNAMELEN
#cmakedefine HAVE_POSIX_HOST_NAME_MAX
#if defined __APPLE__
    #define HAVE_HOST_NAME_MAX
    #define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
#endif
#ifndef HAVE_HOST_NAME_MAX
    #ifdef HAVE_MAXHOSTNAMELEN
        #define HOST_NAME_MAX MAXHOSTNAMELEN
        #define HAVE_HOST_NAME_MAX
    #else
        #define HOST_NAME_MAX 256
        #define HAVE_HOST_NAME_MAX
    #endif
#endif
#cmakedefine HAVE_GETHOSTNAME

/* MAXPATHLEN in "unistd.h;limits.h;sys/param.h" */
#cmakedefine HAVE_MAXPATHLEN
#ifndef HAVE_MAXPATHLEN
    #define MAXPATHLEN 256
    #define HAVE_MAXPATHLEN
#endif

/* In MSVC, constants like M_PI are not defined by default in math.h.
 * To include them, we must set the following: */  
#if defined _WIN32 || defined __CYGWIN__ 
    #define _USE_MATH_DEFINES
#endif /* Win32 */

/* OpenMP Setup */
#cmakedefine USE_OPENMP @USE_OPENMP@

/* ---------------------------------------- */
/* FPE_TRAP Settings */
/* ---------------------------------------- */

// At most, only one of these should be defined in config/ac_platforms.m4
#cmakedefine FPETRAP_OSF_ALPHA    @FPETRAP_OSF_ALPHA@ 
#cmakedefine FPETRAP_DARWIN_INTEL @FPETRAP_DARWIN_INTEL@
#cmakedefine FPETRAP_DARWIN_PPC   @FPETRAP_DARWIN_PPC@
#cmakedefine FPETRAP_LINUX_X86    @FPETRAP_LINUX_X86@
#cmakedefine FPETRAP_WINDOWS_X86  @FPETRAP_WINDOWS_X86@

// Using values above, determine if fpe_trap is supported
#if defined(FPETRAP_OSF_ALPHA) ||\
    defined(FPETRAP_DARWIN_INTEL) ||\
    defined(FPETRAP_DARWIN_PPC) ||\
    defined(FPETRAP_LINUX_X86) ||\
    defined(FPETRAP_WINDOWS_X86)
#define FPETRAP_SUPPORTED
#else
#define FPETRAP_UNSUPPORTED
#endif 

/* ---------------------------------------- */
/*!
 * \page diagnostics Diagnostics Levels
 *
 * The diagnostics can be turned on in three different levels based on logical
 * bit comparisions.  The following shows the levels:
 * - Bit 0, (001), activates Level 1 (negligible performance impact)
 * - Bit 1, (010), activates Level 2 (some performance impact and possible
 *                                    intrusive output, rtt_memory trackin is
 *                                    activated.) 
 * - Bit 2, (100), activates Level 3 (includes fpe_trap diagnostics)
 * .
 * The following integer settings activate Levels in the following way:
 * - 0 all off
 * - 1 Level 1
 * - 2 Level 2
 * - 3 Level 1, Level 2
 * - 4 Level 3
 * - 5 Level 1, Level 3
 * - 6 Level 2, Level 3
 * - 7 Level 1, Level 2, Level 3
 * .
 * Thus setting -DDRACO_DIAGNOSTICS=7 at configure time will turn on all
 * levels.  The default setting is 0.
 *
 * The intent is to use Level 1 for high-level, low cost diagnostics that are
 * always active (ie. User "Education").  Levels 2 and 3 are for low-level
 * diagnostics that could incur a performance penalty.  However, all of these
 * usages are up to the client.
 *
 * The value for DRACO_DIAGNOSTICS is set and saved in ds++'s CMakeLists.tx
 * and config.h, respectively.
 */
/* ---------------------------------------- */   

#cmakedefine DRACO_DIAGNOSTICS @DRACO_DIAGNOSTICS@

#if !defined(DRACO_DIAGNOSTICS)
#define DRACO_DIAGNOSTICS 0
#endif 

#if DRACO_DIAGNOSTICS & 1
#define DRACO_DIAGNOSTICS_LEVEL_1
#endif

#if DRACO_DIAGNOSTICS & 2
#define DRACO_DIAGNOSTICS_LEVEL_2
#endif

#if DRACO_DIAGNOSTICS & 4
#define DRACO_DIAGNOSTICS_LEVEL_3
#endif

/* ---------------------------------------- */
/* C++ 11 support */
/* ---------------------------------------- */   

#cmakedefine DRACO_ENABLE_CXX11
/* @DRACO_ENABLE_CXX11@ */
#cmakedefine CXX11_FEATURE_LIST "@CXX11_FEATURE_LIST@"
#cmakedefine HAS_CXX11_AUTO
#cmakedefine HAS_CXX11_NULLPTR
#cmakedefine HAS_CXX11_LAMBDA
#cmakedefine HAS_CXX11_STATIC_ASSERT
#cmakedefine HAS_CXX11_RVALUE_REFERENCES
#cmakedefine HAS_CXX11_DECLTYPE
#cmakedefine HAS_CXX11_CSTDINT_H
#cmakedefine HAS_CXX11_LONG_LONG
#cmakedefine HAS_CXX11_VARIADIC_TEMPLATES
#cmakedefine HAS_CXX11_SIZEOF_MEMBER
#cmakedefine HAS_CXX11_INITIALIZER_LISTS
#cmakedefine HAS_CXX11_SHARED_PTR
#cmakedefine HAS_CXX11_ARRAY

/* ---------------------------------------- */
/* Configuration Options used by CMake      */
/* ---------------------------------------- */   
#cmakedefine CMAKE_CXX_COMPILER      "@CMAKE_CXX_COMPILER@"
#cmakedefine CMAKE_CXX_FLAGS         "@CMAKE_CXX_FLAGS@"
#cmakedefine CMAKE_CXX_FLAGS_DEBUG   "@CMAKE_CXX_FLAGS_DEBUG@"
#cmakedefine CMAKE_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@"
#cmakedefine CMAKE_C_COMPILER        "@CMAKE_C_COMPILER@"
#cmakedefine CMAKE_C_FLAGS           "@CMAKE_C_FLAGS@"
#cmakedefine CMAKE_C_FLAGS_DEBUG     "@CMAKE_C_FLAGS_DEBUG@"
#cmakedefine CMAKE_C_FLAGS_RELEASE   "@CMAKE_C_FLAGS_RELEASE@"
#cmakedefine CMAKE_Fortran_COMPILER  "@CMAKE_Fortran_COMPILER@"
#cmakedefine CMAKE_Fortran_FLAGS     "@CMAKE_Fortran_FLAGS@"
#cmakedefine CMAKE_Fortran_FLAGS_DEBUG     "@CMAKE_Fortran_FLAGS_DEBUG@"
#cmakedefine CMAKE_Fortran_FLAGS_RELEASE   "@CMAKE_Fortran_FLAGS_RELEASE@"
#cmakedefine CMAKE_BUILD_TYPE "@CMAKE_BUILD_TYPE@"

/* ---------------------------------------- */
/* GENERAL build system setup               */
/* ---------------------------------------- */   

/*!
 * Provide toolset for hiding symbols from shared libraries.  By default MSVC
 * hides everying unless they are marked as 'dllexport'.  By default
 * Linux-based linkers export everything unless they are marked as
 * 'hidden'. The macros DLL_PUBLIC and DLL_LOCAL are provided to help make
 * symbol export portable between Linux and Windows.
 *
 * \ref http://gcc.gnu.org/wiki/Visibility
 *
 * For MSVC, you must also mark functions as dllexport or dllimport.  When
 * compiling a file to place it in a dll, the symbols must be marked
 * 'dllexport', but when including a header that is associated with an
 * external .dll (include Array.hh and linking against -ldsxx.so), the same
 * symbol must be marked as 'dllimport.' The macro 'BUILDING_DLL' will be used
 * to control how the symbols are marked.
 *
 * \example Example use of DLL_PUBLIC CPP Symbol.
 * \code
 * extern "C" DLL_PUBLIC void function(int a);
 * class DLL_PUBLIC SomeClass
 * {
 *    int c;
 *    DLL_LOCAL void privateMethod();  // Only for use within this DSO
 *  public:
 *    Person(int _c) : c(_c) { }
 *    static void foo(int a);
 * };
 *
 * // ds++/isFinite_pt.cc file:
 * template DLL_PUBLIC 
 * bool isInfinity( float const & x );
 * \endcode 
 */

#cmakedefine CMAKE_COMPILER_IS_GNUCXX @CMAKE_COMPILER_IS_GNUCXX@

/* Help for GSL on Windows ---------------------------------- */
#if defined _WIN32 || defined __CYGWIN__ 
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
     #define GSL_DLL 1
  #endif
#endif

/* Windows ---------------------------------------- */
#if defined _WIN32 || defined __CYGWIN__ 
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
    #ifdef BUILDING_DLL /* building dll or importing symbols? */
      #ifdef __GNUC__
        #define DLL_PUBLIC __attribute__((dllexport))
      #else
        /* Note: actually gcc seems to also supports this syntax. */
        #define DLL_PUBLIC __declspec(dllexport) 
      #endif /* __GNUC__ */
    #else  /* BUILDING_DLL */
      #ifdef __GNUC__
        #define DLL_PUBLIC __attribute__((dllimport))
      #else
        /* Note: actually gcc seems to also supports this syntax. */
        #define DLL_PUBLIC __declspec(dllimport) 
      #endif /* __GNUC__ */
    #endif  /* BUILDING_DLL */
    #define DLL_LOCAL
        
  #else /* DRACO_SHARED_LIBS */
    /* when building static libraries, no need to export symbols. */
    #define DLL_PUBLIC
    #define DLL_LOCAL
  #endif /* DRACO_SHARED_LIBS */

/* Linux ---------------------------------------- */
#else 
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
    #if defined CMAKE_COMPILER_IS_GNUCXX && __GNUC__ >= 4
      #define DLL_PUBLIC __attribute__ ((visibility("default")))
      #define DLL_LOCAL  __attribute__ ((visibility("hidden")))
      /* These defines are taken from ds++/Compiler.hh written by Paul Henning */ 
      /* #define HIDE_FUNC __attribute__ ((visibility ("hidden"))) */
      /* #define EXPORT_FUNC __attribute__ ((visibility ("default"))) */
      /* #define HIDE_CLASS __attribute ((visibility ("hidden"))) */
      /* #define EXPORT_CLASS __attribute ((visibility ("default"))) */
    #else
      #define DLL_PUBLIC
      #define DLL_LOCAL

    #endif /* __GNUC__ >=4 */

  #else /* DRACO_SHARED_LIBS */
    /* when building static libraries, no need to export symbols. */
    #define DLL_PUBLIC
    #define DLL_LOCAL
  #endif /* DRACO_SHARED_LIBS */
#endif

/* Help MSVC resolve numeric_limits<T>::max() vs. std::max(int,int) */
#ifdef _MSC_VER
    #undef max
    #undef min
    #define NOMINMAX
    /* We want to use M_PI from math.h */
    #define _USE_MATH_DEFINES
#endif

#ifdef APPLE
    #undef  M_PI
    #define M_PI     3.14159265358979323846264338327950288
#endif

#endif /* __dsxx_config_h__ */

/*---------------------------------------------------------------------------*/
/* end of config.h */
/*---------------------------------------------------------------------------*/
