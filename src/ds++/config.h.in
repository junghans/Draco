/*-----------------------------------*-C-*-----------------------------------*/
/*!
 * \file   config.h 
 * \author Kelly Thompson <kgt@lanl.gov>
 * \date   Thu Sep 23 17:26:56 2010
 * \brief  CPP defines necessary for the ds++ package.
 * \note   Copyright (C) 2010 Los Alamos National Security, LLC.
 * \version $Id$
 */
/*---------------------------------------------------------------------------*/

#ifndef __dsxx_config_h__
#define __dsxx_config_h__

/* Switch between Autoconf-based build system and CMake-based build */
#undef DS_AUTOCONF

/* ---------------------------------------- */
/* AUTOCONF based build system              */
/* ---------------------------------------- */
#ifdef DS_AUTOCONF

/* DBC ENVIRONMENTS */
#undef DBC

/* Remove extra declspec values (for Windows dll) */
/* #define DLL_PUBLIC
   #define DLL_LOCAL */

/* Are we building static or shared libraries? */
#undef DRACO_SHARED_LIBS

/* ---------------------------------------- */
/* CMAKE based build system                 */
/* ---------------------------------------- */
#else

   /* DBC ENVIRONMENTS */
#define DBC @DRACO_DBC_LEVEL@

   /* Version Inforation */
#cmakedefine DRACO_VERSION @DRACO_VERSION@
#cmakedefine DRACO_VERSION_FULL @DRACO_VERSION_FULL@

   /* System Type */
#cmakedefine MSVC @MSVC@
#cmakedefine UNIX @UNIX@ 

   /* define BUILDING_DLL */
#cmakedefine BUILDING_DLL @BUILDING_DLL@

   /* define DRACO_SHARED_LIBS */
#cmakedefine DRACO_SHARED_LIBS @DRACO_SHARED_LIBS@

   /* In MSVC, constants like M_PI are not defined by default in math.h.  To include them, we must set the following: */
#cmakedefine _USE_MATH_DEFINES   

#endif /* Autoconf based build */

/* ---------------------------------------- */
/* GENERAL build system setup               */
/* ---------------------------------------- */
/*!
 * Provide toolset for hiding symbols from shared libraries.  By default MSVC
 * hides everying unless they are marked as 'dllexport'.  By default
 * Linux-based linkers export everything unless they are marked as
 * 'hidden'. The macros DLL_PUBLIC and DLL_LOCAL are provided to help make
 * symbol export portable between Linux and Windows.
 *
 * \ref http://gcc.gnu.org/wiki/Visibility
 *
 * For MSVC, you must also mark functions as dllexport or dllimport.  When
 * compiling a file to place it in a dll, the symbols must be marked
 * 'dllexport', but when including a header that is associated with an
 * external .dll (include Array.hh and linking against -ldsxx.so), the same
 * symbol must be marked as 'dllimport.' The macro 'BUILDING_DLL' will be used
 * to control how the symbols are marked.
 *
 * \example Example use of DLL_PUBLIC CPP Symbol.
 * \code
 * extern "C" DLL_PUBLIC void function(int a);
 * class DLL_PUBLIC SomeClass
 * {
 *    int c;
 *    DLL_LOCAL void privateMethod();  // Only for use within this DSO
 *  public:
 *    Person(int _c) : c(_c) { }
 *    static void foo(int a);
 * };
 * \endcode 
 */

/* Windows ---------------------------------------- */
#if defined _WIN32 || defined __CYGWIN__ 
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
    #ifdef BUILDING_DLL /* building dll or importing symbols? */
      #ifdef __GNUC__
        #define DLL_PUBLIC __attribute__((dllexport))
      #else
        /* Note: actually gcc seems to also supports this syntax. */
        #define DLL_PUBLIC __declspec(dllexport) 
      #endif /* __GNUC__ */
    #else  /* BUILDING_DLL */
      #ifdef __GNUC__
        #define DLL_PUBLIC __attribute__((dllimport))
      #else
        /* Note: actually gcc seems to also supports this syntax. */
        #define DLL_PUBLIC __declspec(dllimport) 
      #endif /* __GNUC__ */
    #endif  /* BUILDING_DLL */
    #define DLL_LOCAL
        
  #else /* DRACO_SHARED_LIBS */
    /* when building static libraries, no need to export symbols. */
    #define DLL_PUBLIC
    #define DLL_LOCAL
  #endif /* DRACO_SHARED_LIBS */

/* Linux ---------------------------------------- */
#else 
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
    #if __GNUC__ >= 4
      #define DLL_PUBLIC __attribute__ ((visibility("default")))
      #define DLL_LOCAL  __attribute__ ((visibility("hidden")))
    #else
      #define DLL_PUBLIC
      #define DLL_LOCAL
    #endif /* __GNUC__ >=4 */

  #else /* DRACO_SHARED_LIBS */
    /* when building static libraries, no need to export symbols. */
    #define DLL_PUBLIC
    #define DLL_LOCAL
  #endif /* DRACO_SHARED_LIBS */
#endif

/* Help MSVC resolve numeric_limits<T>::max() vs. std::max(int,int) */
#ifdef _MSC_VER
#undef max
#undef min
#define NOMINMAX
#endif

#endif                          /* __dsxx_config_h__ */

/*---------------------------------------------------------------------------*/
/*                              end of config.h */
/*---------------------------------------------------------------------------*/
