/*-----------------------------------*-C-*-----------------------------------*/
/*!
 * \file   config.h 
 * \brief  CPP defines necessary for the ds++ package.
 * \note   Copyright (C) 2010-2012 Los Alamos National Security, LLC.
 * \version $Id$
 */
/*---------------------------------------------------------------------------*/

#ifndef __dsxx_config_h__
#define __dsxx_config_h__

#include <climits>        // HOST_NAME_MAX, hostname
//#ifdef WIN32
    //#include <windows.h>  // MAX_COMPUTERNAME_LENGTH -> HOST_NAME_MAX
//#endif

/* DBC ENVIRONMENTS */
#define DBC @DRACO_DBC_LEVEL@

/* define BUILDING_DLL */
#cmakedefine BUILDING_DLL @BUILDING_DLL@

/* define DRACO_SHARED_LIBS */
#cmakedefine DRACO_SHARED_LIBS @DRACO_SHARED_LIBS@

   /* Version Inforation */
#cmakedefine DRACO_VERSION @DRACO_VERSION@
#cmakedefine DRACO_VERSION_FULL @DRACO_VERSION_FULL@
#define DRACO_VERSION_MAJOR "@DRACO_VERSION_MAJOR@"
#define DRACO_VERSION_MINOR "@DRACO_VERSION_MINOR@"
#define DRACO_VERSION_PATCH "@DRACO_VERSION_PATCH@"

   /* System Type */
#cmakedefine MSVC @MSVC@
#cmakedefine UNIX @UNIX@
#cmakedefine draco_isLinux
#cmakedefine draco_isOSF1
#cmakedefine draco_isDarwin
#cmakedefine draco_isAIX
#cmakedefine draco_isLinux_with_aprun
#cmakedefine draco_isCatamount
#cmakedefine DRACO_UNAME @DRACO_UNAME@
#cmakedefine HAVE_CUDA @HAVE_CUDA@

/* Are we using C++11 */
#cmakedefine DRACO_ENABLE_CXX11

/* Platform checks for various functions */

#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@
#cmakedefine HAVE_LIMITS_H @HAVE_LIMITS_H@
#cmakedefine HAVE_WINSOCK2_H @HAVE_WINSOCK2_H@

/* Use the POSIX minimum guarantee if HOST_NAME_MAX is not found.  Should be
 * located in climits (also posixl_lim.h, limits.h, syslimits.h). */
#cmakedefine HAVE_HOST_NAME_MAX
#cmakedefine HAVE_MAXHOSTNAMELEN
#cmakedefine HAVE_POSIX_HOST_NAME_MAX
#if defined __APPLE__
    #define HAVE_HOST_NAME_MAX
    #define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
#endif
#ifndef HAVE_HOST_NAME_MAX
    #ifdef HAVE_MAXHOSTNAMELEN
        #define HOST_NAME_MAX MAXHOSTNAMELEN
        #define HAVE_HOST_NAME_MAX
    #else
        #define HOST_NAME_MAX 256
        #define HAVE_HOST_NAME_MAX
    #endif
#endif
#cmakedefine HAVE_GETHOSTNAME

/* MAXPATHLEN in "unistd.h;limits.h;sys/param.h" */
#cmakedefine HAVE_MAXPATHLEN
#ifndef HAVE_MAXPATHLEN
    #define MAXPATHLEN 256
    #define HAVE_MAXPATHLEN
#endif

/* In MSVC, constants like M_PI are not defined by default in math.h.
 * To include them, we must set the following: */  
#if defined _WIN32 || defined __CYGWIN__ 
    #define _USE_MATH_DEFINES
#endif /* Win32 */

/* OpenMP Setup */
#cmakedefine USE_OPENMP @USE_OPENMP@

/* C++ 11 support */
#cmakedefine DRACO_ENABLE_CXX11
/* @DRACO_ENABLE_CXX11@ */
#cmakedefine CXX11_FEATURE_LIST "@CXX11_FEATURE_LIST@"

/* ---------------------------------------- */
/* GENERAL build system setup               */
/* ---------------------------------------- */   

/*!
 * Provide toolset for hiding symbols from shared libraries.  By default MSVC
 * hides everying unless they are marked as 'dllexport'.  By default
 * Linux-based linkers export everything unless they are marked as
 * 'hidden'. The macros DLL_PUBLIC and DLL_LOCAL are provided to help make
 * symbol export portable between Linux and Windows.
 *
 * \ref http://gcc.gnu.org/wiki/Visibility
 *
 * For MSVC, you must also mark functions as dllexport or dllimport.  When
 * compiling a file to place it in a dll, the symbols must be marked
 * 'dllexport', but when including a header that is associated with an
 * external .dll (include Array.hh and linking against -ldsxx.so), the same
 * symbol must be marked as 'dllimport.' The macro 'BUILDING_DLL' will be used
 * to control how the symbols are marked.
 *
 * \example Example use of DLL_PUBLIC CPP Symbol.
 * \code
 * extern "C" DLL_PUBLIC void function(int a);
 * class DLL_PUBLIC SomeClass
 * {
 *    int c;
 *    DLL_LOCAL void privateMethod();  // Only for use within this DSO
 *  public:
 *    Person(int _c) : c(_c) { }
 *    static void foo(int a);
 * };
 *
 * // ds++/isFinite_pt.cc file:
 * template DLL_PUBLIC 
 * bool isInfinity( float const & x );
 * \endcode 
 */

#cmakedefine CMAKE_COMPILER_IS_GNUCXX @CMAKE_COMPILER_IS_GNUCXX@

/* Windows ---------------------------------------- */
#if defined _WIN32 || defined __CYGWIN__ 
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
    #ifdef BUILDING_DLL /* building dll or importing symbols? */
      #ifdef __GNUC__
        #define DLL_PUBLIC __attribute__((dllexport))
      #else
        /* Note: actually gcc seems to also supports this syntax. */
        #define DLL_PUBLIC __declspec(dllexport) 
      #endif /* __GNUC__ */
    #else  /* BUILDING_DLL */
      #ifdef __GNUC__
        #define DLL_PUBLIC __attribute__((dllimport))
      #else
        /* Note: actually gcc seems to also supports this syntax. */
        #define DLL_PUBLIC __declspec(dllimport) 
      #endif /* __GNUC__ */
    #endif  /* BUILDING_DLL */
    #define DLL_LOCAL
        
  #else /* DRACO_SHARED_LIBS */
    /* when building static libraries, no need to export symbols. */
    #define DLL_PUBLIC
    #define DLL_LOCAL
  #endif /* DRACO_SHARED_LIBS */

/* Linux ---------------------------------------- */
#else 
  #ifdef DRACO_SHARED_LIBS /* building shared or static libs? */
    #if defined CMAKE_COMPILER_IS_GNUCXX && __GNUC__ >= 4
      #define DLL_PUBLIC __attribute__ ((visibility("default")))
      #define DLL_LOCAL  __attribute__ ((visibility("hidden")))
    #else
      #define DLL_PUBLIC
      #define DLL_LOCAL
    #endif /* __GNUC__ >=4 */

  #else /* DRACO_SHARED_LIBS */
    /* when building static libraries, no need to export symbols. */
    #define DLL_PUBLIC
    #define DLL_LOCAL
  #endif /* DRACO_SHARED_LIBS */
#endif

/* Help MSVC resolve numeric_limits<T>::max() vs. std::max(int,int) */
#ifdef _MSC_VER
    #undef max
    #undef min
    #define NOMINMAX
#endif

#endif                          /* __dsxx_config_h__ */

/*---------------------------------------------------------------------------*/
/*                              end of config.h */
/*---------------------------------------------------------------------------*/
