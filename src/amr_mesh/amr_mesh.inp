Top hat channel flow problem (quarter - core)
c 
c  title block
c
c coordinate system -- use only xyz! 
c RTT_format input  mesh file -- required input! 
c Analytic surface input file -- optional input. 
c (comments can be confused with real entries in the parser, so they are 
c  delineated with a "pre-underscore" herein)
c
coord: xyz
rtt_file: top.mesh5
surface_file: surface
end-title

c
c  initial zoning info block
c
c  The init and mesh blocks are used by the OS_Mesh Class but are ignored 
c  by the CAR_CU_Mesh Class. It is included here for reference only. The 
c  fine mesh that is specified corresponds to the ICEM cartesian mesh prior
c  to rendering the cylinderical geometry. The number of cells increases
c  rapidly as generations are added for this problem:
c
c	number of generations	number of cells (cells/generation)
c	1			  4914 (4914)
c	2			 10892 (4060, 6832)
c	3			 40474 (3622, 6548, 30304)
c	4			155526 (3448, 6428, 27650, 118000)
c       5                       616014 (??? - too big for my machine)
c
c  number of coarse zones and boundary conditions.
c
num_xcoarse: 6
num_ycoarse: 5
num_zcoarse: 5
lox_bnd: vacuum
hix_bnd: vacuum
loy_bnd: reflect
hiy_bnd: vacuum
loz_bnd: reflect
hiz_bnd: vaccum
end-init

c
c  mesh info block
c
c  endpoints (cm) of each coarse zone (num_?coarse + 1 entries) 
c  number of fine zones in each coarse zone (num_?coarse entries)
xcoarse: 0.0 2.5 3.0 4.0 4.5 7.0
num_xfine: 15 3 6 3 15
ycoarse: 0.0 0.5 1.0 1.5 2.0
num_yfine: 3 3 3 3
zcoarse: 0.0 0.5 1.0 1.5 2.0
num_zfine: 3 3 3 3
end-mesh

c
c  material info block
c
c  map of material number to coarse zone; numbered row-wise, ie, x spins 
c    fastest in (x,y,z) (_num_xcoarse X _num_ycoarse X _num_zcoarse  entries)
c  each material is defined by mat_ID number, density (g/cc), kappa, 
c    kappa_scatter, initial material temp, specific heat.
c
c  OPACITIES 
c  
c     _analytic_opacity                      description
c     -----------------     -----------------------------------------------------------------
c      "straight"             kappa entered as emmissivity/absorptivity [cm^2/g]
c                                cross section = kappa * density
c      "tcube"                kappa entered as kappa_zero [cm^2-keV^3/g]
c                                cross section = ( kappa / (T_n)^3 ) * density , 
c                                where T_n is T_mat at the beginning of the timestep
c      "opacity"              kappa entered as a straight cross section [1/cm]
c
c     kappa_scattering is always scattering coefficient; scat cross section = kappa_scat * density
c
c  SPECIFIC HEAT
c
c     _analytic_sp_heat                      description
c     -----------------      ----------------------------------------------------------------
c      "straight"             c_v entered as c_v [jks/g/keV]; 
c                                       dEdT = c_v * volume(cell) * dens
c      "tcube"                c_v entered as C_v_zero [jks/cm^3/kev^4]; 
c                                       dEdT = C_v_zero * volume(cell) * (T_n)^3
c      "dedt"                 c_v entered as dEdT [jks/keV]; dEdT = c_v
c
c  _implicitness \in [0,1]; 0 => fully explicit; 1 => "fully" implicit in time
c
zonemap: 1 2 3
num_materials: 3
c comment_matID, dens, kap_0, kap_thom, temp_init, c_v
mat: 1 0.01 20.0 0.0 0.05 0.1
     2 10.0 20.0 0.0 0.05 0.1
     3 10.0 20.0 0.0 0.05 0.1
analytic_opacity: straight
analytic_sp_heat: straight
implicitness: 1
end-mat

c
c  source and computational parameters block
c
c  _timestep (constant) [shakes]
c  Surface Source: number of surface sources, which face (entire face only), 
c                  Planckian Temperature, and angular distribution (cosine => isotropic intensity)
c  Number of particles; nominal = _npnom, maximum = _npmax, rate of change [particles/shake] = _dnpdt
c
c  _capacity = number of cells each processor will hold
c             set larger than num_cells for serial and full replication
c             must be contrived for stand-alone domain decomposition
c  _max_cycle = maximum number of cycles to run
c  _print_frequency: print each "print_frequency" cycle
c  _buffer_size in particles, for in-cycle communication between processors
c  _seed is random number seed
c
c  radiation input:
c    _rad_temp is initial radiation temperature [keV] (num_zone entries)
c    _rad_source is external radiation source [jks/cm^3/sh] (num_zone entries) that is "on" from
c                time zero to time = _rad_s_tend shakes.
c                In serial, _rad_source is normalized to unity over volume
c                In parallel, _rad_source is assumed normalized to a
c                             volume integral of unity.
c
timestep: .01
num_ss: 1
sur_source: lox
sur_temp: 0.5
ss_dist: cosine
cvolume_src: 1.0 0.0 (commented out by the leading "c")
rad_temp: 0.0 0.0 0.0
npnom:   10000
npmax:   10000
dnpdt:     0
capacity:  616014
max_cycle:  100
print_frequency: 10
buffer_size: 1
seed: 9347593
end-source
