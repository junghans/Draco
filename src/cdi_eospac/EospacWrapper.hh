//----------------------------------*-C++-*----------------------------------//
/*!
 * \file   cdi_eospac/EospacWrapper.hh
 * \author Kelly Thompson
 * \date   Fri Mar 30 15:07:48 2001
 * \brief  Header file for EospacWrapper
 */
//---------------------------------------------------------------------------//
// $Id$
//---------------------------------------------------------------------------//

#ifndef __cdi_eospac_EospacWrapper_hh__
#define __cdi_eospac_EospacWrapper_hh__

#include "EospacWrapper.hh"
#include "SesameTables.hh"
#include <cdi_eospac/config.h>

#include <string>
#include <vector>

namespace rtt_cdi_eospac
{
    namespace wrapper {

	//====================================================================
	/*! 
	 * \brief C++ EOSPAC wrapper routines.
	 *
	 * The EOSPAC routines are written in FORTRAN.  The following
	 * are C++ prototypes that mimic the F77 Gandolf functions.
	 * Each of these routines flattens the data types and then
	 * calls the Gandolf library's F77 functions.  
	 */
	//====================================================================
	
	/*!
	 * \brief Based on the requested returnTypes array, allocate
	 * 	  space and cache the required EoS Tables in the array
	 *        eosTable. 
	 *
	 * /param numRegions For this implementation of Eospac this
	 *        will always be unity.
	 * /param numReturnTypes The number of unique sesame data
	 *        types that need to be cached for lookups.
	 * /param returnTypes A list of integer indexes that specify
	 *        what EoS tables need to be cached.
	 * /param matIDs A list of integer material identifiers that
	 *        correspond to each of the returnTypes.  This
	 *        information is  used by EOSPAC to determine what
	 *        data table to use for each EoS lookup.
	 * /param eosTableLength The length of the eosTable array in
	 *        words. 
	 * /param eosTable The cached EoS data.
	 * /return Any errors generated by EOSPAC (if any).  The
	 *        eosTableLength and the cached eosTable are also
	 *        returned. 
	 */	 
	int es1tabs( int numRegions,  int numReturnTypes, 
		     const std::vector< ES4DataType >& returnTypes, 
		     const std::vector< int >& matIDs, 
		     int &eosTableLength, V_FLOAT **eosTable );

	/*!
	 * \brief Return a text error message associated that is
	 *        associated with an EOSPAC error code.
	 */
	std::string es1errmsg( int errorCode );

	/*
	 * \brief Retrieve information about the cached EoS data.
	 *
	 * \param tableIndex The index of the MatIDs[] and
	 * returnTypes[] data that we are requesting information
	 * about. 
	 * \param eosTable The cached EoS data.
	 * \param llogs Can this table return log data?
	 * \param matID Material identifier associated with this table 
	 * index.
	 * \param atomicNumber The atomic number of this material.
	 * \param atomicMass The atomic mass of this material.
	 * \param density0 The normal density for this material.
	 * \return Any errors generated by EOSPAC (if any).  The
	 * parameters llogs, matID, atomicNumber, atomicMass and
	 * density0 are also return values.
	 */
	int es1info( int &tableIndex, 
		     V_FLOAT **eosTable, int &llogs, int &matID,
		     double &atomicNumber, double &atomicMass, 
		     double &density0 );

	/*!
	 * \brief Retrieve the table name associated with given
	 *        tableIndex. 
	 */
	std::string es1name( int &tableID );

	/*!
	 * \brief Retrive EoS values for this material (using the
	 *        specified Sesame tables) corresponding to the
	 *        specified density and temperature values.
	 * 
	 * \param returnType An integer index that corresponds to an
	 *        EoS data type (e.g. internal energy).
	 * \param derivates Should this routine return derivative
	 *        values.
	 * \param interpolation Specifies the type of interplation to
	 *        use when retrieving the requested EoS data
	 *        (e.g. bi-linear). 
	 * \param eosTable The cached EoS data.
	 * \param eosTableLength The length of the eosTable array in
	 *        words. 
	 * \param xVals A vector of input parameters - usually 
	 *        densities.
	 * \param yVals A vector of input parameters - usually
	 *        temperatures.
	 * \param returnVals An array that contains the requested EoS
	 *        data. 
	 * \param returnSize The length of returnVals.
	 * \return Any errors generated by EOSPAC (if any).  This
	 *        routine also returns "returnVals" and "returnSize".
	 */
	int es1vals( const int returnType, const int derivatives, 
		     const int interpolation, V_FLOAT *eosTable, 
		     const int eosTableLength, 
		     const std::vector< double >& xVals, 
		     const std::vector< double >& yVals, 
		     std::vector< double >& returnVals,
		     const int returnSize );

    } // end namespace wrapper

} // end namespace rtt_cdi_eospac

// Function prototypes for EOSPAC F77 subroutines
//----------------------------------------------------------------------------//

// EOSPAC uses the following definitions for IRIX64 64-bit:
//
// typedef int BOOLEAN;
// typedef int INTEGER;
// typedef double REAL;
// 
// If another architecture is used we may need to use these
// typedefs:
//
// SunOS:
//
// typedef long BOOLEAN;
// typedef long INTEGER;
// typedef double REAL;

// See http://laurel.lanl.gov/XCI/PROJECTS/DATA/eos/UsersDocument/ for 
// details about EOSPAC routines.

// The values for the V_XXX types are defined in configure.in. (The 
// variables must first be declared in config.h.in).

extern "C" {

    void es1tabs_( V_BOOL *llog1, V_INT *iopt, V_BOOL &lprnt, V_INT &iprnt, 
		   V_INT &numReturnTypes, V_INT &numRegions,    
		   V_INT *returnTypes, V_FLOAT *ucons, V_INT *matIDs, 
		   V_INT &idtab, V_INT &eosTableLength, V_FLOAT **eosTable,
		   V_INT *errorCodes ); 

    //void kt1errmsg_( V_INT &errorCode, const char *errorMessage, V_INT &msgLen );
    void es1errmsg_( V_INT &errorCode, char errorMessage[] );


    void es1info_( V_INT &tableIndex, V_INT &regionIndex, 
		   V_FLOAT **eosTable, V_INT &iname, V_BOOL &llogs, 
		   V_FLOAT &xcnvt, V_FLOAT &ycnvt, V_FLOAT &fcnvt, 
		   V_INT &matid, V_FLOAT &znbar, V_FLOAT &anbar, 
		   V_FLOAT &dens0, V_INT &ifile, V_INT &errorCode );

    void es1name_( V_INT &tableID, const char *tableName );

    void es1vals_( V_INT &returnType, V_INT &derivatives, 
		   V_INT &interpolation, V_FLOAT *eosTable, 
		   V_INT &eosTableLength, V_INT &numZones, 
		   V_INT &regionIndex, V_FLOAT *xVals, V_FLOAT *yVals,
		   V_FLOAT *returnVals, V_INT &nvalsi, V_INT &errorCode ); 

} // end of extern "C" block

#endif // __cdi_eospac_EospacWrapper_hh__

//---------------------------------------------------------------------------//
// end of cdi_eospac/EospacWrapper.hh
//---------------------------------------------------------------------------//
