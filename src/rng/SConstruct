#-*-Python-*-
# Sconstruct for draco/rng
# T. M. Kelley
# Oct 28, 2008
# Input to scons
# (c) Copyright 2008 LANSLLC all rights reserved.

package_name = "rng"

import os

# rng source files, target, & libs
sources = filter( lambda x: x[-3:] == ".cc" or x[-2:] == ".c",
                  os.listdir('.'))

target  = "rtt_" + package_name

# headers for export 
headers = filter( lambda x: (x[-3:] == ".hh" or x[-2:] == ".h"),
                  os.listdir('.'))

# external pieces:
scons_dir = "../../../scons"
execfile(scons_dir + "/scons_master")
if arch == 'x86':
    master_suffix = "host"
else:
    master_suffix = "cell"
execfile(scons_dir + "/scons_project")
execfile(scons_dir + "/scons_master_%s" % master_suffix)
## execfile(scons_dir + "/scons_sprng_64")

# where to build
from os.path import join
build_dir    = join(build_root,"draco",package_name)
full_target  = join(build_dir,target)
full_sources = map( lambda x: join(build_dir,x), sources)
full_headers = map( lambda x: join(build_dir,x), headers)

# install dirs

install_libdir = export_libdir
install_incdir = join(export_incdir,package_name)
install_cnfdir = join(export_incdir,package_name,package_name)

libs += [
    ]

libpaths += [
    ]

cpppaths += [
    ".",
    project_incdir,
    ]


cxxflags += ""

# build environment: load compiler file to get environment
compiler_file = "scons_compiler_%s_%s_%s" % (c4, arch, compiler)
include_guard = compiler_file + "_included"
if include_guard not in dir():
    execfile(scons_dir + "/%s" % compiler_file)


# set build environment to build in the build directory:
env.VariantDir(build_dir, '.')


# What to do:


# 1. configure config.h
config_h_config = {
    'rng_repro' : repro,
    }

env['config'] = config_h_config
import  gen_rng_config
configurator  = Builder( action = gen_rng_config.generate_config_h)
env["BUILDERS"]["GenConfig"] = configurator
rng_config_target = env.GenConfig( join(build_dir,package_name,'config.h'),
                                   'config.h.pyin')

# 2. build the library
lib_target = env.Library( full_target, full_sources)

# 3. install library, headers
env.Install( install_libdir, lib_target)
env.Install( install_incdir, headers)
env.Install( install_cnfdir, [join(build_dir,package_name,"config.h")])
install_target = env.Alias( "install", [install_libdir,
                                        install_incdir,
                                        install_cnfdir
                                        ])

env.Alias("configure", rng_config_target)

Requires(lib_target, rng_config_target)


# Default things:
env.Default( [
    rng_config_target,
    lib_target,
    install_target
    ])

# recurse into test directory--note there is no default there
SConscript("./test/SConscript")

# version

__id__ = "$Id$"

# End of file

