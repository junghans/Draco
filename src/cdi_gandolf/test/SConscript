#-*-Python-*-
# Sconscipt for draco/test/cdi_gandolf
# T. M. Kelley
# Nov 05, 2008
# Input to scons: meant to be called from a master SConstruct script
# primary target: check
# (c) Copyright 2008 LANSLLC all rights reserved.

package_name = "cdi_gandolf"

tested_lib  = "rtt_" + package_name

import os

# source files, targets
tst_sources     = filter( lambda x: (x[-3:] == ".cc") and \
                          (x[:1] == "t"),
                          os.listdir('.'))
tst_targets = [src[:-3] for src in tst_sources]
test_lib         = package_name + "_test"
test_lib_sources = [test_lib + ".cc","ReadOdfGandolfFile.cc"]
test_lib_headers = [test_lib + ".hh"]

# external pieces:
scons_dir = "../../../../scons"
execfile(scons_dir + "/scons_master")
if arch == 'x86':
    master_suffix = "host"
else:
    master_suffix = "cell"
execfile(scons_dir + "/scons_project")
execfile(scons_dir + "/scons_master_%s" % master_suffix)

# where to build
from os.path import join
build_dir     = join(build_root,"draco",package_name,"test")
full_test_lib = join(build_dir,test_lib)
full_tst_sources = map( lambda x: join(build_dir,x), tst_sources)
full_lib_sources = map( lambda x: join(build_dir,x), test_lib_sources)
full_headers     = map( lambda x: join(build_dir,x), test_lib_headers)
full_tst_targets = map( lambda x: join(build_dir,x), tst_targets)

libs += [
    test_lib,
    tested_lib,
    "rtt_c4",
    "rtt_ds++",
    "rtt_cdi",
    ]

libpaths += [
    build_dir,
    project_libdir
    ]

cpppaths += [
    ".",
    "..",
    project_incdir
    ]

cxxflags += ""


## execfile(scons_dir + "/scons_sprng_64")
execfile(scons_dir + "/scons_gandolf_host_64")


# build environment
compiler_file = "scons_compiler_%s_%s_%s" % (c4, arch, compiler)
execfile(scons_dir + "/%s" % compiler_file)

# build in the build directory
env.VariantDir(build_dir, '.')


# What to do:
# 1. build the test library
lib_target = env.Library( full_test_lib, full_lib_sources)

# 2. build the test programs
test_targets = [env.Program( t,s, LIBS=libs, LIBPATH=libpaths) for (t,s) in zip(full_tst_targets,full_tst_sources)]

# add these to the "check" target
Alias("check",lib_target)
Alias("check",test_targets)


# version

__id__ = "$Id$"

# End of file

