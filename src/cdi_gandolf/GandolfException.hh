//----------------------------------*-C++-*----------------------------------//
/*!
 * \file   cdi_gandolf/GandolfException.hh
 * \author Kelly Thompson
 * \date   Tue Sep  5 10:47:29 2000
 * \brief  GandolfException class header file.
 */
//---------------------------------------------------------------------------//
// $Id$
//---------------------------------------------------------------------------//

#ifndef __cdi_gandolf_GandolfException_hh__
#define __cdi_gandolf_GandolfException_hh__

#include <string>
//#include <stdexcept>

// I really should inherit from std::exception and use standard C++
// exception symantecs (e.g. errorObj.what()).  However, I don't
// really understand how to make exceptions work.  I need a better
// reference to learn from. (-kt)

namespace rtt_cdi_gandolf
{
 
//===========================================================================//
/*!
 * \class GandolfException
 *
 * \brief This class handles exceptions thrown by GandolfOpacity when
 *        it calls the Gandolf library functions.
 *
 * This class provides an exception data type.  When an exception is
 *     thrown in the cdi_gandolf package a GandolfException object is
 *     created and may be trapped in the calling routine by using a
 *     try/catch block when a GandolfFile or GandolfOpacity object is
 *     first created or when the client fetches an opacity value(s)
 *     by using one of GandolfOpacities accessor functions.  
 *
 *     There is one base exception class (GandolfException) and 5
 *     derived exception classes (gkeysException, gchgridsException,
 *     ggetgrayException, ggetmgException and gmatidsException).  
 *
 * \example cdi_gandolf/test/tGandolfFile.cc
 * \example cdi_gandolf/test/tCDIGandolf.cc
 * \example cdi_gandolf/test/tGandolfWithCDI.cc
 *
 * These two examples demonstrate how the try/catch blocks may be used 
 * to trap errors in the cdi_gandolf package.  They also demonstrate
 * how the calling program can extract information about the exception.
 *
 */
//===========================================================================//

class GandolfException //: public std::exception
{
  protected:    

    /*!
     * \brief The integer error code returned by the Gandolf function.
     */
    const int errorCode;
    /*!
     * \brief The name of the Gandolf function that generated the
     *        error.
     */
    const std::string gandolfFunctionName;

  public:

    // CREATORS

    /*!
     * \brief Standard GandolfException constructor.
     *
     * \param gandolfFunctionName
     * \param errorCode
     */    
    GandolfException( std::string gandolfFunctionName, int errorCode )
	: gandolfFunctionName( gandolfFunctionName ), errorCode( errorCode )
    { 
	// empty
    };

    /*!
     * \brief Standard GandolfException destructor.
     *
     *     We require a virtual destructor to avoid potential memory
     *     leaks that may occur when derived objects are destroyed
     *     without first destroying this parent object.
     */
    ~GandolfException() {};

    // ACCESSORS

    /*!
     * \brief Accessor to return the name of the Gandolf function
     *        where the error was generated.
     */
    std::string getGandolfFunctionName() const
    { 
	return gandolfFunctionName;
    };
    
    /*!
     * \brief Accessor to return the integer error code generated by
     *        the Gandolf function.
     */
    int getErrorCode() const { return errorCode; }; 

    /*!
     * \brief This function returns a string that describes this
     *        exception.
     */
    std::string errorMessage() const ;

    /*!
     * \brief This function returns a short paragraph that summarizes
     *         all of the known error information associated with this 
     *         exception.
     */
    std::string errorSummary() const;

};

// --------------------- //
// gkeys Exception Class //
// --------------------- //

class gkeysException : public GandolfException
{

  public:

    // CONSTRUCTOR

    gkeysException( int errorCode );
    
    // ACCESSORS

    std::string errorMessage() const;
    
};

// ------------------------ //
// gchgrids Exception Class //
// ------------------------ //

class gchgridsException : public GandolfException
{

  public:

    // CONSTRUCTOR

    gchgridsException( int errorCode );
    
    // ACCESSORS

    std::string errorMessage() const;
    
};

// ------------------------ //
// ggetgray Exception Class //
// ------------------------ //

class ggetgrayException : public GandolfException
{

  public:

    // CONSTRUCTOR

    ggetgrayException( int errorCode );
    
    // ACCESSORS

    std::string errorMessage() const;
    
};

// ---------------------- //
// ggetmg Exception Class //
// ---------------------- //

class ggetmgException : public GandolfException
{

  public:

    // CONSTRUCTOR

    ggetmgException( int errorCode );
    
    // ACCESSORS

    std::string errorMessage() const;
    
};

// ----------------------- //
// gmatids Exception Class //
// ----------------------- //

class gmatidsException : public GandolfException
{

  public:

    // CONSTRUCTOR

    gmatidsException( int errorCode );
    
    // ACCESSORS

    std::string errorMessage() const;
    
};

} // end namespace rtt_cdi_gandolf

#endif // __cdi_gandolf_GandolfException_hh__

//---------------------------------------------------------------------------//
// end of cdi_gandolf/GandolfException.hh
//---------------------------------------------------------------------------//
