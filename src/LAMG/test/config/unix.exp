# unix.exp Time-stamp: <99/02/04 17:40:18 rsqrd>

send_user "In unix.exp.\n"

#
# tool_executable generates the executable name to be run for this tool.
#

proc tool_executable {} {
 global tool
 global ${tool}name
 global TOOL_EXECUTABLE

 if [info exists TOOL_EXECUTABLE] {
    set toolname "$TOOL_EXECUTABLE"
 } elseif [info exists ${tool}name] {
    eval set toolname $${tool}name
 } else {
    global objdir
    set toolname $objdir/$tool
 }
 set cmd "return \"\${libexecdir}/launchtest $toolname\""

 # Make sure that any variables referenced by $toolname
 # are expanded at the global level.

 uplevel #0 $cmd
}

#
# ${tool}_exit is called by DejaGnu's runtest after all tests
# are completed in order to close an interactive test program.
#

proc ${tool}_exit {} {
 set toolname [tool_executable]
 send_user "Exiting $toolname.\n"
}

#
# ${tool}_version is called by DejaGnu's runtest after all tests
# are completed and reported to display the version information.
#

proc ${tool}_version {} {
 set toolname [tool_executable]
 set vers_output "failed: $toolname execution failed."
 catch {set vers_output [eval exec $toolname --version]}
 clone_output "$vers_output"
}

#
# ${tool}_version is called by DejaGnu's runtest after all tests
# are completed and reported to display the version information.
#

proc ${tool}_version_old {} {
 global tool
 set toolname [tool_executable]
 set vers_output "failed: $toolname execution failed."
 clone_output "$tool: version not yet supported\n"
}

#
# ${tool}_start is **not** called by DejaGnu's runtest, but it should
# be called befor the first test is done.
# This procedure actuall starts the test program.
#

proc ${tool}_start {} {
 global comp_output
 global NPROCS

 set toolname [tool_executable]

 clone_output "Executing: $toolname"

 if {$NPROCS > 1} {
    clone_output "Execution: Parallel $NPROCS processes"
 } else {
    clone_output "Execution: Serial"
 }

 if [catch {set comp_output [eval exec $toolname]} comp_error_msg] {
    set comp_output $comp_error_msg
    return 0
 }
 return 1
}

# print build environment here...

if [info exists build_environment] {
  clone_output "Build environment: $build_environment"
}


# actually start the test program

set comp_completion_code [${tool}_start]

if $all_flag {
  send_user "$comp_output\n"
}

