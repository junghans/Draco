#! /usr/bin/env python

################################################################################
# Imported modules
################################################################################
import os
import sys
import re
import commands
from optparse import OptionParser
from datetime import date

################################################################################
# Create argument parser
################################################################################
usage = "usage: %prog [options] <template> <output>"
parser = OptionParser(usage)

################################################################################
# Add options
################################################################################

# doxygen brief
parser.add_option("-b", "--brief", dest="start",
	help="Doxygen brief desctiption", metavar="BRIEF")

# class name
parser.add_option("-c", "--classname", dest="classname",
	help="Classname of new class", metavar="CLASSNAME")

# package name
parser.add_option("-p", "--pkg", dest="pkg",
	help="Package name", metavar="PACKAGE")

# tpackage name
parser.add_option("-t", "--tpkg", dest="tpkg",
	help="Package name", metavar="TPACKAGE")

# tpackage name
parser.add_option("-s", "--spkg", dest="spkg",
	help="Package name", metavar="SPACKAGE")

# namespace
parser.add_option("-n", "--namespace", dest="namespace",
	help="Namespace of new class", metavar="NAMESPACE")

# author
parser.add_option("-a", "--author", dest="author",
	help="Author", metavar="AUTHOR")

# parameter type
parser.add_option("-l", "--templatelabel", dest="tlabel",
    help="Template label, i.e., typename or class", metavar="TLABEL")

# parameter type
parser.add_option("-f", "--templateparam", dest="tparam",
    help="Template parameter", metavar="TPARAM")

################################################################################
# Get information from environment
################################################################################
user = os.getenv('USER')
namecmd = "finger %(user)s | head -n 1 | sed 's,^.*[\:] ,,g'" % {'user' : user}
(status, user) = commands.getstatusoutput(namecmd)
cwd = os.getcwd()
p = re.compile('^.*[\/]')
date = date.today().ctime()

################################################################################
# Set defaults
################################################################################
parser.set_defaults(namespace=p.sub('', cwd))
parser.set_defaults(pkg=p.sub('', cwd))
parser.set_defaults(tpkg=p.sub('', cwd))
parser.set_defaults(spkg=p.sub('', cwd))
parser.set_defaults(start='Need to set brief')
parser.set_defaults(author=user)
parser.set_defaults(tlabel='typename')
parser.set_defaults(tparam='T')

################################################################################
# Read options
################################################################################
(options, args) = parser.parse_args()

if len(args) != 2:
	parser.error('Incorrect number of arguments')

template = args[0]
output = args[1]

################################################################################
# Set class if not specified by user
################################################################################
if(options.classname == None):
	options.classname = re.sub('[\.].*$', '', template);

################################################################################
# Read Draco environment
################################################################################
draco = os.getenv('DRACO_ENV')
if(draco == None):
	parser.error('You need to set DRACO_DIR environment variable\n\
		Example: export DRACO_DIR=$HOME/projects/draco/environment')
template_path = draco + '/templates/'

################################################################################
# Open input template and output file
################################################################################
template = open(template_path + template, 'r')
output = open(output, 'w');

################################################################################
# Parse template file
################################################################################
sub_pairs = [[re.compile('<user>'), user],
	[re.compile('<date>'), date],
	[re.compile('<pkg>'), options.pkg],
	[re.compile('<tpkg>'), options.tpkg],
	[re.compile('<spkg>'), options.spkg],
	[re.compile('<start>'), options.start],
	[re.compile('<class>'), options.classname],
	[re.compile('<basename>'), options.classname],
	[re.compile('<namespace>'), options.namespace],
	[re.compile('<paramtype>'), options.tlabel],
	[re.compile('<parameter>'), options.tparam]
    ]

line = 1
while line:
	line = template.readline()
	
	for p in sub_pairs:
		line = p[0].sub(p[1], line)

	output.write(line)
