#!/usr/bin/env python
##---------------------------------------------------------------------------##
## Depends
##
## Michael W. Buksas
##
## $Id$
##---------------------------------------------------------------------------##

"""Depends

Usage: depends [-d dir]

Depends searches for component dependencies in C/C++ files in the
current directory, or the directory specified by -d and, if it
exists, a test sub-directory.

It will then list all of the component directories that files in the
specified directory depend on. It then lists all components that the
testing sub-directory depends on which the main directory does not.

"""

def process_directory(directory):
    
    deps = Dependencies.dir_inc_comp(directory)
    
    test_directory = os.path.join(options.directory,'test')
    if os.path.exists(test_directory):
        test_deps = \
            Dependencies.dir_inc_comp(test_directory).difference(deps)
    else: 
        test_deps = set()

    return deps, test_deps
        

def format_component(comp):

    return "  %s/%s" % (Jayenne.component_to_package(comp), comp)

##---------------------------------------------------------------------------##
## MAIN PROGRAM
##---------------------------------------------------------------------------##

if __name__=='__main__':

    import os, os.path
    import Dependencies, Jayenne

    from optparse import OptionParser
    from optparse import OptionValueError

    parser = OptionParser(usage=__doc__)
    parser.add_option("-d", "--directory",
                      type    = "string",
                      action  = "store",
                      dest    = "directory",
                      default = os.getcwd(),
                      help = "Specify a directory"
                      )

    parser.add_option("-a", "--all",
                      action = "store_true",
                      dest   = "all",
                      help   = "Produce results for all sub-directories",
                      )

    (options, args) = parser.parse_args()

    print "Working in package directory  : %s" % (options.directory)
    print "Package name is               : %s\n" % (os.path.basename(options.directory))

    deps, test_deps = process_directory(options.directory)

    if deps:
        print "Referenced components:"
        print "\n".join([format_component(comp) for comp in deps])
        print
    else: 
        print "No referenced components:"


    if test_deps:
        print "Test only components:"
        print "\n".join([format_component(comp) for comp in test_deps])
        print
    else:
        print "No test only components."

    

    

        
