#!/usr/bin/env python

"""
Checks out a variety of CCS-2 packages from the local CVS
repositories.  

Argument 'module' may be omitted only if the -r <tagname> option is
used and the name of the package is the first word in the tag name,
e.g. -r wedgehog-4_3_0 implies a package name of 'wedgehog'

The 'module' argument can also refer to an entire package,
e.g. 'draco' or a component within the package, e.g. 'draco/tools'. In
the latter case, it may be desirable to use the -d option to specify a
more compact directory name.

Examples:

  > checkout draco           # Checks out the head version of draco
  > checkout draco 4_1_0     # Checks out release 4_1_0 of draco
  > checkout -r draco-4_1_0  # Ditto

  > checkout -r Camel_Norton uncleMcFlux
  # Checks out the Camel_Norton branch of Uncle Mcflux. Note that the
  # package name is not optional as it does not appear in the tag.

  > checkout draco/tools
  # Checks out the tools component of draco into directory draco/tools.

  checkout draco/tools -d tools      # Ditto, but into directory tools.
"""

from optparse import OptionParser, OptionValueError
import sys, os
import Utils, Verbosity, CVS, Repo, Checkout

class ArgumentsException (Exception):
    """An exception class representing an improper combination of
    arguments and options"""

package_list = ', '.join(Repo.package_list())
def list_packages(): print "Available Packages:", package_list

usage="usage: %prog [module] -r version -d dest [options]" + __doc__

parser = OptionParser(usage=usage)
parser.add_option("-r", "--tagname",
                  type    = "string",
                  action  = "store",
                  dest    = "tagname",
                  default = "",
                  help    = "Specify a symbolic tag for the package."
                  )

parser.add_option("-d", "--directory",
                  type   = "string",
                  action = "store",
                  dest   = "destination",
                  help   = "Specify a name for the checked-out source directory"
                  )

parser.add_option("-l", "--location",
                  type    = "string",
                  action  = "store",
                  dest    = "location",
                  default = os.getcwd(),
                  help    = "Specify a directory to run cvs in."
                  )

parser.add_option("-e", "--export",
                  action  = "store_true",
                  dest    = "export",
                  help    = "Export, instead of checking out sources."
                  )

parser.add_option("-v", "--verbose",
                  action  = "count",
                  dest    = "verbosity",
                  help    = "More v's mean more output."
                  )

##---------------------------------------------------------------------------##
def parse_input(options, args):
    """Build a CVS.Module object from the options and arguments

    Supported Module/tag combos:

    1.  module              | module is args[0], tag is not specified -> HEAD.
    2.  module -r tag       | tag is options.tagname, module is args[0]
    2b. module/part -r tag  | same as above, but module is args[0].split('/')[0]
                            | CVS.Module takes care of this case.
    3.  -r module-version   | Tag is options.tagname, module is
                            | options.tagname.split('-')[0]
    4.  module version      | Both in args. Tag is 'module-version'
    4b. module/part version | Tag is built from 'module' not 'module/part'
    
    """

    if len(args) > 2:
        raise ArgumentsException("Too many arguments.")

    
    # If there is nothing in agrs, we must be in case 3.
    if not args:
        parts = options.tagname.split("-",1)
        if len(parts) < 2:
            raise ArgumentsException("Missing package name. Could not "
                                     "deduce from tag.")
        else:
            module = parts[0]
            tag    = options.tagname
            
    else:
        module = args[0]

        if options.tagname:
            tag = options.tagname
        elif len(args)==2:
            tag = module.split('/',1)[0] + '-' + args[1]
        else:
            tag=None

    
    return (module, tag)


##---------------------------------------------------------------------------##
if __name__=="__main__":

    (options, args) = parser.parse_args()

    verbosity = Verbosity.make(options.verbosity)

    verbosity("Options: "   + str(options), 3)
    verbosity("Arguments: " + str(args),    3)
    
    module,   tag      = parse_input(options, args)
    tag_kind, tag_name = Checkout.parse_tag(tag)

    verbosity("Identified module name %s" % module, 2)
    verbosity("Identified tag name: %s" % tag_name, 2)
    verbosity("Identified tag kind: %s" % tag_kind, 2)

    Checkout.checkout(
        module, 
        options.destination, options.location, options.export, 
        tag_kind, tag_name, 
        verbosity)
                 


