#! /usr/bin/env python

import Module
import Verbosity
import optparse

def with_do(argv):

    usage = "usage: with <options> <modules> do <command>"
    version = "version: %prog 0.1"
    description = """
Establish a module context for a single command given as arguments
to this script. Implement table look-up for abbreviations of module
names.

<options> control the behavior of with.
<modules> consists of one or more module names and/or abbreviations

Everything after 'do' is treated as the command to execute, including
all arguments and flags.
    
"""
    
    parser = optparse.OptionParser(usage=usage,
                                   version=version,
                                   description=description)

    parser.add_option("-v", "--verbose",
                      action="count",
                      dest="verbose",
                      default=False,
                      help="Print more information")

    parser.add_option("-f", "--file",
                      dest="filename",
                      default="~/.with.cfg",
                      help="Specify an alternate configuration file"
                      )


    (options, commands) = parser.parse_args()

    verbose = Verbosity.make(options.verbose)

    try:
        do_index = commands.index('do')
    except ValueError:
        sys.stderr.write("ERROR: Missing 'do' command\n")
        sys.exit(-1)

    modules, command = commands[0:do_index], commands[do_index+1:]

    verbose("Loading modules: %s" % ', '.join(modules), 1)
    
    for module in modules:
        Module.add_module(module)

    verbose("Executing command: %s" % ' '.join(command), 1)

    error = os.spawnvp(os.P_WAIT, command[0], command)

    verbose("...with exit status: %s" % error, 2)

    if error:
        sys.stderr.write("Command '%s' failed with error code %s\n" %
                         (' '.join(command), error))
        sys.exit(-1)


if __name__ == "__main__":

    import sys, os
    with_do(sys.argv)

