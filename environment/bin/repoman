#!/usr/bin/env python
# -*- mode: Python -*-

"""Get a compressed tar file of the named repository. Optinally store
the file in HPSS and push it to the secure network.
"""

import Jayenne, HPSS, Verbosity, Utils, Cleanup
import tempfile, tarfile, os, sys


def parse_command_line():

    import optparse

    # Documentation string for optparse module:
    usage       = "usage: %prog [options] package"
    version     = "version: %prog 1.0"
    description = ' '.join(["Make tarfiles of the cvs repositories in",
                           "/codes/radtran/cvsroot. Optionally store",
                           "in HPSS and push via Mercury."])
    
    parser = optparse.OptionParser(usage=usage,
                                   version=version,
                                   description=description)

    parser.add_option("-z", "--compress",
                      action="store_true",
                      dest="compress",
                      default=False,
                      help="Use zgip to compress the archive.")
    
    parser.add_option("-s", "--store",
                      action="store_true",
                      dest="store",
                      default=False,
                      help="Put the resulting tarfile in HPSS under directory xfer") 
    
    parser.add_option("-p", "--push",
                      action="store_true",
                      dest="push",
                      default=False,
                      help="Push the HPSS file to the secure network. Implies -s") 
    
    parser.add_option("-v", "--verbose",
                      action="count",
                      dest="verbose",
                      default=False,
                      help="Print more information")

    parser.add_option("-S", "--secure",
                      action="store_true",
                      dest="secure",
                      default=False,
                      help="Equivalent to -pz")

    parser.add_option("--dry-run", 
                      action  = "store_false",
                      dest    = "go",
                      default = True,
                      help    = "Don't actually do anything.")

    (options, packages) = parser.parse_args()

    # Push implies store:
    if options.push: options.store = True

    if options.secure:
        options.push     = True
        options.store    = True
        options.compress = True

    for package in packages:
        
        if not Jayenne.is_valid_package(package):
            print "Do not know about package: %s. Dropping from list." % package
            packages.remove(package)

    if len(packages) < 1:
        parser.error("Missing a package name.")
        
    return (options, packages)


##---------------------------------------------------------------------------##
def get_archive_name(package, directory=None, compress = True):

    """Transform a package name into the name of a tar repository.

    Optional argument indicates gnu-zip compression. Defaults to true.

    >>> get_archive_name("Whatever")
    'Whatever.tgz'

    >>> get_archive_name("andEver", False)
    'andEver.tar'

    >>> get_archive_name("Amen", True)
    'Amen.tgz'

    """

    if not directory: 
        directory = ""

    if compress:
        extension = ".tgz"
    else:
        extension = ".tar"

    return os.path.join(directory, "".join([package, "_arch", extension]))



##---------------------------------------------------------------------------##
def make_archive(package_name, directory, compress):

    # We only allow "top-level" packages to be archived.
    assert(Jayenne.is_valid_package(package_name))

    package = Jayenne.make_package(package_name)

    assert(package.repository.is_local())

    archive_file = get_archive_name(package.name, directory, compress)

    message("Directory to be archived: %s" % package.path, 3)

    if options.go:
        mode = 'w'
        if compress: mode += ":gz"

        tar = tarfile.open(archive_file, mode)
        tar.add(package.path, package.name)
        tar.close()

    message(" ... as file: %s" % (archive_file, ),2)

    return archive_file


##---------------------------------------------------------------------------##
if __name__=="__main__":

    (options, packages) = parse_command_line()

    message = Verbosity.make(options.verbose)

    message("Options: %s" % options, 3)
    message("Packages: %s" % packages, 3)

    if options.store and options.go:
        temp_dir = tempfile.mkdtemp()
        Cleanup.delete_on_exit(temp_dir)
        message("Creating temporary directory: %s" % temp_dir, 2)
    else:
        temp_dir = ""
        
    for package_name in packages:

        message ("Making archive for %s" % package_name, 1)
        if options.go:
            archive = make_archive(package_name, temp_dir,
            options.compress)

        if options.store:
            time = Utils.get_timestamp_as_string(archive)
            comment = "Created: %s" %(time,)
            hpss_filename = HPSS.store(archive, comment, verbose=message)

        if options.push:
            HPSS.push(hpss_filename, package_name, verbose=message)

