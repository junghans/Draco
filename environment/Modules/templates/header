proc moduleVersion { } {
   if { ! [regexp {[^/]*$} [module-info name] ver] } {
      puts stderr "Internal modulefile error, please send a bug report to consult@lanl.gov"
   }
   return $ver
}

# GCC has two digits to define major version number
proc moduleMajorVersion { } {
   if { ! [regexp {(^[A-Za-z0-9._-]+)/} [module-info name] mname1 mname] } {
      puts stderr "Internal modulefile error: Name/MajorVersion parsing."
      puts stderr "Please send a bug report to consult@lanl.gov.\n"
   } 
   if { $mname == "gcc" } {
      regexp {([^/]*$i)*[0-9]+\.[0-9]+} [module-info name] majorver
    } else {
      regexp {([^/]*$i)*[0-9]+} [module-info name] majorver
    }
    return $majorver
}

proc moduleName { } {
   if { ! [regexp {(^[A-Za-z0-9._-]+)/} [module-info name] mname1 mname] } {
      puts stderr "Internal modulefile error, please send a bug report to consult@lanl.gov"
   }
   return $mname
}

proc machineName { } {
    set sysName ""
    if { [ file exists /usr/projects/hpcsoft/icn_define ] } {
        set sysName [ exec /usr/projects/hpcsoft/icn_define ]
    } elseif { [ info exists ::env(HOSTNAME) ] } {
       set sysName $::env(HOSTNAME)
    } else {
        puts stderr "Unable to determine system name."
        set sysName ""
    }
   return $sysName
}

proc systemOS { } {
   if { [ file exists /usr/projects/hpcsoft/sys_os ] } {
      set sysOS [ exec /usr/projects/hpcsoft/sys_os ]
   } else {
      puts stderr "Unable to determine system OS, please send a bug report to consult@lanl.gov"
      set sysOS ""
   }
   return $sysOS
}

proc systemType { } {
   if { [ file exists /usr/projects/hpcsoft/sys_type.sh ] } {
      set sysType [ exec /usr/projects/hpcsoft/sys_type.sh ]
   } else {
      puts stderr "Unable to determine system type, please send a bug report to consult@lanl.gov"
      set sysType ""
   }
   return $sysType
}
