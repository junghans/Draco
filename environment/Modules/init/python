import os, sys, string

if not os.environ.has_key('MODULE_VERSION'):
        os.environ['MODULE_VERSION_STACK'] = '3.2.7'
        os.environ['MODULE_VERSION'] = '3.2.7'
else:
        os.environ['MODULE_VERSION_STACK'] = os.environ['MODULE_VERSION']
os.environ['MODULESHOME'] = '/ccs/codes/radtran/vendors/Linux64/Modules/3.2.7'

if not os.environ.has_key('MODULEPATH'):
        os.environ['MODULEPATH'] = os.popen("""sed -n 's/[ 	#].*$//; /./H; $ { x; s/^\\n//; s/\\n/:/g; p; }' ${MODULESHOME}/init/.modulespath""").readline()

if not os.environ.has_key('LOADEDMODULES'):
        os.environ['LOADEDMODULES'] = '';

def module(command, *arguments):
        commands = os.popen('/ccs/codes/radtran/vendors/Linux64/Modules/%s/bin/modulecmd python %s %s' % (os.environ['MODULE_VERSION'], command, string.join(arguments))).read()
        exec commands
        
        ###catch possible changes to PYTHONPATH environment variable
        pp = ['']
        pythonpath = os.environ['PYTHONPATH'].split(":")
        pp.extend(pythonpath)
        for p in sys.path:
          if (p not in pp) and (p):
            pp.append(p)

        sys.path = pp
        
