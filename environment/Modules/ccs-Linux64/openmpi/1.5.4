#%Module1.0#####################################################################
##
## modules modulefile
##
## modulefiles/modules.  Generated from modules.in by configure.
##

# global control file
if { [file exists $env(MODULESHOME)/etc/control] } {
   source $env(MODULESHOME)/etc/control;
}

conflict openmpi-gcc;
 
#====== begin modulefile code =========
 
if { [module-info mode load] } {
    catch {set ignorant $env(IGNOREMODULECONFLICTS)};
    if { ![info exists ignorant] } {
       catch {set mpi $env(_MODULES_MPI)};
       if { [info exists mpi] && ($mpi != "[module-info name]") } {
          puts stderr "ERROR: Module '[module-info name]' conflicts with a currently loaded module '$mpi'";
          break;
          exit 1;
       }
    }
}
setenv          _MODULES_MPI   [module-info name];
 
#====== end modulefile code =========


# local variables
set version     1.5.4;
set compiler    gcc;
# set device      ib;
# set arch        x86_64;
set prefix      /ccs/codes/radtran/vendors/Linux64/openmpi-$version;

if { ![file exists $prefix] } {
   puts stderr "\n[module-info name]: $prefix: No such file or directory.\n";
   break;
   exit 1;
}
set bindir      $prefix/bin;
set incdir      $prefix/include;
set libdir      $prefix/lib;
set mandir      $prefix/share/man;

if { [module-info mode load] } {
     set MY_COMPILE_FLAGS [exec $bindir/mpif90 --showme:compile]
     set MY_LD_FLAGS [exec $bindir/mpif90 --showme:link]
} else {
     set MY_COMPILE_FLAGS ""
     set MY_LD_FLAGS ""
}

# module whatis
module-whatis   "Open MPI $version"; # for the Infiniband device";
module-whatis   "GCC build 4.5.2.  ";
# module help
proc ModulesHelp { } {   global version prefix incdir;

   puts stderr "\tOpen MPI $version"; # for the Infiniband device";
   puts stderr "\tGCC 4.5.2.\n";

   puts stderr "\tMakefile variables:";
   puts stderr "\t\tMPIHOME\t\t= $prefix";
   puts stderr "\t\tMPI_HOME\t\t= $prefix";
   puts stderr "\t\tMPIROOT\t= $prefix";
   puts stderr "\t\tMPI_ROOT\t= $prefix";
   puts stderr "\t\tMPI_COMPILE_FLAGS\t= $MY_COMPILE_FLAGS";
   puts stderr "\t\tMPI_LD_FLAGS\t= $MY_LD_FLAGS";
   puts stderr "\t\tMPIRUN\t= $bindir/mpirun";
   puts stderr "\t\tMPI_TAG\t= openmpi";
   puts stderr "\t\tMPI_INC_DIR\t= $incdir";
   puts stderr "\t\tMPI_LIB_DIR\t= $libdir";
}

setenv         MPI_NAME          openmpi;
setenv         MPI_TAG           openmpi;
setenv         MPI_VERSION       $version;
setenv         MPIHOME           $prefix;
setenv         MPI_ROOT          $prefix;
setenv         MPI_HOME          $prefix;
setenv         MPIROOT           $prefix;
setenv         MPI_COMPILE_FLAGS $MY_COMPILE_FLAGS;
setenv         MPI_LD_FLAGS      $MY_LD_FLAGS;
setenv         MPIRUN            $bindir/mpirun;
setenv         MPI_INC_DIR       $incdir;
setenv         MPI_LIB_DIR       $libdir;
prepend-path   PATH              $bindir;
#prepend-path   LD_LIBRARY_PATH   /opt/PBS/lib64;
prepend-path   LD_LIBRARY_PATH   $libdir;
prepend-path   CPATH             $incdir;

# Make sure we set things up so that mpicc, mpicxx, work
# properly.
if { [info exists ::env(CC) ] } {
setenv      OMPI_CC         $env(CC);
setenv      ORTE_CC         $env(CC);
setenv      OPAL_CC         $env(CC);
}
if { [info exists ::env(CXX) ] } {
setenv      OMPI_CXX        $env(CXX);
setenv      ORTE_CXX        $env(CXX);
setenv      OPAL_CXX        $env(CXX);
}
if { [info exists ::env(F77) ] } {
setenv      OMPI_F77        $env(F77);
}
if { [info exists ::env(FC) ] } {
setenv      OMPI_FC         $env(FC);
}

# Setting MANPATH is trickier - not every system sets it, nor
# do a lot of users.  So we set it if it doesn't exist
catch {set cur_manpath $env(MANPATH)};
if { ![info exists cur_manpath] || ($cur_manpath == "") } {
   setenv MANPATH :;
}
prepend-path   MANPATH           $mandir;

