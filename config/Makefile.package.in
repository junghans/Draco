###############################################################################
# draco/config Makefile.package.in
# Thomas M. Evans
# Wed Feb  3 16:36:55 1999
# $Id$
###############################################################################
# @> General Makefile.in for draco packages
###############################################################################

# @configure_input@

# source directories: top_srcdir is the toplevel and srcdir is the
# package. These should be the same, because autoconf is being run
# from this directory
top_srcdir = @top_srcdir@
srcdir     = @srcdir@

# package top source directory
package_top_srcdir = @package_top_srcdir@

# current directory: directory that make is actually in
curdir := $(shell pwd)

## get the relative directory between the top_srcdir and the srcdir
reldir := $(shell echo "${srcdir}" | sed s%${top_srcdir}%% | sed 's%/[^/]*%../%g')
ifeq (,${reldir})
  reldir := "."
endif

## get the config directory
config_dir = ${package_top_srcdir}/config

# get the pkg_config directory and include statement
pkg_config_dir  = ${package_top_srcdir}/pkg_config
pkg_config_inc := $(shell if test -d ${pkg_config_dir}; then \
                    echo "-I ${pkg_config_dir}"; fi)

##---------------------------------------------------------------------------##
## VARIABLES THAT ARE ASSIGNED BY AUTOCONF
## These are assigned using "="
##---------------------------------------------------------------------------##

## directories

VPATH = @srcdir@:@top_srcdir@:${reldir} # : this colon is a bug work around.

package     = @package@
prefix      = @prefix@
exec_prefix = @exec_prefix@
includedir  = @includedir@
libdir      = @libdir@
libexecdir  = @libexecdir@
bindir      = @bindir@

dirstoclean = @dirstoclean@

##---------------------------------------------------------------------------##
## install locations

INSTALL      = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
UNINSTALL    = rm -f

##---------------------------------------------------------------------------##
## c compiler flags

CC     = @CC@
CFLAGS = @CFLAGS@

##---------------------------------------------------------------------------##
## cpp preprocessor flags

CPPFLAGS  = @CPPFLAGS@
CPPFLAGS += -I. -I${includedir} ${VENDOR_INC}

##---------------------------------------------------------------------------##
## C++ flags

CXX        = @CXX@
STRICTFLAG = @STRICTFLAG@
CXXFLAGS   = @CXXFLAGS@
CXXFLAGS  += ${STRICTFLAG}

##---------------------------------------------------------------------------##
## ar flags

AR      = @AR@
ARFLAGS = @ARFLAGS@

ARLIBS  = @ARLIBS@

RANLIB  = @RANLIB@

##---------------------------------------------------------------------------##
## lex and yacc

LEX     = @LEX@
LEXLIB  = @LEXLIB@

YACC    = @YACC@
YACCLIB = @YACCLIB@

##---------------------------------------------------------------------------##
## m4

GM4 = @GM4@

##---------------------------------------------------------------------------##
## python

PYTHON = @PYTHON_PATH@

##---------------------------------------------------------------------------##
## linker and libraries

LIB_PREFIX     = @LIB_PREFIX@

RPATH          = @RPATH@

LD             = @LD@
LDFLAGS        = @LDFLAGS@
LDFLAGS       += ${RPATH}

DRACO_LIBS     = @DRACO_LIBS@
DRACO_DEPENDS  = @DRACO_DEPENDS@

VENDOR_INC     = @VENDOR_INC@
VENDOR_LIBS    = @VENDOR_LIBS@
VENDOR_DEPENDS = @VENDOR_DEPENDS@

LIBS           = @LIBS@

libsuffix      = @libsuffix@

##---------------------------------------------------------------------------##
## parallel prelinking flag

PARALLEL_FLAG = @PARALLEL_FLAG@

##---------------------------------------------------------------------------##
## configure command

configure_command = @configure_command@

##---------------------------------------------------------------------------##
## files to install

install_executable = @install_executable@
install_lib        = @install_lib@
install_headers    = @install_headers@
installfiles       = @installfiles@
installdirs        = @installdirs@

##---------------------------------------------------------------------------##
## package target (library, executable)

alltarget = @alltarget@

##---------------------------------------------------------------------------##
## EXPLICIT VARIABLES
## these are assigned using ":="
##---------------------------------------------------------------------------##

# find the header files that live in both the source and target directories

srcheaders := $(wildcard *.h) $(wildcard *.hh) \
	$(wildcard ${package}/*.h) $(wildcard ${package}/*.hh) \
	$(wildcard ${srcdir}/*.h) $(wildcard ${srcdir}/*.hh)
dottedsrcheaders := $(wildcard .*.h) $(wildcard .*.hh) \
	$(wildcard ${srcdir}/.*.h) $(wildcard ${srcdir}/.*.hh)

# strip the directory names from the header files in order to build the
# installation target for the header files.

headers := $(notdir ${srcheaders}) $(notdir ${dottedsrcheaders})

# the headers will be installed under the package's own subdirectory

installheaders := $(addprefix ${includedir}/${package}/, ${headers})

# if the source developer wants to over override what sources and objects
# are to be made then create a Makefile.srcs file that lives in the source
# directory that defines the variables:
# "csrc" "ccsrc" "cobjs" "ccobjs" and "objs"

exe_obj := $(addsuffix __main.o, ${package})

ifeq (,$(wildcard ${srcdir}/Makefile.srcs))

  csrc := $(wildcard ${srcdir}/*.c)
  ccsrc := $(wildcard ${srcdir}/*.cc)
  cobjs := $(notdir $(patsubst %.c,%.o,${csrc}))
  ccobjs := $(notdir $(patsubst %.cc,%.o,${ccsrc}))
  objs := ${cobjs} ${ccobjs}
  objs_lib := $(filter-out ${exe_obj}, ${cobjs}) $(filter-out ${exe_obj}, ${ccobjs})
else

  include ${srcdir}/Makefile.srcs

endif


# package library dependencies

packagelibs := ${DRACO_LIBS} ${VENDOR_LIBS} ${LIBS}

##---------------------------------------------------------------------------##
## PARALLELISM
##---------------------------------------------------------------------------##

# nj is the number of jobs make is to run on

ifndef nj
nj	:= 1
endif
subnj	:= -j $(nj)

LDFLAGS := ${PARALLEL_FLAG} ${LDFLAGS}
ARFLAGS := ${PARALLEL_FLAG} ${ARFLAGS}

##---------------------------------------------------------------------------##
## TARGETS
##---------------------------------------------------------------------------##

.PHONY : all run install installdirs clean distclean forced-distclean \
	mostlyclean maintainer-clean forced-maintainer-clean check \
	build_check uninstall forced-clean dvi dependencies configure \
	reconfigure autodoc default

default: ${alltarget}

##---------------------------------------------------------------------------##
## all  : build package library and package unit tests
## check: run package unit tests

check: all run

all: ${alltarget}
	@if test -d "${srcdir}/test" && test -d "test" ; then \
		(cd test && ${MAKE} $@) || exit; \
	fi

run: 
	@if test -d "${srcdir}/test" && test -d "test" ; then \
		(cd test && ${MAKE} $@) || exit; \
	fi

build_check: all
	@if test -d "${srcdir}/test" && test -d "test" ; then \
		(cd test && ${MAKE}) || exit; \
	fi

dependencies: ${dependfiles}
	@echo "Package dependencies made."

dvi:
	: # do nothing

##---------------------------------------------------------------------------##
## build any executables in this package, the default is one
## executable per package; to add more one must add ${bindir}/${extras}
## targets 

bin/${package}: bin ${objs} ${DRACO_DEPENDS} ${VENDOR_DEPENDS}
	${LD} ${LDFLAGS} -o $@ ${objs} ${packagelibs}

bin:
	mkdir $@

##---------------------------------------------------------------------------##
## build any libraries in this package

lib${LIB_PREFIX}${package}${libsuffix}: ${objs} ${DRACO_DEPENDS} ${VENDOR_DEPENDS}
	${AR} ${ARFLAGS} $@ ${objs_lib} ${ARLIBS}
	${RANLIB} $@

##---------------------------------------------------------------------------##
## Build and install autodoc documentation
autodoc:
	@if test -d "autodoc"; then \
	   (cd autodoc && ${MAKE} $@) || exit; \
	fi

##---------------------------------------------------------------------------##
## do requested installations

installdirs: ${installdirs}

${installdirs}:
	${INSTALL} -d $@

install: installdirs ${installfiles}

uninstall:
	-${UNINSTALL} ${installfiles}

${libdir}/%: %
	${INSTALL_DATA} $< $@
	${RANLIB} $@

${install_executable}: ${bindir}/%: bin/%
	${INSTALL} $< $@

${libexecdir}/%: %
	${INSTALL} $< $@

${includedir}/${package}/%: %
	${INSTALL_DATA} $< $@

${includedir}/${package}/%: ${package}/%
	${INSTALL_DATA} $< $@

##---------------------------------------------------------------------------##
## Build system targets and rules

## configuration files: Makefile depends on all of the M4 files in the
## config directory and the pkg_config directory
configfiles := $(wildcard ${config_dir}/*.m4) \
	$(wildcard ${config_dir}/../pkg_config/*.m4)

configure:
	@echo "Rebuilding ${top_srcdir}/aclocal.m4"
	@cd ${top_srcdir} && aclocal -I ${config_dir} ${pkg_config_inc}
	@echo "Rebuilding ${top_srcdir}/configure"
	@cd ${top_srcdir} && autoconf
	@./config.status --recheck
	@./config.status

reconfigure: 
	@./config.status --recheck
	@./config.status

##---------------------------------------------------------------------------##
## Rules for building source code dependencies

include ${config_dir}/@DEPENDENCY_RULES@

# Do not include the dependencies if we are cleaning up or just running
# the tests.
ifeq (,$(filter uninstall dvi distclean mostlyclean clean \
	configure reconfigure maintainer-clean autodoc run, \
	${MAKECMDGOALS}))
-include ${dependfiles}
endif

##---------------------------------------------------------------------------##
## clean rules

maintainer-clean distclean mostlyclean clean:
	@if test -d "test" ; then \
		(cd test && ${MAKE} $@); \
	fi

clean: forced-clean
forced-clean: uninstall
	-rm -rf ${prefix}/include/${package}
	-rm -f bin/${package} ${objs} lib${LIB_PREFIX}${package}${libsuffix}
	-rm -f ${dependfiles}
	-rm -f lex.yy.c y.output y.tab.c y.tab.h
	-rm -f .tmp?
	-rm -rf ${dirstoclean}
	-rmdir bin
	-rm *.gcov *.gcno *.gcda

mostlyclean: clean forced-mostlyclean
forced-mostlyclean:
	-rm -f *.o *.d

distclean: mostlyclean forced-distclean
forced-distclean:
	-rm -f config.status config.cache config.log
	-rm -f ${package}/*.h ${package}/*.hh ${package}/stamp-h Makefile
	-rm -rf bin

# maintainer-clean does not delete "configure"

maintainer-clean: forced-maintainer-clean distclean
forced-maintainer-clean:
	@echo 'This command is intended for maintainers to use; it'
	@echo 'deletes files that may need special tools to rebuild.'

##---------------------------------------------------------------------------##
## ADDITIONAL RULES AND TARGETS
##---------------------------------------------------------------------------##

# any other hand-coded dependencies or any thing **additional** can
# be put into Makefile.misc in the source directory

-include ${srcdir}/Makefile.misc

###############################################################################
#			 end of draco/config Makefile.package.in
###############################################################################
