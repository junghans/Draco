###############################################################################
# draco/config Makefile.test.in
# Thomas M. Evans
# Wed Feb  3 16:42:49 1999
# $Id$
###############################################################################
# @> General Makefile.in for draco package test directories
###############################################################################

top_srcdir = @top_srcdir@
srcdir = @srcdir@

# get the relative directory between the top_srcdir and the srcdir

reldir := $(shell echo "${srcdir}" | sed s%${top_srcdir}%% | sed 's%/[^/]*%../%g')
ifeq (,${reldir})
  reldir := "."
endif
# get the relative directory to the config files (relative to ${top_srcdir}).

rel_config_dir := $(shell ( cd ${top_srcdir} ; \
	tmp="" ; \
	while test ! -d config ; \
	do \
	   cd .. ; \
	   tmp=$$tmp../ ; \
	done ; \
	echo $$tmp ) )config


##---------------------------------------------------------------------------##
## VARIABLES THAT ARE ASSIGNED BY AUTOCONF
## These are assigned using "="
##---------------------------------------------------------------------------##

VPATH = @srcdir@:@top_srcdir@:${reldir} # : this colon is a bug work around.

package = @package@
prefix = @prefix@
exec_prefix = @exec_prefix@
includedir = @includedir@
libdir = @libdir@
libexecdir = @libexecdir@
bindir = @bindir@

dirstoclean = @dirstoclean@

NMLGEN = @NMLGEN@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@

CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CPPFLAGS += -I. -I.. @testcppflags@ -I${includedir}

CXX = @CXX@
STRICTFLAG = @STRICTFLAG@
CXXFLAGS = @CXXFLAGS@

PYTHON = @PYTHON_PATH@

LD = @LD@
LDFLAGS = @LDFLAGS@
PKG_LIBS = @PKG_LIBS@
DRACO_LIBS = @DRACO_LIBS@
VENDOR_LIBS = @VENDOR_LIBS@
DRACO_TEST_LIBS = @DRACO_TEST_LIBS@
VENDOR_TEST_LIBS = @VENDOR_TEST_LIBS@
PKG_DEPENDS = @PKG_DEPENDS@
DRACO_DEPENDS = @DRACO_DEPENDS@
VENDOR_DEPENDS = @VENDOR_DEPENDS@
DRACO_TEST_DEPENDS = @DRACO_TEST_DEPENDS@
VENDOR_TEST_DEPENDS = @VENDOR_TEST_DEPENDS@
LIBS = @LIBS@

AR = @AR@
ARFLAGS = @ARFLAGS@
ARLIBS = @ARLIBS@
RANLIB = @RANLIB@

libsuffix = @libsuffix@
installdirs = 
installfiles = 
test_alltarget = @test_alltarget@
RUNTEST = @RUNTEST@
RUNTESTFLAGS = @RUNTESTFLAGS@
FLAGS_TO_PASS = @FLAGS_TO_PASS@
RUNTESTTOOLFLAG = @RUNTESTTOOLFLAG@
test_nprocs = @test_nprocs@
SITE_EXP = @SITE_EXP@
site_exp = @site_exp@
test_output_files = @test_output_files@

configure_command = @configure_command@

##---------------------------------------------------------------------------##
## EXPLICIT VARIABLES
## these are assigned using ":="
##---------------------------------------------------------------------------##

# find the header files that live in both the source and target directories

srcheaders := $(wildcard *.h) $(wildcard *.hh) \
	$(wildcard ${srcdir}/*.h) $(wildcard ${srcdir}/*.hh)
dottedsrcheaders := $(wildcard .*.h) $(wildcard .*.hh) \
	$(wildcard ${srcdir}/.*.h) $(wildcard ${srcdir}/.*.hh)

# strip the directory names from the header files in order to build the
# installation target for the header files.

headers := $(notdir ${srcheaders}) $(notdir ${dottedsrcheaders})

# the headers will be installed under the package's own subdirectory

installheaders := $(addprefix ${includedir}/${package}/, ${headers})

# if the source developer wants to over override what sources and objects
# are to be made then create a Makefile.srcs file that lives in the source
# directory that defines the variables:
# "csrc" "ccsrc" "cobjs" "ccobjs" and "objs"

ifeq (,$(wildcard ${srcdir}/Makefile.srcs))

  csrc := $(wildcard ${srcdir}/*.c)
  ccsrc := $(wildcard ${srcdir}/*.cc)
  cobjs := $(notdir $(patsubst %.c,%.o,${csrc}))
  ccobjs := $(notdir $(patsubst %.cc,%.o,${ccsrc}))
  objs := ${cobjs} ${ccobjs}

else

  include ${srcdir}/Makefile.srcs

endif

##---------------------------------------------------------------------------##
## TARGETS
##---------------------------------------------------------------------------##

.PHONY : all install installdirs clean distclean forced-distclean \
	mostlyclean maintainer-clean forced-maintainer-clean check uninstall \
	forced-clean

all: ${test_alltarget}

check: ${SITE_EXP} all
	@for testexec in ${test_alltarget}; do \
	   for np in ${test_nprocs}; do \
	      echo ${RUNTEST} ${RUNTESTFLAGS} ${FLAGS_TO_PASS} \
		  ${RUNTESTTOOLFLAG} $$testexec NPROCS=$$np; \
	      ${RUNTEST} ${RUNTESTFLAGS} ${FLAGS_TO_PASS} \
		  ${RUNTESTTOOLFLAG} $$testexec NPROCS=$$np; \
	   done; \
	done; \
	exit 0

site.exp: Makefile ${rel_config_dir}/Makefile.test.in config.status
	@echo "Making a new config file..."
	-@rm -f ./tmp?
	@touch site.exp
	-@mv site.exp site.exp.bak
	@echo "## These variables are automatically generated by make ##" >./tmp0
	@echo "#  Do not edit here.  If you wish to override these values " >>./tmp0
	@echo "#  add them to the last section" >>./tmp0
	@echo "set NPROCS 1" >>./tmp0
	@echo "set srcdir ${srcdir}" >>./tmp0
	@echo "set objdir `pwd`" >> ./tmp0
	@echo "set libexecdir ${libexecdir}" >> ./tmp0
	@for line in ${site_exp}; do \
	   echo $$line >>./tmp0; \
	done
	@echo "set build_environment \"${configure_command}\"" >>./tmp0
	@echo "## All variables above are generated by\
 make.  Do Not Edit ##" >>./tmp0
	@cat ./tmp0 >site.exp
	@sed <site.exp.bak \
	   -e '1,/^## All variables above are generated.*## *$$/ d' \
	   >> site.exp
	-@rm -f ./tmp?

# If you have multiple test executables then you will have
# to hand code the targets in ${srcdir}/Makefile.target

ifeq (,$(wildcard ${srcdir}/Makefile.target))

   testdeps := ${PKG_DEPENDS} ${DRACO_TEST_DEPENDS} ${DRACO_DEPENDS} \
		${VENDOR_TEST_DEPENDS} ${VENDOR_DEPENDS}
   testlibs := ${PKG_LIBS} ${DRACO_TEST_LIBS} ${DRACO_LIBS} \
		${VENDOR_TEST_LIBS} ${VENDOR_LIBS} ${LIBS}

   ${test_alltarget}: ${objs} ${testdeps}
	${LD} ${LDFLAGS} -o $@ ${objs} ${testlibs}

else

   include ${srcdir}/Makefile.target

endif

installdirs: ${installdirs}

${installdirs}:
	mkdir $@

# nothing to install in test

install:

uninstall:

# Makefile depends on all of the M4 files in the config directory

configfiles := aclocal.m4 ac_local.m4 ac_conf.m4 ac_vendors.m4 ac_dracoarg.m4 \
 ac_dracoenv.m4 ac_compiler.m4
configfiles := $(addprefix ${top_srcdir}/${rel_config_dir}/, ${configfiles})

${top_srcdir}/configure: configure.in ${configfiles}
	cd ${top_srcdir} && autoconf --localdir=${rel_config_dir}

Makefile: ${rel_config_dir}/Makefile.test.in config.status
	(cd ${reldir} && if test -x ./config.status ; then ./config.status ; fi)

config.status: configure
	(cd ${reldir} && if test -x ./config.status ; then \
		./config.status --recheck ; fi)

%: ${srcdir}/%.in
	(cd ${reldir} && if test -x ./config.status ; then \
	  CONFIG_FILES=test/$@:test/$(notdir $<) \
	      CONFIG_HEADERS= ./config.status; fi)

# Locate the namelist input files automatically.

nml_files := $(notdir $(wildcard ${srcdir}/*.nml))
nml_hh := $(nml_files:%.nml=.nml_%.hh)
nml_cc := $(nml_files:%.nml=.nml_%.cc)

nmldependfiles := $(nml_files:.nml=.nml.d)

dependfiles := $(notdir $(ccsrc:.cc=.cc.d)) \
	$(notdir $(csrc:.c=.c.d))

${dependfiles}: ${nml_hh} ${nml_cc}

%.cc.d: %.cc
	@echo making dependency $@
	@if ${CXX} -M ${CPPFLAGS} $< >.tmp0 ; then \
	   cat .tmp0 | sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
		[ -s $@ ] || rm -f $@ ; \
	else \
	   echo failed making dependency $@ ; \
	   rm -f $@ .tmp0 ; \
	   exit 1; \
	fi
	@-rm -f .tmp0

%.c.d: %.c
	@echo making dependency $@
	@if ${CC} -M ${CPPFLAGS} $< >.tmp0 ; then \
	   cat .tmp0 | sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
		[ -s $@ ] || rm -f $@ ; \
	else \
	   echo failed making dependency $@ ; \
	   rm -f $@ .tmp0 ; \
	   exit 1; \
	fi
	@-rm -f .tmp0

%.nml.d: .nml_%.hh .nml_%.cc

%.nml.d: %.nml
	echo making dependency $@
	echo "$(notdir ${<:%.nml=.nml_%.hh} ${<:%.nml=.nml_%.cc}) $@: $<" >$@

.nml_%.hh .nml_%.cc: ${srcdir}/%.nml
	-$(NMLGEN) ${srcdir}/$*.nml

# Do not include the dependfiles when doing clean-like stuff.

ifneq (,$(filter uninstall distclean mostlyclean clean maintainer-clean, \
	${MAKECMDGOALS}))
#empty
else
include ${dependfiles}
endif

clean:
	-rm ${test_alltarget} ${objs} ${dependfiles}
	-rm -f ${nml_hh} ${nml_cc} .tmp?
	-rm -f ${test_output_files}
	-rm -r ${dirstoclean}

distclean: mostlyclean
	-rm config.status config.cache config.log config.h stamp-h Makefile
	-rm -f site.exp

mostlyclean: clean
	-rm *.o *.d

# maintainer-clean does not delete "configure"

maintainer-clean: forced-maintainer-clean distclean
forced-maintainer-clean:
	@echo 'This command is intended for maintainers to use; it'
	@echo 'deletes files that may need special tools to rebuild.'

# any other hand-coded dependencies or any thing **additional** can
# be put into Makefile.misc in the source directory

-include ${srcdir}/Makefile.misc


###############################################################################
#			 end of draco/config Makefile.test.in
###############################################################################
