###############################################################################
# draco/config Makefile.test.in
# Thomas M. Evans
# Wed Feb  3 16:42:49 1999
# $Id$
###############################################################################
# @> General Makefile.in for draco package test directories
###############################################################################

# @configure_input@

# source directories: top_srcdir is the top directory for this
# component. srcdir is the current source directory.

top_srcdir = @abs_top_srcdir@
srcdir     = @abs_srcdir@
top_builddir = @abs_top_builddir@

# pacakage top source directory
package_top_srcdir = @package_top_srcdir@

curdir = $(shell pwd)

# get the relative directory between the top_srcdir and the srcdir
reldir := $(shell echo "${srcdir}" | sed s%${top_srcdir}%% | sed 's%/[^/]*%../%g')
ifeq (,${reldir})
  reldir := "."
endif

# Get the config directory from the package root.
config_dir = ${package_top_srcdir}/config

# get the pkg_config directory and include statement
pkg_config_dir  = ${package_top_srcdir}/pkg_config
pkg_config_inc := $(shell if test -d ${pkg_config_dir}; then \
                    echo "-I ${pkg_config_dir}"; fi)

##---------------------------------------------------------------------------##
## VARIABLES THAT ARE ASSIGNED BY AUTOCONF
## These are assigned using "="
##---------------------------------------------------------------------------##

## directories

VPATH = @srcdir@:@top_srcdir@:${reldir} # : this colon is a bug work around.

package     = @package@
prefix      = @prefix@
exec_prefix = @exec_prefix@
includedir  = @includedir@
libdir      = @libdir@
libexecdir  = @libexecdir@
bindir      = @bindir@

dirstoclean = @dirstoclean@

##---------------------------------------------------------------------------##
## install locations

INSTALL      = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
UNINSTALL    = rm -f

##---------------------------------------------------------------------------##
## c compiler flags

CC     = @CC@
CFLAGS = @CFLAGS@

##---------------------------------------------------------------------------##
## cpp preprocessor flags

CPPFLAGS  = @CPPFLAGS@
CPPFLAGS += -I. -I.. -I${includedir} ${VENDOR_INC}

##---------------------------------------------------------------------------##
## C++ flags

CXX        = @CXX@
STRICTFLAG = @STRICTFLAG@
CXXFLAGS   = @CXXFLAGS@
CXXFLAGS  += ${STRICTFLAG}

##---------------------------------------------------------------------------##
## F90 Flags

F90            = @F90@
F90FLAGS       = @F90FLAGS@
F90FREE        = @F90FREE@
F90RPATH       = @F90RPATH@
F90VENDOR_LIBS = @F90VENDOR_LIBS@
F90LIBS        = @F90LIBS@

##---------------------------------------------------------------------------##
## ar flags

AR         = @AR@
ARFLAGS    = @ARFLAGS@

ARLIBS     = @ARLIBS@
ARTESTLIBS = @ARTESTLIBS@

RANLIB     = @RANLIB@

##---------------------------------------------------------------------------##
## lex and yacc

LEX     = @LEX@
LEXLIB  = @LEXLIB@

YACC    = @YACC@
YACCLIB = @YACCLIB@

##---------------------------------------------------------------------------##
## m4

GM4 = @GM4@

##---------------------------------------------------------------------------##
## python

PYTHON = @PYTHON_PATH@

##---------------------------------------------------------------------------##
## flexelint

FLEXELINT = @FLEXELINT_PATH@

##---------------------------------------------------------------------------##
## linker and libraries

LIB_PREFIX          = @LIB_PREFIX@

RPATH               = @RPATH@

LD                  = @LD@
LDFLAGS             = @LDFLAGS@
LDFLAGS            += ${RPATH}

PKG_LIBS            = @PKG_LIBS@
PKG_DEPENDS         = @PKG_DEPENDS@

DRACO_LIBS          = @DRACO_LIBS@
DRACO_DEPENDS       = @DRACO_DEPENDS@

VENDOR_INC          = @VENDOR_INC@
VENDOR_LIBS         = @VENDOR_LIBS@
VENDOR_DEPENDS      = @VENDOR_DEPENDS@

DRACO_TEST_LIBS     = @DRACO_TEST_LIBS@
DRACO_TEST_DEPENDS  = @DRACO_TEST_DEPENDS@

VENDOR_TEST_LIBS    = @VENDOR_TEST_LIBS@
VENDOR_TEST_DEPENDS = @VENDOR_TEST_DEPENDS@

LIBS                = @LIBS@

libsuffix           = @libsuffix@

##---------------------------------------------------------------------------##
## parallel prelinking flag

PARALLEL_FLAG = @PARALLEL_FLAG@

##---------------------------------------------------------------------------##
## configure command

configure_command = @configure_command@

##---------------------------------------------------------------------------##
## testing targets and variables

scalar_tests       = @scalar_tests@
parallel_tests     = @parallel_tests@
app_tests          = @app_tests@
test_nprocs        = @test_nprocs@
app_test_nprocs    = @app_test_nprocs@
test_alltarget     = ${scalar_tests} ${parallel_tests} ${app_tests}
test_flags         = @test_flags@
test_output_files  = @test_output_files@

##---------------------------------------------------------------------------##
## First of all, avoid 'none' as a target.  Second, if no tests were
## specified, then ensure our ending target is empty for now.
## Typically, test_alltarget will be redefined in Makefile.target.  If
## not, then there is nothing for target 'all' to do.

test_alltarget := $(strip $(filter-out none,${test_alltarget}))

##---------------------------------------------------------------------------##
## EXPLICIT VARIABLES
## these are assigned using ":="
##---------------------------------------------------------------------------##

# find the header files that live in both the source and target directories

srcheaders := $(wildcard *.h) $(wildcard *.hh) \
	$(wildcard ${srcdir}/*.h) $(wildcard ${srcdir}/*.hh)
dottedsrcheaders := $(wildcard .*.h) $(wildcard .*.hh) \
	$(wildcard ${srcdir}/.*.h) $(wildcard ${srcdir}/.*.hh)

# strip the directory names from the header files in order to build the
# installation target for the header files.

headers := $(notdir ${srcheaders}) $(notdir ${dottedsrcheaders})

# the headers will be installed under the package's own subdirectory

installheaders := $(addprefix ${includedir}/${package}/, ${headers})

# if the source developer wants to over override what sources and objects
# are to be made then create a Makefile.srcs file that lives in the source
# directory that defines the variables:
# "csrc" "ccsrc" "cobjs" "ccobjs" and "objs"

ifeq (,$(wildcard ${srcdir}/Makefile.srcs))

  csrc := $(wildcard ${srcdir}/*.c)
  ccsrc := $(wildcard ${srcdir}/*.cc)
  cobjs := $(notdir $(patsubst %.c,%.o,${csrc}))
  ccobjs := $(notdir $(patsubst %.cc,%.o,${ccsrc}))
  objs := ${cobjs} ${ccobjs}

else

  include ${srcdir}/Makefile.srcs

endif

##---------------------------------------------------------------------------##
## PARALLELISM
##---------------------------------------------------------------------------##

# we do not do parallel makes in the test directory, just parallel prelinks

ifndef nj
nj	:= 1
endif

LDFLAGS := ${PARALLEL_FLAG} ${LDFLAGS}
ARFLAGS := ${PARALLEL_FLAG} ${ARFLAGS}

##---------------------------------------------------------------------------##
## TARGETS
##---------------------------------------------------------------------------##

.PHONY : all run install installdirs clean distclean forced-distclean \
	mostlyclean maintainer-clean forced-maintainer-clean check uninstall \
	forced-clean configure reconfigure check_parallel \
	check_scalar check_app

all: ${test_alltarget}

run: check_scalar check_parallel check_app

check: all run

# None of these tests use mpirun or prun.
check_scalar:
	@if test ! "${scalar_tests}" = "none"; then \
	  for testexec in ${scalar_tests}; do \
	    ${libexecdir}/launchtest ${test_flags} ./$$testexec ${exe_options}\
	    | ${PYTHON} ${libexecdir}/test_filter.py; \
	  done; \
	fi;\
	exit 0

# unit tests run under mpirun or prun.
check_parallel:
	@if test ! "${parallel_tests}" = "none"; then \
	  for testexec in ${parallel_tests}; do \
	    for np in ${test_nprocs}; do \
	      ${libexecdir}/launchtest ${test_flags} --mpi $$np ./$$testexec \
              | ${PYTHON} ${libexecdir}/test_filter.py; \
            done; \
          done; \
	fi;\
	exit 0

# These are scalar unit tests built that use the TestExe framework.
# These tests are executed by the DBS as scalar tests but will start
# other processes that run under mpirun.
check_app:
	@if test ! "${app_tests}" = "none"; then \
	  for testexec in ${app_tests}; do \
	    for np in ${app_test_nprocs}; do \
	      ${libexecdir}/launchtest ${test_flags} --np $$np ./$$testexec \
              | ${PYTHON} ${libexecdir}/test_filter.py; \
            done; \
          done; \
	fi;\
	exit 0

# If available, include Makefile.options from the build directory.

makefile_options_path = $(wildcard Makefile.options)
ifneq (,${makefile_options_path})

   # Found a Makefile.options; include it.

   include ${makefile_options_path}

endif

# Look for Makefile.target in the source directory.

makefile_target_path = $(wildcard ${srcdir}/Makefile.target)
ifeq (,${makefile_target_path})

   # Could not find Makefile.target, so assume a single executable and
   # define the appropriate rules.

   testdeps := ${PKG_DEPENDS} ${DRACO_TEST_DEPENDS} ${DRACO_DEPENDS} \
		${VENDOR_TEST_DEPENDS} ${VENDOR_DEPENDS}
   testlibs := ${PKG_LIBS} ${DRACO_TEST_LIBS} ${DRACO_LIBS} \
		${VENDOR_TEST_LIBS} ${VENDOR_LIBS} ${LIBS}

   ${test_alltarget}: ${objs} ${testdeps}
	${LD} ${LDFLAGS} -o $@ ${objs} ${testlibs}

else

   # Found a Makefile.target; include it.

   include ${makefile_target_path}

endif

# nothing to install in test

install:

uninstall:

##---------------------------------------------------------------------------##
## dependencies in the build system

## configuration files: Makefile depends on all of the M4 files in the
## config directory and the pkg_config directory
configfiles := $(wildcard ${config_dir}/*.m4) \
	$(wildcard ${pkg_config_dir}/*.m4)

configure: 
	@echo "Rebuilding ${top_srcdir}/aclocal.m4"
	@cd ${top_srcdir} && aclocal -I ${config_dir} ${pkg_config_inc}
	@echo "Rebuilding ${top_srcdir}/configure"
	@cd ${top_srcdir} && autoconf
	@cd ${top_builddir} && ./config.status --recheck
	@cd ${top_builddir} && ./config.status

reconfigure: 
	@cd ${top_builddir} && ./config.status --recheck
	@cd ${top_builddir} && ./config.status

##---------------------------------------------------------------------------##
# Locate the source depends automatically

include ${config_dir}/@DEPENDENCY_RULES@

# Do not include the dependencies if we are cleaning up or just running
# the tests.
ifeq (,$(filter uninstall dvi distclean mostlyclean clean \
	configure reconfigure maintainer-clean autodoc run, \
	${MAKECMDGOALS}))
-include ${dependfiles}
endif

##---------------------------------------------------------------------------##
## clean rules
clean:
	-rm -f ${test_alltarget} ${objs} ${dependfiles}
	-rm -f lex.yy.c y.output y.tab.c y.tab.h
	-rm -f .tmp? *.flc *~
	-rm -f *-scalar.log *-[0-9].log ${test_output_files}
	-rm -rf ${dirstoclean}
	-rm -rf *.gcov *.gcno *.gcda
	-rm -f *.dat *.inp *.base *.restart *.gdiff *gmv* *.spectrum

distclean: mostlyclean
	-rm -f config.status config.cache config.log config.h stamp-h Makefile
	-rm -f site.exp
	-rm -f *.pure *~ *.flc

mostlyclean: clean
	-rm -f *.o *.d

# maintainer-clean does not delete "configure"

maintainer-clean: forced-maintainer-clean distclean
forced-maintainer-clean:
	@echo 'This command is intended for maintainers to use; it'
	@echo 'deletes files that may need special tools to rebuild.'

# any other hand-coded dependencies or any thing **additional** can
# be put into Makefile.misc in the source directory

-include ${srcdir}/Makefile.misc


###############################################################################
#			 end of draco/config Makefile.test.in
###############################################################################
