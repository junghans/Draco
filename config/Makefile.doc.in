###############################################################################
#
# \file    capsaicin/doc/milestones Makefile
# \author  Kelly G. Thompson
# \date    Tue Sept 19 10:33:22 2003
# \brief   Makefile for the Capsaicin milestone reports
#
###############################################################################
# $Id$
###############################################################################

# @configure_input@

#Automatic autoconf variables
top_srcdir = @top_srcdir@
srcdir = @srcdir@
top_builddir = @abs_top_builddir@
builddir = @abs_builddir@

# package top source directory
package_top_srcdir = @package_top_srcdir@

VPATH = @srcdir@  # : this colon is a bug work around.

# The subdirectories to recurse into (if they exist).
subdirs := `ls -1`

# If the make flags include a -k then do not exit on errors.

ifneq (,$(findstring k,${MAKEFLAGS}))
  EXIT = :
else
  EXIT = exit
endif

# install location:
doc_pdf_output := @doxygen_output_top@/pdf
config_dir = ${package_top_srcdir}/config

## get the pkg_config directory and include statement
#pkg_config_dir  = ${package_top_srcdir}/pkg_config
#pkg_config_inc := $(shell if test -d ${pkg_config_dir}; then \
#                    echo "-I ${pkg_config_dir}"; fi)

## get the relative directory between the top_srcdir and the srcdir

#reldir := $(shell echo "${srcdir}" | sed s%${top_srcdir}%% | sed 's%/[^/]*%../%g')
#ifeq (,${reldir})
#  reldir := "."
#endif
## get the relative directory to the config files (relative to ${top_srcdir}).

#rel_config_dir := $(shell ( cd ${top_srcdir} ; \
#	tmp="" ; \
#	while test ! -d config ; \
#	do \
#	   cd .. ; \
#	   tmp=$$tmp../ ; \
#	done ; \
#	echo $$tmp ) )config

##---------------------------------------------------------------------------##
## VARIABLES THAT ARE ASSIGNED BY AUTOCONF
## These are assigned using "="
##---------------------------------------------------------------------------##

package = @package@
prefix = @prefix@
exec_prefix = @exec_prefix@
includedir = @includedir@
libdir = @libdir@
libexecdir = @libexecdir@
bindir = @bindir@

dirstoclean = @dirstoclean@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
UNINSTALL = rm -f

CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CPPFLAGS += -I. -I.. -I${includedir}

CXX = @CXX@
STRICTFLAG = @STRICTFLAG@
CXXFLAGS = @CXXFLAGS@

LEX = @LEX@
LEXLIB = @LEXLIB@
YACC = @YACC@
YACCLIB = @YACCLIB@

GM4 = @GM4@

PYTHON = @PYTHON_PATH@

LD = @LD@
LDFLAGS = @LDFLAGS@
PKG_LIBS = @PKG_LIBS@
DRACO_LIBS = @DRACO_LIBS@
VENDOR_LIBS = @VENDOR_LIBS@
DRACO_TEST_LIBS = @DRACO_TEST_LIBS@
VENDOR_TEST_LIBS = @VENDOR_TEST_LIBS@
PKG_DEPENDS = @PKG_DEPENDS@
DRACO_DEPENDS = @DRACO_DEPENDS@
VENDOR_DEPENDS = @VENDOR_DEPENDS@
DRACO_TEST_DEPENDS = @DRACO_TEST_DEPENDS@
VENDOR_TEST_DEPENDS = @VENDOR_TEST_DEPENDS@
LIBS = @LIBS@

AR = @AR@
ARFLAGS = @ARFLAGS@
ARLIBS = @ARLIBS@
RANLIB = @RANLIB@

GHOSTVIEW = @GHOSTVIEW@
LATEX = @LATEX@
LATEXFLAGS = @LATEXFLAGS@
BIBTEX = @BIBTEX@
BIBTEXFLAGS = @BIBTEXFLAGS@
DVIPS = @DVIPS@
DVIPSFLAGS = @DVIPSFLAGS@
XDVI = @XDVI@
XDVIFLAGS = @XDVIFLAGS@
LP = @LP@
LPFLAGS = @LPFLAGS@
DOTCMD = @DOTCMD@
PS2PDF = @PS2PDF@

libsuffix = @libsuffix@
installdirs = 
installfiles = 

configure_command = @configure_command@

##---------------------------------------------------------------------------##
## EXPLICIT VARIABLES
## these are assigned using ":="
##---------------------------------------------------------------------------##

# if the source developer wants to over override what sources and objects
# are to be made then create a Makefile.srcs file that lives in the source
# directory that defines the variables:
# "texsrc" "texdvi" "texps" "texlog"

ifeq (,$(wildcard ${srcdir}/Makefile.srcs))
  texsrc  := $(wildcard ${srcdir}/*.tex)
  texdvi  := $(notdir $(patsubst %.tex,%.dvi,${texsrc}))
  texps   := $(notdir $(patsubst %.tex,%.ps,${texsrc}))
  texlog  := $(notdir $(patsubst %.tex,%.log,${texsrc}))

  dotsrc  := $(wildcard ${srcdir}/*.dot)
  dotps   := $(notdir $(patsubst %.dot,%.ps,${dotsrc}))

  allps   := ${texps} ${dotps}
  allpdf  := $(notdir $(patsubst %.ps,%.pdf,${allps}))

  pdfsrc  := $(wildcard ${srcdir}/*.pdf)
  pptsrc  := $(wildcard ${srcdir}/*.ppt)
  direct_copies := ${pdfsrc} ${pptsrc}
else
  include ${srcdir}/Makefile.srcs
endif

# Add the src directory and the DRACO/doc/tex directory to the TEXINPUTS
# environment variable for every invocation of a LaTeX-like command.

DRACOENV := ${package_top_srcdir}/environment
DRACOTEXINPUTS := ${srcdir}:${DRACOENV}/latex:/usr/projects/draco/environment/latex:
DRACOBSTINPUTS := ${srcdir}:${DRACOENV}/bibtex:
AUXTEXINPUTS   := @AUXTEXINPUTS@
LATEXENVS := TEXINPUTS="${AUXTEXINPUTS}${DRACOTEXINPUTS}:${TEXINPUTS}:."
BIBTEXENVS := BSTINPUTS="${DRACOBSTINPUTS}:${DRACOTEXINPUTS}:${BSTINPUTS}:."
MAKEIDXENVS:= INDEXSTYLE="../latex"

SRCBIBFILES := $(wildcard ${package_top_srcdir}/doc/bib/*.bib)
BIBFILES    := $(addprefix ${builddir}/,$(notdir $(patsubst ${package_top_srcdir}/doc/bib/%,%,${SRCBIBFILES})))

# Applications:
LATEXCMD  := ${LATEXENVS} ${LATEX}
BIBTEXCMD := ${BIBTEXENVS} ${BIBTEX}
DVIPSCMD  := ${LATEXENVS} ${DVIPS} -Ppdf
MAKEIDX   := ${MAKEIDXENVS} makeindex
XDVICMD   := ${TEXINPUTSENV} ${XDVI}

##---------------------------------------------------------------------------##
## TARGETS
##---------------------------------------------------------------------------##

.PHONY : all postscript index bib tex pdf \
	installdirs install uninstall configfiles configure \
	reconfigure clean clean-tex distclean mostlyclean \
	maintainer-clean forced-maintainer-clean 

all: postscript

postscript: ${allps}
	@echo "done creating postscript files: ${allps}"

pdf: ${allpdf}
	@echo "done creating PDF files: ${allpdf}"

#xdvi: ${texdvi}
#	${XDVICMD} ${XDVIFLAGS} $^
#view: ${texps}
#	${GHOSTVIEW} $^
#print: ${texps}
#	${LP} ${LPFLAGS} $^
#dvi: ${dvifiles}
#${texps}: ${texdvi}

%.ps: %.dvi
	@echo ${DVIPSCMD} -o $@ $<
	${DVIPSCMD} -o $@ $<
	@if test -f ${srcdir}/$*_laur_cover.ps; then\
	   echo "Prepending $*_laur_cover.ps to postscript.";\
	   echo "cat $@ ${srcdir}/$*_laur_cover.ps > tmp.ps";\
	   cat ${srcdir}/$*_laur_cover.ps $@ > tmp.ps;\
	   mv tmp.ps $@;\
	fi

%.ps: ${srcdir}/%.dot
	@${DOTCMD} -Tps -o $@ $<

# $@ = target
# $< = dependency
# $* = % with no dot ext

%.dvi: %.tex ${BIBFILES}
	${LATEXCMD} $<
	@if test "`grep citation $*.aux`" != "" ||\
            test "`grep newlabel $*.aux`" != ""; then \
	   ${BIBTEXCMD} $*       ;\
	   ${LATEXCMD} $<        ;\
	   ${LATEXCMD} $<        ;\
	fi
	if test -f $ $*.idx; then\
	   ${MAKEIDX} -s ${package_top_srcdir}/environment/latex/draco_index.ist $*;\
	   ${LATEXCMD} $<      ;\
	fi
	if test -f $ $*.nlo; then\
	   ${MAKEIDX} $*.nlo -s ${package_top_srcdir}/environment/latex/nomencl.ist -o $*.nls;\
	   ${LATEXCMD} $<      ;\
	fi
#	${LATEXCMD} ${LATEXFLAGS} $<
#	-${BIBTEXCMD} ${BIBTEXFLAGS} $(basename $@)
#	${LATEXCMD} ${LATEXFLAGS} $<
#	${LATEXCMD} ${LATEXFLAGS} $<

%.txt: %.pdf
	pdftotext $<

${builddir}/%.bib: ${package_top_srcdir}/doc/bib/%.bib
	cp $< $@

${doc_pdf_output}:
	@${INSTALL} -d $@

index: 
	${MAKEIDX} ${latexsrc}

bib: %.tex ${BIBFILES}
	${BIBTEXCMD} ${latexsrc}

tex: %.tex
	${LATEXCMD} ${latexsrc}

%.pdf: %.ps
	${PS2PDF} $<

installdirs: ${installdirs}

${installdirs}:
	mkdir $@

# nothing to install in doc

install: ${allpdf} ${doc_pdf_output} 
	@echo " "
	@for file in `ls -1 *.pdf`; do \
	  echo "Install $${file} to ${doc_pdf_output}/";\
	  ${INSTALL_DATA} $${file} ${doc_pdf_output}/; \
	done
	@for file in ${direct_copies}; do \
	  echo "Install $${file} to ${doc_pdf_output}/";\
	  ${INSTALL_DATA} $${file} ${doc_pdf_output}/; \
	done
	@echo " "

uninstall:
	@echo " "
	@for file in `ls -1 *.pdf`; do \
	  echo "Removing $${file} from ${doc_pdf_output}/";\
	  ${UNINSTALL} ${doc_pdf_output}/$${file} /; \
	done
	@echo " "

##---------------------------------------------------------------------------##
## dependencies in the build system
# Makefile depends on all of the M4 files in the config directory
## and the pkg_config directory

configfiles := $(wildcard ${top_srcdir}/${rel_config_dir}/*.m4) \
	$(wildcard ${top_srcdir}/${rel_config_dir}/../pkg_config/*.m4)

configure:
	@echo "Rebuilding ${top_srcdir}/aclocal.m4"
	@cd ${top_srcdir} && aclocal -I ${rel_config_dir} ${pkg_config_inc}
	@echo "Rebuilding ${top_srcdir}/configure"
	@cd ${top_srcdir} && autoconf
	@cd ${reldir} && ./config.status --recheck
	@cd ${reldir} && ./config.status

reconfigure:
	@cd ${reldir} && ./config.status --recheck
	@cd ${reldir} && ./config.status

##---------------------------------------------------------------------------##
## clean rules

clean:
	rm -f *.dvi *.ps *.log *.aux *.blg *.bbl *.idx *.ilg *.ind
	rm -f *.toc *.lof *.lot *.bib *.bbl *.blg
	rm -f *.ps *.pdf
	rm -f *.flc *~ *.tmp? ${texlog} ${texdvi} ${texps}
	rm -f ${dirstoclean}

clean-tex:
	rm -f *.log *.aux *.pdf 
	rm -f *.toc *.lof *.lot

distclean: mostlyclean
	-rm config.status config.cache config.log config.h stamp-h
	-rm -f Makefile site.exp autom4te.cache

mostlyclean: clean
	-rm *.o *.d

# maintainer-clean does not delete "configure"

maintainer-clean: forced-maintainer-clean distclean
forced-maintainer-clean:
	@echo 'This command is intended for maintainers to use; it'
	@echo 'deletes files that may need special tools to rebuild.'

# any other hand-coded dependencies or any thing **additional** can
# be put into Makefile.misc in the source directory

-include ${srcdir}/Makefile.misc

###############################################################################
# end of capsaicin/doc/vision_and_scope/Makefile
###############################################################################
