#-----------------------------*-cmake-*----------------------------------------#
# file   config/update_draco_config.cmake
# author Kelly Thompson <kgt@lanl.gov>
# date   2015 Apr 11
# brief  For multiconfig build tools, update draco_config script by replacing
#        BUILD_TYPE with current configuration name.
# note   Copyright (C) 2015, Los Alamos National Security, LLC.
#        All rights reserved.
#------------------------------------------------------------------------------#
# $Id$
#------------------------------------------------------------------------------#

# Pull some data out of the Cache
# file( STRINGS "${Draco_BINARY_DIR}/CMakeCache.txt" cct REGEX CMAKE_CONFIGURATION_TYPES )
set( CMAKE_CONFIGURATION_TYPES Debug Release MinSizeRel RelWithDebInfo )
set( DRACO_CONFIGURATION_TYPES "" )

foreach( bt ${CMAKE_CONFIGURATION_TYPES} )
   if( EXISTS ${Draco_BINARY_DIR}/${PACKAGE_PATH}/${bt} )
      list( APPEND DRACO_CONFIGURATION_TYPES ${bt} )
   endif()
endforeach()

# expected data
# message("
              # -D Draco_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}
              # -D CMAKE_CFG_INTDIR=${CMAKE_CFG_INTDIR}
              # -D DRACO_CONFIGURATION_TYPES=${DRACO_CONFIGURATION_TYPES}
              # -D CMAKE_CONFIGURATION_TYPES=${CMAKE_CONFIGURATION_TYPES}
              # -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
              # ")

# The draco_config.cmake script should be found here.  This file is initially 
# generated by draco/config/CMakeLists.txt.
set( config_file ${Draco_BINARY_DIR}/CMakeFiles/draco-config.cmake )
if( NOT EXISTS ${config_file} )
   message( FATAL_ERROR "Could not find file, config_file=${config_file}" )
endif()

#   
# Now parse the config-file and replace BUILD_TYPE with a multi-config equivalent.
#

file( READ ${config_file} config_file_content )
string( REPLACE ";" "\\;"
   config_file_content "${config_file_content}" ) 
# build types currently available: DRACO_CONFIGURATION_TYPES
unset(include_build_type)
foreach( bt ${DRACO_CONFIGURATION_TYPES} )
   set(include_build_type "${include_build_type}$<$<CONFIG:${bt}>:${bt}/>")
endforeach()
# ensure directories exist.
foreach( bt ${CMAKE_CONFIGURATION_TYPES} )
   if( NOT EXISTS ${CMAKE_INSTALL_PREFIX}/${bt}/include )
      file( MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX}/${bt}/include )
   endif()
endforeach()
if( NOT EXISTS ${CMAKE_INSTALL_PREFIX}/include )
   # This cmake expects this directory to exist on it's initial pass through this file.
   file( MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX}/include )
endif()
string( REPLACE "\${BUILD_TYPE}/" "${include_build_type}"
   config_file_content "${config_file_content}" )  

# Write the file directly to the installation directory (do not modify the version in the build tree)
file( WRITE ${CMAKE_INSTALL_PREFIX}/cmake/draco/draco-config.cmake ${config_file_content} )

# Also process the export targets
# ${Draco_BINARY_DIR}/CMakeFiles/Export/cmake/draco/draco-targets-*.cmake 
string( TOLOWER ${CMAKE_CFG_INTDIR} lc_config )

set( config_file ${Draco_BINARY_DIR}/CMakeFiles/Export/cmake/draco/draco-targets-${lc_config}.cmake )
if( NOT EXISTS ${config_file} )
   message( FATAL_ERROR "Could not find file, config_file=${config_file}" )
endif()

file( READ ${config_file} config_file_content )
string( REPLACE "\${BUILD_TYPE}" ${CMAKE_CFG_INTDIR} 
   config_file_content ${config_file_content} )
  
file( WRITE ${config_file} ${config_file_content} )
