2010-05-05  Kelly (KT) Thompson  <kgt@lanl.gov>

	* ac_doxygen.m4 (AC_AUTODOC_COMPONENT_TAGS): Provide links between
	  other packages and the Draco .tag files (i.e.: let ClubIMC
	  autodoc link directly to draco documentation.).

	* ac_draco_arg.m4 (AC_DRACO_ARG): Comment out the option for
	  --with-mips as it is deprecated. 

	* ac_f90env.m4 (AC_WITH_F90):  Clean up the output from
	  'configure --help' by using the m4 standard AS_HELP_STRING()
	  macro.
	  - same changes apply for ac_instrument.m4, ac_local.m4,
	  ac_vendors.m4, ac_draco_arg.m4.

	* ac_platforms.m4 (AC_DBS_PGF90_ENVIRONMENT): Strip the path from
	  the variable $CXX before trying to match it to a compiler name
	  in a case statement.  This allows the developer to have
	  CXX=/fully/qualified/path/g++ set in his/her environment. 

	* ac_vendors.m4 (AC_GANDOLF_SETUP): Only set $vendor_gandolf if
	  $with_gandolf != "no".

	* ac_vendors.m4 (AC_GANDOLF_FINALIZE): Added some logic (somewhat
	  beta still) to try and determine what libraries libgandolf.a
	  will need.  Older versions on Linux needed -lg2c, but newer
	  versions need -lgfortran (from gcc-4.1 and not gcc-4.3!).

	* doxygen_config.in: Add *.py *.h *.c to FILE_PATTERNS.

	* src/configure.ac (Level 2): Only include plot2D if grace was
	  found. 

2007-08-09  Mike Buksas  <mwbuksas@lanl.gov>

	* ac_vendors.m4 (Repository): Tim's tests for Gandolf as a
	dependency. 

	* ac_platforms.m4 (Repository): Added proper checking of
	executable for openMPI and added compiler options to disable
	including the C++ bindings.

	* ac_compiler.m4 (Repository): Added "basename" to tests on g++
	and gcc to fix configuration errors on Flash/Lightning

2006-05-26  Scott Turner  <turners@lanl.gov>

	* ac_f90env.m4: Changed Compaq compiler optimization from -O5 to -O4
	  since -O5 is causing failures in Zathras as of version
	  fortran_5.5A.7.

2006-05-02  Kelly Thompson  <kgt@lanl.gov>

	* Makefile.test.in: Replaced variable "binary_tests" with
	  "app_tests." Romoved some obsolete code.  Re-ordered the
	  declaration of unit test related variables.  Moved existance
	  checks for unit test variables to AC_DRACOENV funciton.

	* ac_conf.m4 (AC_RUNTESTS): Removed assignment of
	  "test_alltarget."  This is now done in the Makefile. Renamed
	  AC_TESTBINARY to AC_TEST_APPLICATION. 

	* ac_dracoenv.m4 (AC_DRACO_ENV): Provided additional checking for
	  variables related to unit testing.  These changes should prevent
	  the autoconf version dependency that appeared with the
	  2006-04-25 changes to the DBS.

	* ac_local.m4 (AC_DBS_VAR_SUBSTITUTIONS): Remove test_alltarget
	  from list of variables for AC_SUBST.  Rename binary_tests and
	  testbinary_nprocs to app_tests and app_test_nprocs,
	  respectively. 
	
2006-04-25  Kelly Thompson  <kgt@lanl.gov>

	* I am making a fundamental change to the way unit tests are 
          registered and executed under the Draco Build System.  But I
	  have made every effort ensure backward compatbility with 
	  existing syntax found in our configure.ac filse. The primay
	  change is the ability for a package to have both parallel and
	  scalar tests.  A secondary change is the availability of a new
	  configure keyword AC_TESTBINARY.  Usage is described below. To
	  ensure backward compatibility, the AC_RUNTESTS command looks the
	  same, but may be called multiple times.  For example: 

	  dnl Scalar tests
	  AC_RUNTESTS( tstMyClass1 tstMyClass4, scalar )

	  dnl Parallel tests
	  AC_RUNTESTS( tstMyClass2 tstMyClass3, 1 2 5)

	  If --with-c4=scalar, then all tests are run as scalar tests. The
	  same test executable cannot be run as both parallel and scalar.
	  Any unit test registered to be a parallel test must include
	  calls to rtt_c4::initialize (or MPI_Init).  Any test registered
	  as scalar must not include any call to an MPI function.


	  The new m4 macro AC_TESTBINARY has been implemented to support
	  a specific type of unit test on BPROC systems.  The Capsaicin
	  project has unit tests written in C++ that create new processes
	  that run under MPI.  For example, the unit test tstSerranoExe
	  will setup an input deck and execute 
	  "mpirun -np 4 ../bin/serrano test1.inp".  Output is captured and
	  evaluated by tstSerranoExe.  On most systems, this type of unit
	  test could be executed as a normal unit test.  However, BProc
	  systems do not allow mpirun to be executed from the
	  backend. Thus, AC_TESTBINARY tests will execute the unit test as
	  a scalar test with the expectation that an mpi process will be
	  started by the unit test.  This function takes two arguments: a
	  list of tests and a list of the number of processors to use when
	  running the binary under MPI.

	  Details:	

	* ac_conf.m4 (AC_RUNTESTS): Add checks for 2nd argument.  If 2nd
	  argument is "scalar" or "serial" then append test names to
	  $scalar_tests, if the 2nd argument is a number, then add the
	  test names to $parallel_tests and save the list of
	  $test_nprocs. 

	* ac_conf.m4 (AC_TESTBINARY): This new function should be called
	  from configure.ac.  It has the same form as AC_RUNTESTS, but is
	  designed to run each unit test in scalar, but passes the
	  $test_nprocs variable to the scalar unit test as an argument
	  "--np <N>" with the expectation that the unit test will execute
	  some other code (e.g.: serrano) through a system call that
	  starts mpirun (e.g.:
	  system("mpirun -np 2 ../bin/serrano test1.inp");)
	
	* ac_dracoenv.m4 (AC_DRACO_ENV): Updates reflect new AC_RUNTESTS
	  capabilties found in ac_conf.m4.  Lists of parallel and scalar
	  tests are stored seperately.  Some of the options that seperate
	  parallel and scalar tests have been moved into Makefile.test.in.

	* ac_local.m4 (AC_DBS_VAR_SUBSTITUTIONS): Provide AC_SUBST for the
	  new variables @scalar_tests@, @parallel_tests@, @binary_tests@
	  and @testbinary_nprocs@ so that these variables are available in
	  the package and unit test Makefiles.

	* Makefile.test.in (testing targets and variables): Provide
	  variables to hold $scalar_tests, $parallel_tests, $binary_tests
	  and $testbinary_nprocs.  Provide 3 new targets -- one for each
	  unit test type.  The target "check" will run all three cases.

	* Makefile.src.in (all): Changed the meaning of the target "all." 
	  The default target is now "install."  The target "all" now means
	  build and install all libraries and build all tests -- but do
	  not execute the tests.  This change reflects the need for such a
	  target on BProc systems where code is built on a compile-node,
	  but executed on a run-node. 

	* Makefile.package.in (all): Changed the meaning of the target
	  "all." Combined the target commands for "check" and "all."  The
	  target all will build package libraries and unit tests.  It does
	  not run the unit tests.  The default target only builds the
	  library (not the tests).	

	* Makefile.head.in (all): Redefine target "all" to build all
	  software and tests instead of only installable code.

	* Makefile.autodoc.in (all): Do not build autodoc with target
	  "all."
	
	* Makefile.test.in (F90 Flags): Make extra F90 autoconf variables
	  available to unit tests: @F90RPATH@, @F90VENDOR_LIBS@ and
	  @F90LIBS@.  These variables are not currently set by the
	  standard DBS environment, but can be set manually in the
	  configure.ac of a packages that includes F90 sources.  

2006-04-05  Kelly Thompson  <kgt@lanl.gov>

	* ac_instrument.m4: This new configure file provides macro
	  functions for setting up a build that uses one or more of the
	  following instrumenting tools: STLPort, BullseyeCoverage or
	  PurifyPlus. 

	  Use STLPort 	[only available for g++ on Linux]:
	
	  --with-stlport[=dir]

	  If [=dir] is not provided, configure checks the value of
	  $STLPORT_BASE_DIR.  If this environment variable is empty it
	  tries to use /codes/radtran/vendors/stlport/Linux.

          Use Coverage Tool   [only available for g++ on Linux]:
	
	  --with-coverage[=bullseye(default)|gcov]

	  Examines the value of $COVERAGE_BASE_DIR to determine location
	  of coverage tool.  If this environment variable is not set,
	  configure will look at /usr/local/bullseye.

	  Support for gcov is not implemented at this time.

	  Use Memory Checking   [only available for g++ on Linux]:
	
	  --with-memory-check[=purify(default)|insure]

	  This option is stubbed out for now.  I would like to provide a
	  capability to configure for PurifyPlus or Insure++ using a
	  format similar to that provided for STLPort and
	  BullseyeCoverage.	 
	
	* ac_platforms.m4 (AC_DBS_LAHEY_ENVIRONMENT): Modify the checks
	  for $CXX = g++ so that it ignores leading path information.

	* ac_platforms.m4 (AC_DBS_LINUX_ENVIRONMENT): For g++, add
	  -pthread to $CXXFLAGS if --with-trilinos or --with-stlport is
	  specified. 

	* ac_dracoenv.m4 (AC_DRACO_ENV): Move STLPort related functions to
	  ac_instrument.m4.  Replace call to AC_DBS_STLPORT_ENV with a
	  call to AC_DRACO_INSTR_ENV that is provided in the file
	  ac_instrument.m4.  

	* ac_dracoarg.m4 (AC_DRACO_ARGS): Replace help string for
	  --with-stlport by a call to AC_DRACO_INSTR_ARGS.  This new macro
	  function provides help strings for the instrumenting options
	  provided in the new config file ac_instrument.m4.

	* ac_compiler.m4 (AC_CPP_ENV): In the check for --with-cxx=pgi,
	  modify the test that checks $CXX = pgCC so that it ignores
	  leading path information.

2006-03-16  Kelly Thompson  <kgt@lanl.gov>

	* ac_dracoenv.m4 (AC_DBS_STLPORT_ENV): Remove settings for use of
	  optimized STLPort.  There appear to be problems with the
	  initialization of std::map containers in the optimized version.
	  In particular, Trilinos Teuchos doesn't function when built
	  against the optimized version of STLPort.

2005-07-06  Kelly Thompson  <kgt@lanl.gov>

	* ac_platforms (AC_DBS_COMPAQ_F90_ENVIRONMENT):  For OSF1,
	  encapsulate FORTRAN related compiler flags and variables into a
	  M4 function -- similar to what has already been done for Linux.
	  Also, define some new configure variables for F90 related setup
	  (F90FLAGS, F90MPIFLAGS, F90CXXFLAGS, F90VENDOR_LIBS).  These are
	  currently used by Capsaicin. 

	  
	  
	  

