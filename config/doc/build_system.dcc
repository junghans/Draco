//---------------------------------*-text-*-----------------------------------//
// build_system.dcc
// The Draco Build System Documenation
// This file is prepared by doxygen so that it can be part of the CCS-4
// development web site as well as a written report.
//---------------------------------------------------------------------------//
// $Id$
//---------------------------------------------------------------------------//

/*!

\page build_system The Draco Build System
\version LA-UR-03-0000
\author Tom Evans

Draco is a C++ radiation transport component library developed by CCS-4, Los
Alamos National Laboratory. In addition to providing infrastructure for
radiation transport code development, Draco serves as a "model Development
Environment (DE)" for code development activities within CCS-4.  Most CCS-4
code projects are based on the coding standards, idioms, style, organization,
and architecture of Draco.  In this vein, an important service that Draco
provides is its configure/make system, forwith referred to as the Draco Build
System (DBS).

Utilization of a common build system provides two primary benefits:
\arg code infrastructure maintainence is leveraged
\arg porting to new systems is leveraged.
The Draco build system has the following highlighted features:
\arg built using GNU AUTOCONF and GNU MAKE tools according to GNU Software
standards
\arg full C/C++ build support for gcc, KAI KCC, Compaq CXX, and SGI CC
\arg a well-defined C++ template instantiation model
\arg extensible vendor support for 
<a href="http://www.mcs.anl.gov/mpi/index.html">MPI</a>, 
<a href="http://sprng.cs.fsu.edu">SPRNG</a>,
<a href="http://www.netlib.org"> LAPACK and BLAS, ATLAS</a>,
GANDOLF, and EOSPAC
\arg parallel builds
\arg target-source architecture that protects source integrity and allows
multiple configurations from the same source
\arg limited FORTRAN support
\arg automated unit-testing framework
\arg DBS is exportable
\arg integrated with a set of elisp macros (for emacs, xemacs) that allows
automated package inclusion

Currently, the Draco Build System is supported on the following
systems/operating systems:
- SGI (IRIX64)
- Compaq (Tru64)
- Linux (i686-based platforms)
.
The DBS has been tested and verified on these systems.  The DBS has
been used on the following systems,
- SUN (Solaris)
. 
However, support for these systems is not guaranteed, nor are these
systems actively maintained.  We expect to have full, verified support
for IBM-AIX in the near future.  New systems will be added as required
by the Draco development and user community.

This document describes the Draco Build System. It contains the following
sections:
\arg \ref build describes how to configure and build Draco
\arg \ref arch describes the build system architecture including directory
structure, file-naming conventions, and template instantiation model
\arg \ref pkg describes how to add a new package to Draco
\arg \ref import describes how to import the DBS into other projects
\arg \ref system describes the inner workings of the DBS

These sections are aimed at three different audiences: users, developers, and
code architects.  The appropriate sections for each target group are:
\par Users
\ref build
\par Developers
\ref build, \ref arch, \ref pkg, \ref import,
\par Code Architects
\ref build, \ref arch, \ref pkg, \ref import, \ref system

This manual assumes that the reader is familiar with GNU MAKE (or UNIX MAKE
in general).  The examples cover AUTOCONF usage; however, we do not describe
all the details of AUTOCONF.  For those readers interested in the DBS
inner-workings described in section \ref system, the GNU MAKE and AUTOCONF
manuals (available with the software through the 
<a href="http://www.fsf.org">Free Software Foundation</a>) are invaluable and
necessary references.

\par Note on semantics
We use \e package to refer to the components sitting in Draco.  Thus, each
directory in draco/src is a package.  Examples are \c ds++ , \c c4, \c mc ,
etc. This usage is historical.  We realize that the word \e de \e jour in
LANL software circles is \e component.  Certainly, Draco is a component
library, and its constituent packages could be called components.  However,
the DBS uses the term package to refer to code components sitting in
draco/src, and that is the convention that will be used here.

<!---------------------------------------------------------------------------->

\section build Configuring and Building Draco 

The Draco Build System is based on GNU AUTOCONF and MAKE.  We have endeavored
to follow the GNU Coding Standards while designing the build system.  See 
Stallman, R. \e Gnu \e coding \e standards. Free Software Foundation, 1996,
for more details on the configure/make model of code development.

The basic steps to build Draco are the following:
-# create a target directory
-# run configure in target directory
-# run make in target directory
.
The following sections will show how to configure and build Draco using the
DBS.  For beginners, the easiest way to start may be to peruse the
examples section, \ref ex_builds.

\subsection configure Configuring Draco

The first step in the configure/make process is to build a target directory.
The source directory can be used as the target directory; however, this
prevents multiple configurations.  The best method is to generate a separate
target directory, which allows the user to generate multiple configurations
from the same source. Additionally, creating a disjoint target directory
preserves the sanctity of the source.  For demonstration purposes, $DRACO
refers to the Draco source directory and $BUILD refers to the target
directory; thus (> is the command prompt)
\verbatim
  > mkdir $BUILD
\endverbatim
Next, we need to choose an install location ($INSTALL).  After building the
$INSTALL location will have the following sub-directories:
- $INSTALL/bin : installed executables
- $INSTALL/lib : installed libraries
- $INSTALL/include : installed headers
- $INSTALL/libexec : build system tools
- $INSTALL/html : doxygenated documents (optional)
- $INSTALL/latex : doxygenated documents (optional)
.
The $BUILD and $INSTALL directories can be located anywhere (constrained by
permission).  For example, we have found it useful to define a install/target
tree such as $PATH/debug/build or $PATH/opt/build where
$PATH/opt or $PATH/debug is the $INSTALL directory and $PATH/debug/build or
$PATH/opt/build is the $BUILD directory.

Continuing, the basic configure step, in the absence of packages that require
vendors or other options, is
\verbatim
  > cd $BUILD
  > $DRACO/configure --prefix=$INSTALL
\endverbatim 
This configure step will build a mirror of the Draco direcotry source tree in
$BUILD. All package directories inside of the $DRACO/src directory are
configured.  After configuration the following directories (with build system
files inside them) will exist in $BUILD:
- $BUILD/src
- $BUILD/tools
- $BUILD/autodoc
.
Only directories that exist in the $DRACO source tree will be found in the
$BUILD directory tree.  For example, if the source version of Draco does not
have autodoc then there will be no $BUILD/autodoc directory.

Obviously, there are many options that dictate how Draco is built.  We
reserve this discussion until section \ref config_options.
Additionally, many Draco packages require vendors whose paths may need
to be specified at configure time.  See section \ref draco_pkgs for
details on the Draco package tree and required vendors.

\subsection make_draco Compiling and Installing Draco

Having configured Draco, compiling and installing is straightforward
\verbatim
  > cd $BUILD
  > make nj=2
\endverbatim
The MAKE variable \c nj is used to specify the number of processors to use
for the compiling/linking step.  MAKE runs different targets depending upon
the the directory level at which it is run.  Running MAKE under $BUILD will
actually do a compile + install for each Draco package sitting in $DRACO/src.
After this make is run the following directories will exist:
- $INSTALL/bin : installed executables
- $INSTALL/lib : installed libraries
- $INSTALL/include : installed headers
- $INSTALL/libexec : build system tools
- $INSTALL/html : doxygenated documents (optional)
- $INSTALL/latex : doxygenated documents (optional)
.
The first thing that MAKE does when it is run in $BUILD is install tools into
the $INSTALL/libexec directory.  These tools are necessary for subsequent
operations; thus, MAKE must be run in $BUILD before any other compile tasks
are performed.  Alternatively, one could run \c make \c install in
$BUILD/tools to install the tools.

After the tools are installed, MAKE will enter each $BUILD/src/\e pkg
directory and do a compile + install.  The \e pkg subdirectories are entered
in the appropriate order automatically to ensure that dependencies are
preserved.  The steps from a \c make in $BUILD are as follows:
-# enter $BUILD/tools and do a \c make \c install
-# enter $BUILD/src
-# enter $BUILD/src/\e pkg in order and do a \c make \c install
.

As inferred from this list, running MAKE at various directory levels has
different behavior.  The following table shows what default MAKE targets are
run at each directory level
<table> 
<caption align=top> Default MAKE targets when building in $BUILD. </caption>
<tr> 
<th> Directory </th>
<th> Default MAKE Target </th>
</tr>
<tr>
<td> $BUILD </td>
<td> install </td>
</tr>
<tr>
<td> $BUILD/src </td>
<td> install </td>
</tr>
<tr> 
<td> $BUILD/src/\e pkg </td>
<td> all </td>
</tr>
<tr>
<td> $BUILD/src/\e pkg /test </td>
<td> all </td>
</tr>
<tr>
<td> $BUILD/autodoc </td>
<td> all </td>
</td>
</table>   
Thus, running MAKE in $BUILD or $BUILD/src actually does a \c make \c install
in each subdirectory.  Running MAKE in the subdirectories does a build
(compile) of the package directory's principle targets.

The targets for each package directory in Draco are 
- an executable 
- a library 
- headers 
- a custom target 
- one or more of the above 
. 
The targets are determined by the package \c configure.in file.  Generating
this file is the subject of \ref pkg.  By default the executable will be the
package name.  The library will have the name \c lib${LIB_PREFIX}package.
The \c LIB_PREFIX variable can be set at configure time, see \ref
config_options.  By default \c LIB_PREFIX is set to \c rtt_. For example, the
\c ds++ package will produce a library called \c librtt_ds++.a(so).  As
described above, libraries are installed in $INSTALL/lib, headers in
$INSTALL/include/pkg, and executables in $INSTALL/bin.

The DBS allows the definition of custom targets through inclusion of a
\c Makefile.target file.  Sources for the build can also be customized
using a \c Makefile.source file.  Finally, a \c Makefile.misc can be
created for nearly any miscellaneous purpose. See section \ref system
for details on customizing the configure/make environment.

The DBS supports several (GNU) standard MAKE targets:      
<table> 
<caption> MAKE targets in the Draco DBS </caption>
<tr> 
<th> Target </th> 
<th> Description </th> 
</tr>
<tr>
<td> install </td> 
<td> installs targets in $INSTALL </td>
</tr>
<tr>
<td> check </td>
<td> builds and runs unit tests </td>
</tr>
<tr>
<td> clean </td>
<td> cleans directory (recursively) </td>
</tr>
<tr>
<td> distclean </td>
<td> cleans configuration files (recursively) </td>
</tr>
<tr>
<td> autodoc </td>
<td> runs doxygen (from $BUILD directory) </td>
</tr>
</table> 
Two items should be noted from this table.  First, doxygen
documentation is not generated by default.  One must run \c make 
\c autodoc from $BUILD or \c make from $BUILD/autodoc.  Second, the
unit tests are run using the \c make \c check command.  Unit tests can
be run recursively from any directory level.  For example, to run
every package's unit tests run \c make \c check from $BUILD.  To run
the \c c4 package unit tests run \c make \c check from $BUILD/src/c4
or $BUILD/src/c4/test.  More detail is given on the unit testing
support in \ref arch.

In each directory MAKE is run recursively.  For example, running \c make
inside of $BUILD/src will do a compile + install in each $BUILD/src
subdirectory.  However, it will not install the tools in $BUILD/tools.  One  
must run \c make in $BUILD or \c make \c install in $BUILD/tools to install 
the tools.

The default makefiles that are generated by configure contain several
variables that can be overridden at compile-time.  We saw one already,
\c nj for the number of processors to use in parallel builds.  Other
useful variables are:
- \c CXX : C++ compiler
- \c CC : C compiler
- \c INSTALL : install program
. 
For example, to build code using INSURE++ compile using the command 
\verbatim
  > make nj=2 CXX=insure
\endverbatim
See section \ref system for a more complete description of the
makefiles and variables defined in the DBS.

\subsection draco_pkgs Draco Packages and Vendors

Draco packages co-exist according the the principles of Levelized Software
Design (Lakos, J. \e Large-scale \e C++ \e software \e design. 1996).   The
current hierarchy of Draco packages is as follows:

\dotfile level.dot "Levelization diagram of the Draco packages. Dotted lines indicate testing dependencies" 

The Draco levelized architecture has significance for clients.
Clients wishing to use a high-level package must also include all of
its dependencies in the proper order.  For example, a client wishing
to utilize services in the \c mc package must include the following
libraries (packages) at link time:
\verbatim
  -lrtt_mc -lrtt_viz -lrtt_meshReaders -lrtt_traits -lrtt_rng -lrtt_c4 -lrtt_ds++
\endverbatim
Notice that \c mc depends on \c traits through its association with
the \c viz package.  Likewise, a Draco package utilizing \c mc will
also have these additional packages as dependencies, whether it
utilizes them directly or not.

As mentioned before, some Draco packages also rely on external
vendors. The vendor dependency can be optional or required.  For
example, \c c4 uses MPI; however, it can be compiled in a serial mode
that does not require MPI.  On the other hand, \c rng requires the
SPRNG library to be used in an application.  The following table lists
the Draco packages that have external vendor requirements:
<table>
<caption> Draco packages and their vendor requirements. </caption>
<tr> 
<th> Draco Package </th> 
<th> Vendor </th> 
<th> Required or Optional </th> 
</tr>
<!-- rng -->
<tr>
<td> \c rng </td>
<td> <a href="http://sprng.cs.fsu.edu">SPRNG</a> </td>
<td> required </td>
</tr>
<!-- lapack_wrap -->
<tr>
<td> \c lapack_wrap </td>
<td> <a href="http://www.netlib.org">LAPACK, BLAS</a> </td>
<td> required </td>
</tr>
<!-- plot2D -->
<tr>
<td> \c plot2D </td>
<td> <a href="http://plasma-gate.weizmann.ac.il/Grace">GRACE</a> </td>
<td> required </td>
</tr>
<!-- c4 -->
<tr>
<td> \c c4 </td>
<td> <a href="http://www.mcs.anl.gov/mpi/index.html">MPI</a> </td>
<td> optional </td>
</tr>
<!-- pcgWrap -->
<tr>
<td> \c pcgWrap </td>
<td> PCG, <a href="http://www.netlib.org">LAPACK, BLAS</a> </td>
<td> required </td>
</tr>
<!-- cdi_eospac -->
<tr>
<td> \c cdi_eospac </td>
<td> <a href="http://laurel.lanl.gov/PROJECTS/DATA/eos/eos.shtml">eospac</a> </td>
<td> required </td>
</tr>
<!-- cdi_gandolf -->
<tr>
<td> \c cdi_gandolf </td>
<td> <a href="http://laurel.lanl.gov/PROJECTS/DATA/atomic/atomdata.html">gandolf</a> </td>
<td> required </td>
</tr>
</table>
To use and test a package that requires a vendor, the vendor libraries
must be included at link time.  Some packages (\c rng for instance)
will not build at all if the vendor is not specified during the Draco
build.  Section \ref config_options shows how to tell Draco where
vendor libraries and include files are located.

External clients must remember to include vendor libraries when
loading Draco libraries.  Returning to the \c mc package example, the
\c rng package uses SPRNG and the \c c4 package may use MPI; thus, the
total link line should be:
\verbatim
  -lrtt_mc -lrtt_viz -lrtt_meshReaders -lrtt_traits -lrtt_rng -lrtt_c4 -lrtt_ds++ -llfg -lmpi
\endverbatim
where \c liblfg.a(so) is the SPRNG random number library.  The DBS
automatically includes these vendor libraries; thus, if the Draco DBS
is imported into client applications these dependencies will be taken
care of automatically.  See section \ref import for details.

\par Note on the \c c4 package 
The Draco parallel communication package, \c c4 (namespace rtt_c4),
can be built serial or parallel as described in \ref config_options.
The inclusion of \c c4 services into a package makes the package 
\e parallel.  Thus, running tests or applications with packages that
depend on \c c4 will require the use of \c mpirun or whatever
system-dependent machinations are required to run a parallel
executable.  The DBS automatically uses parallel execution semantics
on packages that depend on \c c4

\subsection config_options Configure Options

The DBS provides multiple configure options that can be used to tailor
the resulting build process.  For convenience we divide these options
into three general categories: build options, vendor options, and
Draco vendor options.  The Draco vendor options are only required when
importing the DBS into a client; thus, discussion of these configure
options is deferred until section \ref import.  Additionally, all of
the standard configure options exist although not all of them have
meaning in the DBS.  To get a list of configure options run configure
with the option \c --help:
\verbatim
  > $DRACO/configure --help
\endverbatim
This command produces a list of options with descriptions.  The
options after the heading 
\verbatim
  --enable and --with options recognized: 
\endverbatim
are defined by the DBS.  

We have already seen one option recognized by the DBS, \c --prefix.
This option tells the DBS where to install Draco.  In the DBS we use
\c --enable options for binary switches and \c --with options for
specifying an option.  Configure options of the form \c --with have
default behavior, default values for a given option (when the option's
value is unspecified), and valid arguments for a given option. The
following table summarizes the \c --with DBS build options:
<table>
<caption> \c --with build options in the DBS. </caption>
<tr>
<th> Option </th>
<th> Default </th>
<th> Default Argument </th>
<th> Valid arguments </th>
<th> Notes </th>
</tr>
<!-- lib-prefix -->
<tr>
<td> \c --with-lib-prefix </td>
<td> \c rtt_ </td>
<td> \c rtt_ </td>
<td> any string </td>
<td> sets the library name prefix </td>
</tr>
<!-- c4 -->
<tr>
<td> \c --with-c4 </td>
<td> \c serial </td>
<td> \c serial </td>
<td> \c mpi </td>
<td> builds a parallel \c c4 </td>
</tr>
<!-- dbc -->
<tr>
<td> \c --with-dbc </td>
<td> \c 7 </td>
<td> \c 7 </td>
<td> \c 0--7 </td>
<td>  see \ref dbc "below" </td>
</tr>
<!-- cxx -->
<tr>
<td> \c --with-cxx </td>
<td> system-dependent </td>
<td> \c gcc </td>
<td> \c gcc, \c kcc, \c compaq, \c sgi, \c guide </td>
<td>  see \ref config_compiler "below" </td>
</tr>
<!-- f90 -->
<tr>
<td> \c --with-f90 </td>
<td> system-dependent </td>
<td> system-dependent </td>
<td> \c XL, \c Lahey, \c Portland, \c Absoft, \c MIPS, \c Compaq, \c HP </td>
<td> manually specify FORTRAN compiler </td>
</tr>
<!-- opt -->
<tr>
<td> \c --with-opt </td>
<td> 0 </td>
<td> 0 </td>
<td> 0, ... , \f$ N_{c}\f$ </td>
<td> \f$ N_{c}\f$ is usually 3 </td>
</tr>
<!-- posix -->
<tr>
<td> \c --with-posix </td>
<td> system-dependent </td>
<td> system-dependent </td>
<td> system-dependent </td>
<td> sets POSIX_SOURCE macro </td>
</tr>
<!-- mips -->
<tr>
<td> \c --with-mips </td>
<td> 4 </td>
<td> 4 </td>
<td> \c 1,2,3,4 </td>
<td> sets MIPS on SGI </td>
</tr>
</table>
Binary switches of the form \c --enable are summarized in the
following table:
<table>
<caption> \c --enable and \c --disable build options in the DBS. </caption>
<tr>
<th> Option </th>
<th> Default </th>
<th> Action </th>
</tr>  
<!-- shared -->
<tr>
<td> \c --enable-shared </td>
<td> build archive (.a) libraries </td>
<td> build shared (.so) libraries </td>
</tr>
<!-- static-ld -->
<tr>
<td> \c --enable-static-ld </td>
<td> linker default </td>
<td> build a statically linked executable </td>
</tr>
<!-- strict-ansi -->
<tr>
<td> \c --disable-strict-ansi </td>
<td> compile strict </td>
<td> turn off strict compiling</td>
</tr>
<!-- one-per -->
<tr>
<td> \c --disable-one-per </td>
<td> make one template definition </td>
<td> turn off one-template definition (KCC only) </td>
</tr>
<!-- debug -->
<tr>
<td> \c --enable-debug </td>
<td> debug is on </td>
<td> \c --disable-debug turns off debug flags </td>
</tr>
<!-- 32-bit -->
<tr>
<td> \c --enable-32-bit </td>
<td> 64 bit </td>
<td> compile 32-bit (n32 on SGI only) </td>
</tr>
<!-- draco-stdhdrs -->
<tr>
<td> \c --enable-draco-stdhdrs </td>
<td> use compiler headers </td>
<td> use Draco version of <c\e lib > headers </td>
</tr>
<!-- latex-doc -->
<tr>
<td> \c --enable-latex-doc </td>
<td> doxygen produces html only </td>
<td> doxygen will produce LaTeX source </td>
</tr>
</table>
See the AUTOCONF manual for details on using configure options.

\anchor dbc The \c ds++ package contains a Design-by-Contract
implementation in Assert.hh.  The compile level of Design-by-Contract
is controlled by the \c --with-dbc configure option.  The following
settings apply
<table>
<caption> DBS configure-time DBC settings. </caption>
<tr>
<td> \c 0 </td>
<td> </td>
</tr>
<tr>
<td> \c 1 </td>
<td> \c Require </td>
</tr>
<tr>
<td> \c 2 </td>
<td> \c Check </td>
</tr>
<tr>
<td> \c 3 </td>
<td> \c Require \c Check </td>
</tr>
<tr>
<td> \c 4 </td>
<td> \c Ensure </td>
</tr>
<tr>
<td> \c 5 </td>
<td> \c Require \c Ensure </td>
</tr>
<tr>
<td> \c 6 </td>
<td> \c Check \c Ensure </td>
</tr>
<tr>
<td> \c 7 </td>
<td> \c Require \c Check \c Ensure </td>
</tr>
</table>
The default DBC setting is \c 7.

\anchor config_compiler The \c --with-cxx configure option specifies
the C++ compiler that will be used by the DBS.  The choice of compiler
overrides any system defaults.  The system defaults are:
<table>
<caption> Default C++ compilers for each computer system in the DBS. </caption>
<tr>
<td> Linux  </td>
<td> gcc </td>
</tr>
<tr>
<td> SGI (IRIX64) </td>
<td> CC </td>
</tr>
<tr>
<td> Compaq (Tru64) </td>
<td> CXX </td>
</tr>
<tr>
<td> SUN (Solaris) </td>
<td> KCC </td>
</tr>
</table>
The DBS also allows the use of KCC and GUIDE on all systems supported
by the DBS.

Finally, there is another set of configure options that allow
additional values to be added to Makefile flags.  These options
are:
<table>
<caption> Configure options for Makefile variables. </caption>
<tr>
<th> Option </th>
<th> Description </th>
</tr>
<!-- CPPFLAGS -->
<tr>
<td> \c --with-cppflags </td>
<td> add flags to \$CPPFLAGS </td>
</tr>
<!-- CXXFLAGS -->
<tr>
<td> \c --with-cxxflags </td>
<td> add flags to \$CXXFLAGS </td>
</tr>
<!-- CFLAGS -->
<tr>
<td> \c --with-cflags </td>
<td> add flags to \$CFLAGS </td>
</tr>
<!-- F90FLAGS -->
<tr>
<td> \c --with-f90flags </td>
<td> add flags to \$F90FLAGS </td>
</tr>
<!-- ARFLAGS -->
<tr>
<td> \c --with-arflags </td>
<td> add flags to \$ARFLAGS </td>
</tr>
<!-- LDFLAGS -->
<tr>
<td> \c --with-ldflags </td>
<td> add flags to \$LDFLAGS </td>
</tr>
<!-- LIBS -->
<tr>
<td> \c --with-libs </td>
<td> add libraries to \$LIBS </td>
</tr>
</table>
These flags are used as a stopgap measure on new or unpredictable
systems.  In general, only Draco developers and architects will use
these options.  See \ref system for more details on Makefile variables
in the DBS.

As \anchor no_option described in \ref draco_pkgs, many Draco packages
have external vendor requirements.  If configure is not given any
options, Draco will look for vendors in default compiler/linker
locations and the \c LD_LIBRARY_PATH.  These usually are \c /usr/lib,
\c /lib, etc.  If the vendor libraries and includes exist in a
non-common location, by which we mean a space that the compiler/linker
will not find by default, then configure must be told the location of
the vendor libraries and/or include files.

The general pattern for most vendor options is:
\verbatim
  --with-<vendor>      # vendor options
  --with-<vendor>-inc  # location of include files
  --with-<vendor>-lib  # location of library files
\endverbatim
Of course not all vendors have include or library locations.
Additionally, specifying an include or library path will override any
default search paths or locations specfied by \c LD_LIBRARY_PATH.
Also, each vendor include and directory option will read the default
environment variables:
\verbatim
  $VENDOR_LIB_DIR
  $VENDOR_INC_DIR
\endverbatim
For example, if SPRNG exists in \c /usr/local/sprng and we define
\verbatim
  SPRNG_LIB_DIR=/usr/local/sprng/lib
  SPRNG_INC_DIR=/usr/local/sprng/include
\endverbatim
then running configure with the following options,
\verbatim
  > $DRACO/configure --with-sprng-inc --with-sprng-lib
\endverbatim
will set the SPRNG include directory to \c $SPRNG_INC_DIR and the
SPRNG lib directory to \c $SPRNG_LIB_DIR.  Note that this is different
than not specifying any options for SPRNG.  If \c --with-sprng-lib is
not placed on the configure line then no directory location will be
set for the SPRNG library as described \ref no_option "above".  See 
\ref ex_builds for more examples.

The following tables summarize the vendor options supported by Draco:
<table>
<caption> Vendor options in the DBS, part I. </caption>
<tr>
<th> Vendor </th>
<th> Option </th>
<th> Default </th>
<th> Description </th>
</tr>
<!-- MPI -->
<tr>
<td> MPI </td>
<td> \c --with-mpi </td>
<td> \c vendor (\c mpich on LINUX) </td>
<td> set MPI to \c vendor or \c mpich </td>
</tr>
<tr>
<td> MPI </td>
<td> \c --with-mpi-inc </td>
<td> \c \$MPI_INC_DIR </td>
<td> location of MPI header files </td>
</tr>
<tr>
<td> MPI </td>
<td> \c --with-mpi-lib </td>
<td> \c \$MPI_LIB_DIR </td>
<td> location of MPI libraries </td>
</tr>
<!-- SPRNG -->
<tr>
<td> SPRNG </td>
<td> \c --with-sprng </td>
<td> \c lfg </td>
<td> set SPRNG library </td>
</tr>
<tr>
<td> SPRNG </td>
<td> \c --with-sprng-inc </td>
<td> \c \$SPRNG_INC_DIR </td>
<td> location of SPRNG header files</td>
</tr>
<tr>
<td> SPRNG </td>
<td> \c --with-sprng-lib </td>
<td> \c \$SPRNG_LIB_DIR </td>
<td> location of SPRNG libraries</td>
</tr>
</table>
<table>
<caption> Vendor options in the DBS, part II. </caption>
<tr>
<th> Vendor </th>
<th> Option </th>
<th> Default </th>
<th> Description </th>
</tr>
<!-- LAPACK -->
<tr>
<td> LAPACK </td>
<td> \c --with-lapack </td>
<td> \c vendor </td>
<td> use \c vendor or \c atlas implementation of BLAS/LAPACK</td>
</tr>
<tr>
<td> LAPACK </td>
<td> \c --with-lapack-lib </td>
<td> \c \$LAPACK_LIB_DIR </td>
<td> location of BLAS/LAPACK (or ATLAS) libraries</td>
</tr>
<!-- EOSPAC -->
<tr>
<td> EOSPAC </td>
<td> \c --with-eospac </td>
<td> \c eospac </td>
<td> name of the EOSPAC library (e.g. \c libeospac) </td>
</tr>
<tr>
<td> EOSPAC </td>
<td> \c --with-eospac-lib </td>
<td> \c \$EOSPAC_LIB_DIR </td>
<td> location of EOSPAC library </td>
</tr>
<!-- GANDOLF -->
<tr>
<td> GANDOLF </td>
<td> \c --with-gandolf </td>
<td> \c gandolf </td>
<td> name of the GANDOLF library (e.g. \c libgandolf) </td>
</tr>
<tr>
<td> GANDOLF </td>
<td> \c --with-gandolf-lib </td>
<td> \c \$GANDOLF_LIB_DIR </td>
<td> location of GANDOLF library</td>
</tr>
<!-- GRACE -->
<tr>
<td> GRACE </td>
<td> \c --with-grace </td>
<td> \c grace_np </td>
<td> name of the GRACE library (e.g. \c libgrace_np) </td>
</tr>
<tr>
<td> GRACE </td>
<td> \c --with-grace-inc </td>
<td> \c \$GRACE_INC_DIR </td>
<td> location of GRACE header files</td>
</tr>
<tr>
<td> GRACE </td>
<td> \c --with-grace-lib </td>
<td> \c \$GRACE_LIB_DIR </td>
<td> location of GRACE library</td>
</tr>
<!-- PCGLIB -->
<tr>
<td> PCG </td>
<td> \c --with-pcg </td>
<td> \c pcg </td>
<td> name of the PCG library (e.g. \c libpcg) </td>
</tr>
<tr>
<td> PCG </td>
<td> \c --with-pcg-lib </td>
<td> \c \$PCG_LIB_DIR </td>
<td> location of PCG library</td>
</tr>
</table>
The DBS automatically adds supporting libraries for these vendors for
each system.  For example, on LINUX the use of GANDOLF or EOSPAC
requires the addition of \c libg2c.  All that is required for proper
configuration is to tell Draco where the actual vendor libraries are
installed.   

\par Note on ATLAS
The DBS only loads the ATLAS libraries through the combination 
\c --with-lapack=atlas and \c --with-lapack-lib.  It does not support
using the C-headers for BLAS that ATLAS provides.

\par Note on ASCI machines
The LANL ASCI machines utilize modules to define many packages.  The
modules will place necessary include/library files into common
locations or a defined \c LD_LIBRARY_PATH.  Thus, it is (usually) not
necessary to specify the following options on ASCI machines:
\verbatim
  --with-mpi
  --with-mpi-lib
  --with-mpi-inc
  --with-lapack
  --with-lapack-lib
\endverbatim
The LAPACK options should only be overridden if the client wishes to
use ATLAS instead of the vendor implementations of LAPACK and BLAS.

\subsection ex_builds Example Builds

\par Example 1
Configure and build all of Draco on the CCS-4 LINUX network. We have
set the following:
\verbatim
  export SPRNG_INC_DIR=/codes/radtran/vendors/sprng/include
  export SPRNG_LIB_DIR=/codes/radtran/vendors/sprng/Linux/lib
  export MPI_INC_DIR=/usr/local/mpich/include
  export MPI_LIB_DIR=/usr/local/mpich/lib
\endverbatim
We wish to install Draco in /home/joe/draco-debug.  The Draco source
is checked out in /home/joe/draco.  Use ATLAS for BLAS/LAPACK. Here
are the steps:
\verbatim
  > cd /home/joe/draco-debug
  > mkdir draco
  > cd draco
  > ../../draco/configure --prefix=/home/joe/draco-debug --with-c4=mpi
    --with-mpi-inc --with-mpi-lib --with-sprng-inc --with-sprng-lib 
    --with-lapack=atlas
    --with-lapack-lib=/codes/radtran/vendors/atlas/Linux/lib
    --with-gandolf-lib=/codes/radtran/vendors/gandolf/Linux
    --with-eospac-lib=/codes/radtran/vendors/eospac/Linux/lib
    --with-grace-inc=/usr/local/grace/include
    --with-grace-lib=/usr/local/grace/lib
    --with-pcg-lib=/codes/radtran/vendors/pcg/Linux/lib
  > gmake nj=2
\endverbatim
This will build Draco using two processors. Now assume that we wish to
test the entire distribution:
\verbatim
  > cd /home/joe/draco-debug/draco
  > gmake check
\endverbatim

\par Example 2
A client wishes to use the \c cdi_gandolf package on Blue Mountain
(SGI IRIX64).  We will compile an optimized version of Draco for this
exercise using the KCC compiler.  Draco has been checked out into
\c /scratch/joe/draco.  The following packages sit under
\c /scratch/joe/draco/src: 
\verbatim
  ds++/ cdi/ cdi_gandolf/
\endverbatim
We will install Draco in /scratch/joe/draco-cdi.  Here are the steps:
\verbatim
  > cd /scratch/joe/draco-cdi
  > mkdir draco
  > cd draco
  > ../../draco/configure --prefix=/scratch/joe/draco-cdi --with-opt=3
    --with-dbc=0 --with-cxx=kcc
    --with-gandolf-lib=/usr/projects/atomic/gandolf/v3.6/lib/sgi-64
  > gmake nj=2
  > cd draco/src/cdi_gandolf
  > gmake check
\endverbatim
At the end of this configure/build we have checked the \c cdi_gandolf
package explicitly.  Instead, assume we wished to manually run the
\c tGandolfOpacity unit test:
\verbatim
  > cd /scratch/joe/draco-cdi/draco/src/cdi_gandolf/test
  > gmake tGandolfOpacity
  > ./tGandolfOpacity
\endverbatim

\par Example 3
A client wishes to use the \c mc package on the Q-machine (Compaq
Tru64).  Build an optimized version with shared libraries.  Draco has
been checked out into \c /scratch1/joe/draco.  It has the following
packages: 
\verbatim
  ds++/ rng/ meshReaders/ viz/ traits/ c4/
\endverbatim
To install in \c /scratch1/joe/draco-mc, we perform the following
steps:
\verbatim
  > cd /scratch/joe/draco-mc
  > mkdir draco
  > cd draco
  > ../../draco/configure --prefix=/scratch/joe/draco-mc --with-opt=3
    --with-dbc=1 --disable-debug --with-c4=mpi --enable-shared
    --with-sprng-inc=/usr/projects/jayenne/sprng/include
    --with-sprng-lib=/usr/projects/jayenne/sprng/OSF1/lib
  > gmake nj=8
\endverbatim
This version of Draco will have DBC \c Require active. The C++
compiler is CXX, which is the default for Compaq Tru64.  Notice that
we must provide the locations of the SPRNG libraries because \c mc
depends on \c rng which, in turn, depends on SPRNG.
 
<!---------------------------------------------------------------------------->

\section arch Build System Architecture

This is the build system architecture.
  
<!---------------------------------------------------------------------------->

\section pkg Adding a Package to Draco

New packages are easily added to Draco through the build system.

<!---------------------------------------------------------------------------->

\section import Importing the Draco Build System

The Draco Build System is designed to be imported into other codes.

<!---------------------------------------------------------------------------->
  
\section faq Frequenty Asked Questions

<ol>
  <li><i>When should I run autoconf?</i><br>
      During normal development you should not need to 
      run \c autoconf. </li>
</ol>

<!---------------------------------------------------------------------------->
  
\section system Draco Build System Reference Manual.

The Draco Build System components reside within the draco/config directory.

*/

//---------------------------------------------------------------------------//
//                              end of build_system.dcc
//---------------------------------------------------------------------------//
