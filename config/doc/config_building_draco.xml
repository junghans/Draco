<?xml version="1.0" encoding="UTF-8"?>
<section>
  <title>Configuring and Building Draco</title>

  <para>The Draco Build System is based on GNU AUTOCONF and MAKE. We have
  endeavored to follow the GNU Coding Standards while designing the build
  system. (See Stallman, R. <emphasis>Gnu coding standards</emphasis>.) For
  more details on the configure/make model of code development, see Free
  Software Foundation, 1996.</para>

  <para>The basic steps to build Draco are the following:</para>

  <orderedlist>
    <listitem>
      <para>obtain source code from the CVS repository</para>
    </listitem>

    <listitem>
      <para>create a targen directory</para>
    </listitem>

    <listitem>
      <para>run configure in target directory</para>
    </listitem>

    <listitem>
      <para>run make in target directory</para>
    </listitem>
  </orderedlist>

  <para>The following sections will sho how to configure and build Draco using
  the DBS. For beginners, the easiest way to start may be to persue the
  examples section, <link linkend="???">Example Builds</link>.</para>

  <section>
    <title>Configuring Draco</title>

    <para>The first step in the configure/make process is to build a target
    directory. The source directory can be used as the target directory;
    however, this prevents multiple configurations from the same source.
    Additionally, creating a disjoint target directory preserves the sanctity
    of the source. For demonstration purposes, <markup>$DRACO</markup> refers
    to the Draco source directory and <markup>$BUILD</markup> refers to the
    target directory; thus (&gt;is the command prompt)</para>

    <programlisting>&gt; mkdir $BUILD</programlisting>

    <para>Next, we need to chosse an install location
    (<markup>$INSTALL</markup>). After building the <markup>$INSTALL</markup>
    location, we will have the following sub-directories:</para>

    <itemizedlist>
      <listitem>
        <para><markup>$INSTALL/bin</markup> : installed executables</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/lib</markup> : installed libraries</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/include</markup> : installed headers</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/libexec</markup> : build system tools</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/html</markup> : doxygenated documents
        (optional)</para>
      </listitem>

      <listitem>
        <para><markup>&amp;INSTALL/latex</markup> : doxygenated documents
        (optional)</para>
      </listitem>
    </itemizedlist>

    <para>The <markup>$BUILD</markup> and <markup>$INSTALL</markup>
    directories can be located anywhere (constrained by permission). For
    example, we have found it useful to define an install/target tree such as
    <markup>$PATH/debug/build</markup> or <markup>$PATH/opt/build</markup>
    where <markup>$PATH/opt</markup> or <markup>$PATH/debug</markup> is the
    <markup>$INSTALL</markup> directory and <markup>$PATH
    /debug/buil</markup>d or <markup>$PATH/opt/build</markup> is the
    <markup>$BUILD</markup> directory. he <markup>$BUILD</markup> and the
    <markup>$INSTALL</markup> directories can be collocated.</para>

    <para>Continuing, the basic configure step, in the absence of packages
    that require vendors or other options, is:</para>

    <programlisting>&gt; cd $BUILD
&gt; $DRACO/configure --prefix=$INSTALL</programlisting>

    <para>This configure step will build a mirror of the Draco directory
    source tree in <markup>$BUILD</markup>. All package directories inside of
    the <markup>$DRACO/src</markup> directory are configured. After
    configuration, the following directories (with build system files inside
    them) will exist in <markup>$BUILD</markup>:</para>

    <itemizedlist>
      <listitem>
        <para><markup>$BUILD/src</markup></para>
      </listitem>

      <listitem>
        <para>$<markup>BUILD/tools</markup></para>
      </listitem>

      <listitem>
        <para><markup>$BUILD/autodoc</markup></para>
      </listitem>
    </itemizedlist>

    <para>Only directories that exist in the $DRACO source tree will be found
    in the $BUILD directory tree. For example, if the source version of Draco
    does not have autodoc then there will be no $BUILD/autodoc
    directory.</para>

    <para>Obviously, there are many options that dictate how Draco is built.
    We reserve this discussion for the section titled <link
    linkend="???">Configure Options</link>. Additionally, many Draco packages
    require vendors whose paths may need ot be specified at configure time.
    See section <link linkend="???">Draco Packages and Vendors</link> for
    details on the Draco package tree and required vendors.</para>
  </section>

  <section>
    <title>Compiling and Installing Draco</title>

    <para>Having configured Draco, compiling and installing is
    straightforward.</para>

    <programlisting>&gt; cd $BUILD
&gt; make nj=2</programlisting>

    <para>The MAKE optional variable nj is used to specify the number of
    processors to use for the compiling/linking step. MAKE runs different
    targets depending upon the directory level at which it is run. Running
    MAKE under <markup>$BUILD</markup> will actually do a compile + install
    for each Draco package sitting in <markup>$DRACO/src</markup>. After this
    make is run, the following directores will exist:</para>

    <itemizedlist>
      <listitem>
        <para><markup>$INSTALL/bin</markup> : installed executables</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/lib</markup> : installed libraries</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/include</markup> : installed headers</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/libexec</markup> : build system tools</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/html</markup>: doxygenated documents
        (optional)</para>
      </listitem>

      <listitem>
        <para><markup>$INSTALL/latex</markup> : doxygenated documents
        (optional)</para>
      </listitem>
    </itemizedlist>

    <para>The first thing that MAKE does when it is run in
    <markup>$BUILD</markup> is install tools into the
    <markup>$INSTALL/libexec</markup> directory. These tools are necessary for
    subsequent operations; thus, MAKE must be run in <markup>$BUILD</markup>
    before any other compile tasks are performed. Alternatively, one could run
    make install in <markup>$BUILD/tool</markup>s to install the tools.</para>

    <para>After the tools are installed, MAKE will enter each
    <markup>$BUILD/src/</markup><emphasis><markup>pkg</markup></emphasis>
    directory and do a compile + install. The <emphasis>pkg</emphasis>
    subdirectories are entered in the appropriate order automatically (this
    order is actually specified in <markup>draco.ac</markup>) to ensure that
    dependencies are preserved. The stpes from a MAKE in
    <markup>$BUILD</markup> are as follows:</para>

    <orderedlist>
      <listitem>
        <para>enter <markup>$BUILD/tools</markup> and do a make install</para>
      </listitem>

      <listitem>
        <para>enter <markup>$BUILD/src</markup></para>
      </listitem>

      <listitem>
        <para>enter <markup>$BUILD/src/pkg</markup> in order and do a make
        install</para>
      </listitem>
    </orderedlist>

    <para>As inferred from this list, running MAKE at various directory levels
    has a different behavior. The following table shows what default MAKE
    targets are run at each directory level.</para>

    <table>
      <title>Default MAKE Targets When Building in $BUILD</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Directory</entry>

            <entry align="center">Default MAKE Target</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><markup>$BUILD</markup></entry>

            <entry>install</entry>
          </row>

          <row>
            <entry><markup>$BUILD/src</markup></entry>

            <entry>install</entry>
          </row>

          <row>
            <entry><markup>$BUILD/src/pkg</markup></entry>

            <entry>all</entry>
          </row>

          <row>
            <entry><markup>$BUILD/src/pkg/test</markup></entry>

            <entry>all</entry>
          </row>

          <row>
            <entry><markup>$BUILD/autodoc</markup></entry>

            <entry>all</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Thus, running MAKE in <markup>$BUILD</markup> or
    <markup>$BUILD/src</markup> actually does a make install in each
    subdirectory. Running MAKE in the subdirectores does a build (compile) of
    the package directory's principle targets.</para>

    <para>The targets for each package directory in Draco are:</para>

    <itemizedlist>
      <listitem>
        <para>an executable</para>
      </listitem>

      <listitem>
        <para>a library</para>
      </listitem>

      <listitem>
        <para>headers</para>
      </listitem>

      <listitem>
        <para>a custom target</para>
      </listitem>

      <listitem>
        <para>one or more of the above</para>
      </listitem>
    </itemizedlist>

    <para>The targets are determined by the package configure .ac file.
    Generating this file is the subject of <link linkend="???">Adding a
    Package to Draco</link>. By default, the executable will be the package
    name. The library will have the name
    <markup>lib${LIB_PREFIX}package</markup>. The <markup>LIB_PREFIX</markup>
    variable can be set at configure time, see <link linkend="???">Configure
    Options</link>. By default, <markup>LIB_PREFIX</markup> is set to
    <markup>rtt_</markup>. For example, the <markup>dss++</markup> package
    will produce a library called l<markup>ibrtt_ds++.a(so)</markup>. As
    described above, libraries are installed in <markup>$INSTALL/lib</markup>,
    headers in <markup>$INSTALL/include/pkg</markup>, and executables in
    <markup>$INSTALL/bin</markup>. Draco libbraries have a custom prefix to
    prevent name clashes between system libraries and Draco libraires.</para>

    <para>The DBS allows the definitions of custom targets through inclusion
    of a <markup>Makefile.target</markup> file. Sources for the build can also
    be customized using a <markup>Makefile.source</markup> file. Finally, a
    <markup>Makefile.misc</markup> file can be created for nearly any
    miscellaneous purpose. See section <link linkend="???">Draco Build System
    Reference Manual</link> for details on customizing the configure/make
    environment.</para>

    <para>The DBS supports several (GNU) standard MAKE targets:</para>

    <table>
      <title>MADE Targets in the Draco DBS</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Target</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>install</entry>

            <entry>installs targets in <markup>$INSTALL</markup></entry>
          </row>

          <row>
            <entry>check</entry>

            <entry>builds and runs unit tests</entry>
          </row>

          <row>
            <entry>clean</entry>

            <entry>cleans directory (recursively). This should restore the
            build directory to a post-configure state.</entry>
          </row>

          <row>
            <entry>distclean</entry>

            <entry>cleans configuration files (recursively). This should
            restore the build directory to a pre-configure state.</entry>
          </row>

          <row>
            <entry>autodoc</entry>

            <entry>runs doxygen (from <markup>$BUILD</markup>
            directory)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Two items should be noted from this table. First, doxygen
    documentation is not generated by default. One must run make autodoc from
    <markup>$BUILD</markup> or make from <markup>$BUILD/autodoc</markup>.
    Second, the unit tests are run using the make check command. Unit tests
    can be run recursively from any directory level. For example, to run every
    package's unit tests, run make check from <markup>$BUILD</markup>. To run
    the c4 package unit tests, run make check from
    <markup>$BUILD/src/c4</markup> or <markup>$BUILD/src/c4/test</markup>.
    More detail is given on the unit testing support in <link
    linkend="???">Build System Architecure</link>.</para>

    <para>In each directory, MAKE is run recursively. For example, running
    make inside of <markup>$BUILD/src </markup>will do a compile + install in
    each <markup>$BUILD/src</markup> subdirectory. However, it will not
    install the tools in <markup>$BUILD/tools</markup>. One must run make in
    <markup>$BUILD</markup> or make install in <markup>$BUILD/tools</markup>
    to install the tools.</para>

    <para>The default makefiles that are generated by configure contain
    several variables that can be overridden at compile-time. We saw one
    already, nj, for the number of processors to use in parallel builds. Other
    useful variables are:</para>

    <itemizedlist>
      <listitem>
        <para><markup>CXX</markup> : C++ compiler</para>
      </listitem>

      <listitem>
        <para><markup>CC</markup> : C compiler</para>
      </listitem>

      <listitem>
        <para><markup>INSTALL</markup> : install program</para>
      </listitem>
    </itemizedlist>

    <para>For example, to build code using <markup>INSURE++</markup> compile
    using the command...</para>

    <para>See section <link linkend="???">Draco Build System Reference
    Manual</link> for a more complete description of the makefiles and
    variables deined in the DBS.</para>

    <programlisting>&gt; make nj+2 CXX=insure</programlisting>
  </section>

  <section>
    <title>Draco Packages and Vendors</title>

    <para>Draco packages co-exist according to the priciples of Levelized
    Software Design (Lakos, J. <emphasis>Large-Scale C++ Software
    Design</emphasis>. 1996). The current hierarchy of Draco packages is as
    follows: ***</para>

    <para>The Draco levelized architecture has significance for clients.
    Clients wishing to use a high-level package must also include the
    following libraries (packages) at link time:</para>

    <programlisting>-lrtt_mc -lrtt_viz -lrtt_meshReaders -lrtt_traits -lrtt_rng -lrtt_c4 -lrtt_ds++</programlisting>

    <para>Notice that mc depends on traits through its association with the
    viz package. Likewise, a Draco package utilizing mc will also have these
    addiotional packages as dependencies, whether it utilizes them directly or
    not.</para>

    <para>As mentioned before, some Draco packages also rely on external
    vendors. The vendor dependency can be optional or required. For example,
    c4 uses MPI; however, it can be compiled in a serial mode that does not
    require MPI. On the other hand, rng requires the SPRNG library to be used
    in an application. The following table lists the Draco pakcages that have
    external vendor requitements:</para>

    <table>
      <title>Draco Packages and Their Vendor Requirements</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Draco Package</entry>

            <entry align="center">Vendor</entry>

            <entry>Required or Optional</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>rng</entry>

            <entry>SPRNG</entry>

            <entry>required</entry>
          </row>

          <row>
            <entry>lapack_wrap</entry>

            <entry>LAPACK, BLAS</entry>

            <entry>required</entry>
          </row>

          <row>
            <entry>plot2D</entry>

            <entry>GRACE</entry>

            <entry>required</entry>
          </row>

          <row>
            <entry>c4</entry>

            <entry>MPI</entry>

            <entry>optional</entry>
          </row>

          <row>
            <entry>pcgWrap</entry>

            <entry>PCG, LAPACK, BLAS</entry>

            <entry>required</entry>
          </row>

          <row>
            <entry>cdi_eospac</entry>

            <entry>eospac</entry>

            <entry>required</entry>
          </row>

          <row>
            <entry>cdi_gandolf</entry>

            <entry>gandolf</entry>

            <entry>required</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>To use and test a package that requires a vendor, the vendor
    libraries must be included at link time. Some packages (rng for instance)
    will not build at all if the vendor is not specified during the Draco
    build. Secion <link linkend="???">Configure Options</link> shows how to
    tell Draco where vendor libraries and included files are located.</para>

    <para>External clients must remember to include vendor libraries when
    loading Draco libraries. Returing to the mc package example, the rng
    package uses SPRNG and the c4 package may use MPI; thus, the total link
    line should be:</para>

    <programlisting>-lrtt_mc -lrtt_viz_meshReaders -lrtt_traits -lrtt_rng -lrtt_c4 -lrtt_ds++ -llfg -lmpi</programlisting>

    <para>where l<markup>iblfg.a(so)</markup> is the SPRNG random number
    library. The DBS automatically includes these vendor libraries; thus, if
    the Draco DBS is imported into client applications, these dependences wil
    be taken care of automatically. See section <link linkend="???">Importing
    the Draco Build System</link> for details.</para>

    <note>
      <para>The Draco parallel communication package, c4 (namespace <emphasis
      role="bold">rtt_c4</emphasis>), can be built serial or parallel as
      diescribed in <markup>Confgure Options</markup>. The inclusion of c4
      services into a package makes the package <emphasis>parallel</emphasis>
      Thus, running tests or applications with packages that depend on c4 will
      require the use of mpirun or whatever system-dependent machinations are
      required to run a parallel executable. The DBS automatically uses
      parallel execution semantics on packages that depend on c4.</para>
    </note>
  </section>

  <section>
    <title>Configure Options</title>

    <para>The DBS provides multiple configure options that can be used to
    tailor the resuting build process. For convenience, we divide these
    options into three general categories: build options, vendor options, and
    Draco vendor options. The Draco vendor options are only required when
    importing the DBS into a client; thus, discussion of these configure
    options is deferred until section <link linkend="???">Importing the Draco
    Build System</link>. Additionally, all of the standard configure options
    exist although not all of them have meaning in the DBS. To get a list of
    configure options, run configure with the option
    <markup>--help</markup>:</para>

    <programlisting>&gt; $DRACO/configure --help</programlisting>

    <para>This command produces a list of options with descriptions. The
    options after the heading " <markup>--enable</markup> " and "
    <markup>--with options recognized</markup>: " are defined by the
    DBS.</para>

    <para>We have already seen one option recognized by the DBS,
    <markup>--prefix</markup>. This option tells the DBS where to install
    Draco. In the DBS we use <markup>--enable</markup> options for binary
    switches and <markup>--with</markup> options for specifying an option.
    Configure options on the form <markup>--with</markup> have default
    behacior, default values for a given option (when the option's values are
    unspecified), and valid argumnts for a gicen otion. The following table
    summarizes the <markup>--with</markup> DBS build options:</para>

    <table>
      <title>--with build options in the DBS.</title>

      <tgroup cols="5">
        <thead>
          <row>
            <entry align="center">Option</entry>

            <entry align="center">Default</entry>

            <entry>Default Argument</entry>

            <entry>Valid Arguments</entry>

            <entry>Notes</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><markup>--with-lib-prefix</markup></entry>

            <entry>rtt_</entry>

            <entry>rtt_</entry>

            <entry>any string</entry>

            <entry>sets the library name prefix</entry>
          </row>

          <row>
            <entry><markup>--with-c4</markup></entry>

            <entry>serial</entry>

            <entry>serial</entry>

            <entry>mpi</entry>

            <entry>builds a parallel c4</entry>
          </row>

          <row>
            <entry><markup>-with-dbc</markup></entry>

            <entry>7</entry>

            <entry>7</entry>

            <entry>0-7</entry>

            <entry>see <link linkend="???">below</link></entry>
          </row>

          <row>
            <entry><markup>--with-cxx</markup></entry>

            <entry>system-dependen</entry>

            <entry>gcc</entry>

            <entry>gcc, kcc, compaq, sgi, guid asciwhite ibm</entry>

            <entry>see <link linkend="???">below</link></entry>
          </row>

          <row>
            <entry><markup>--with-f90</markup></entry>

            <entry>system-dependent</entry>

            <entry>system-dependent</entry>

            <entry>XL, Lahey, Portland, Absoft, MIPS, Compaq, HP</entry>

            <entry>manually specify FORTRAN compiler</entry>
          </row>

          <row>
            <entry><markup>--with-opt</markup></entry>

            <entry>0</entry>

            <entry>0</entry>

            <entry>0, ... , Nc</entry>

            <entry>Nc is usually 3</entry>
          </row>

          <row>
            <entry><markup>--with-posix</markup></entry>

            <entry>system-dependent</entry>

            <entry>system-dependent</entry>

            <entry>system-dependent</entry>

            <entry>sets POSIX_SOURCE macro</entry>
          </row>

          <row>
            <entry><markup>--with-mips</markup></entry>

            <entry>4</entry>

            <entry>4</entry>

            <entry>1,2,3,4</entry>

            <entry>sets MIPS on SGI</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Binary switches of the form <markup>--enable</markup> are summarized
    in the following table:</para>

    <table>
      <title>--enable and --disable build options in the DBS</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Option</entry>

            <entry align="center">Default</entry>

            <entry>Action</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><markup>--enable-shared</markup></entry>

            <entry>build archive (.a) libraires</entry>

            <entry>build shared (.so) libraries</entry>
          </row>

          <row>
            <entry><markup>--enable-static-ld</markup></entry>

            <entry>linker default</entry>

            <entry>build a statically linked executable</entry>
          </row>

          <row>
            <entry><markup>--disable-strict-ansi</markup></entry>

            <entry>compile strict</entry>

            <entry>turn off strict compiling</entry>
          </row>

          <row>
            <entry><markup>--disable-one-per</markup></entry>

            <entry>make one template definition</entry>

            <entry>turn off one-template definition (KCC only)</entry>
          </row>

          <row>
            <entry><markup>enable-debug</markup></entry>

            <entry>debug is on</entry>

            <entry>--disable-debug turns off debug flags</entry>
          </row>

          <row>
            <entry><markup>enable-32-bit</markup></entry>

            <entry>64 bit</entry>

            <entry>compile 32-bit (n32 on SGI only)</entry>
          </row>

          <row>
            <entry><markup>--enable-draco-stdhdrs</markup></entry>

            <entry>use compiler headers</entry>

            <entry>use Draco version of C library headers</entry>
          </row>

          <row>
            <entry><markup>--enable-latex-doc</markup></entry>

            <entry>doxygen produces html only</entry>

            <entry>doxygen will produce LaTeX source</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>See the AUTOCONF manual for details on using standard configure
    options.</para>

    <para>The ds++ package contains a Design-by-Contract implementation in
    <link linkend="???">Assert.hh</link>. The compile level of
    Design-by-Contract is contolled by the --with-dbc configure option. The
    following settings apply:</para>

    <table>
      <title><emphasis role="bold">DBS Configure-Time DBC
      Settings</emphasis></title>

      <titleabbrev><emphasis role="bold"><emphasis>DBC
      Level</emphasis></emphasis></titleabbrev>

      <tgroup cols="4">
        <tbody>
          <row>
            <entry>0</entry>

            <entry></entry>
          </row>

          <row>
            <entry>1</entry>

            <entry>Require</entry>
          </row>

          <row>
            <entry>2</entry>

            <entry></entry>

            <entry>Check</entry>
          </row>

          <row>
            <entry>3</entry>

            <entry>Require</entry>

            <entry>&amp; Check</entry>
          </row>

          <row>
            <entry>4</entry>

            <entry></entry>

            <entry></entry>

            <entry>Ensure</entry>
          </row>

          <row>
            <entry>5</entry>

            <entry>Require</entry>

            <entry></entry>

            <entry>&amp; Ensure</entry>
          </row>

          <row>
            <entry>6</entry>

            <entry></entry>

            <entry>Check</entry>

            <entry>&amp; Ensure</entry>
          </row>

          <row>
            <entry>7</entry>

            <entry>Require,</entry>

            <entry>Check,</entry>

            <entry>&amp; Ensure</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The default DBC setting is 7. This makes all DBC tests
    active.</para>

    <para>The <markup>--with-cxx</markup> configure option specifies the C++
    compiler that will be used by the DBS. The choce of compiler overrides any
    system defaults. The system defaults are:</para>

    <table>
      <title>C++ Compilers for Each Computer System in the DBS</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Platform</entry>

            <entry align="center">Default</entry>

            <entry>Supported Alternates</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Linux</entry>

            <entry>gcc</entry>

            <entry>KCC and Intel</entry>
          </row>

          <row>
            <entry>SGI (IRIX64)</entry>

            <entry>CC</entry>

            <entry>KCC and gcc</entry>
          </row>

          <row>
            <entry>Compaq (Tru64)</entry>

            <entry>CXX</entry>

            <entry>KCC and gcc</entry>
          </row>

          <row>
            <entry>ASCI White (IBM-AIX)</entry>

            <entry>new(mp)xlC</entry>

            <entry>xiC and gcc</entry>
          </row>

          <row>
            <entry>IBM (AIX)</entry>

            <entry>xIC</entry>

            <entry>gcc</entry>
          </row>

          <row>
            <entry>SUN (Solaris)</entry>

            <entry>KCC</entry>

            <entry>-</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Finally, there is another set of configure options that allow
    additional values to be added to Makefile flags. These options are:</para>

    <table>
      <title>Configure Options for Makefile Variables</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Option</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><markup>--with-cppflags</markup></entry>

            <entry>add flags to <markup>$CPPFLAGS</markup></entry>
          </row>

          <row>
            <entry><markup>--with-cxxflags</markup></entry>

            <entry>add flags to <markup>$CXXFLAGS</markup></entry>
          </row>

          <row>
            <entry><markup>--with-cflags</markup></entry>

            <entry>add flags to <markup>$CFLAGS</markup></entry>
          </row>

          <row>
            <entry><markup>--with-f90flags</markup></entry>

            <entry>add flags to <markup>$F90FLAGS</markup></entry>
          </row>

          <row>
            <entry><markup>--with-arflags</markup></entry>

            <entry>add flags to <markup>$ARFLAGS</markup></entry>
          </row>

          <row>
            <entry><markup>--with-ldflags</markup></entry>

            <entry>add flags to <markup>$LDFLAGS</markup></entry>
          </row>

          <row>
            <entry><markup>--with-libs</markup></entry>

            <entry>add libraries to <markup>$LIBS</markup></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>These flags are used as a stopgap measure on new or unpredictable
    systems. In general, only Draco developers and architects will use these
    options. See <link linkend="???">Draco Build System Reference
    Manual</link> for more details on Makefile variables in the DBS. These
    flags may also be used for specialized compiles (e.g.: profiling, coverage
    analysis, etc.).</para>

    <para>As described in Draco Packages and Vendors, many Draco packages have
    external vendor requirements. If configure is not given any options, Draco
    will look for vendors in default compiler/linker locations and the
    <markup>LD_LIBRARY_PATH</markup>. These usually are
    <markup>/usr/lib</markup>, <markup>/lib</markup>, etc. If the vendor
    libraries and includes exist in a non-common location, by which we mean a
    space that the compiler/linker will not find by default, then configure
    must be told the location of the vendor libraries and/or include
    files.</para>

    <para>The general pattern for most vendor options is:</para>

    <programlisting>--with-&lt;vendor&gt;       # vendor options
--with-&lt;vendor&gt;-inc   # location of include files
--with-&lt;vendor&gt;-lib   # location of library files</programlisting>

    <para>Of course, not all vendors have include or library locations.
    Additionally, specifying an include or library path will override any
    default search paths or locations specified by
    <markup>LD_LIBRARY_PATH</markup>. Also, each vendor include and directory
    option will read the default environment variables:</para>

    <programlisting>$VENDOR_LIB_DIR
$VENDOR_INC_DIR</programlisting>

    <para>For example, if SPRNG exists in /usr/local/sprng and we
    define</para>

    <programlisting>SPRNG_LIB_DIR=/usr/local/sprng/lib
SPRNG_INC_DIR=/usr/local/sprng/include</programlisting>

    <para>then running configure with the following options,</para>

    <programlisting>&gt; $DRACO/configure --with-sprng-ing --with-sprng-lib</programlisting>

    <para>will set the SPRNG include directory to <markup>$
    SPRNG_INC_DIR</markup> and the SPRNG lib directory to
    <markup>$SPRNG_LIB_DIR</markup>. Note that this is different from not
    specifying any options for SPRNG. If <markup>--with-sprng-lib</markup> is
    not placed on the configure line then no directory location will be set
    for the SPRNG library as described <link linkend="???">above</link>. See
    <link linkend="???">Example Builds</link> for more examples.</para>

    <para>The following tables summarize the vendor options supported by
    Draco:</para>

    <table>
      <title>Vendor Options in the DBS, Part I</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Vendor</entry>

            <entry align="center">Option</entry>

            <entry>Default</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>MPI</entry>

            <entry><markup>--with-mpi</markup></entry>

            <entry>vendor (mpich on LINUX)</entry>

            <entry>set MPI to vendor or mpich</entry>
          </row>

          <row>
            <entry>MPI</entry>

            <entry><markup>--with-mpi-inc</markup></entry>

            <entry><markup>$MPI_INC_DIR</markup></entry>

            <entry>location of MPI header files</entry>
          </row>

          <row>
            <entry>MPI</entry>

            <entry><markup>--with-mpi-lib</markup></entry>

            <entry><markup>$MPI_LIB_DIR</markup></entry>

            <entry>location of MPI libraries</entry>
          </row>

          <row>
            <entry>SPRNG</entry>

            <entry><markup>--with-sprng</markup></entry>

            <entry>lfg</entry>

            <entry>set SPRNG library</entry>
          </row>

          <row>
            <entry>SPRNG</entry>

            <entry><markup>--with-sprng-inc</markup></entry>

            <entry><markup>$SPRNG_INC_DIR</markup></entry>

            <entry>location of SPRNG header files</entry>
          </row>

          <row>
            <entry>SPRNG</entry>

            <entry><markup>--with-sprng-lib</markup></entry>

            <entry><markup>$SPRNG_LIB_DIR</markup></entry>

            <entry>location of SPRNG libraries</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <table>
      <title>Vendor Options in the DBS, Part II</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Vendor</entry>

            <entry align="center">Option</entry>

            <entry>Default</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>LAPACK</entry>

            <entry><markup>--with-lapack</markup></entry>

            <entry>vendor</entry>

            <entry>use vendor or atlas implementation of BLAS/LAPACK</entry>
          </row>

          <row>
            <entry>LAPACK</entry>

            <entry><markup>--with-lapack-lib</markup></entry>

            <entry><markup>$LAPACK_LIB_DIR</markup></entry>

            <entry>location of BLAS/LAPACK (or ATLAS) libraries</entry>
          </row>

          <row>
            <entry>EOSPAC</entry>

            <entry><markup>--with-eospac</markup></entry>

            <entry>eospac</entry>

            <entry>name of the EOSPAC library (e.g.libeospac)</entry>
          </row>

          <row>
            <entry>EOSPAC</entry>

            <entry><markup>--with-eospac-lib</markup></entry>

            <entry><markup>$EOSPAC_LIB_DIR</markup></entry>

            <entry>location of EOSPAC library</entry>
          </row>

          <row>
            <entry>GANDOLF</entry>

            <entry><markup>--with-gandolf</markup></entry>

            <entry>gandolf</entry>

            <entry>name of GANDOLDF library (e.g.libgandolf)</entry>
          </row>

          <row>
            <entry>GANDOLF</entry>

            <entry><markup>--with-gandolf-lib</markup></entry>

            <entry><markup>$GANDOLF_LIB_DIR</markup></entry>

            <entry>location of GANDOLF library</entry>
          </row>

          <row>
            <entry>GRACE</entry>

            <entry><markup>--with-grace</markup></entry>

            <entry><markup>grace_np</markup></entry>

            <entry>name of the GRACE library (e.g.libgrace_np)</entry>
          </row>

          <row>
            <entry>GRACE</entry>

            <entry><markup>--with-grace-inc</markup></entry>

            <entry><markup>$GRACE_INC_DIR</markup></entry>

            <entry>location of GRACE header files</entry>
          </row>

          <row>
            <entry>GRACE</entry>

            <entry><markup>--with-grace-lib</markup></entry>

            <entry><markup>$GRACE_LIB-DIR</markup></entry>

            <entry>location of GRACE library</entry>
          </row>

          <row>
            <entry>PCG</entry>

            <entry><markup>--with-pcg</markup></entry>

            <entry>pcg</entry>

            <entry>name of PCG library (e.g.libpcg)</entry>
          </row>

          <row>
            <entry>PCG</entry>

            <entry><markup>--with-pcg-lib</markup></entry>

            <entry><markup>$PCG_LIB_DIR</markup></entry>

            <entry>location of PCG library</entry>
          </row>

          <row>
            <entry>Trilinos</entry>

            <entry><markup>--with-trilinos</markup></entry>

            <entry>aztec00</entry>

            <entry>name of Trilinos solver package (LAPACK vendor location
            must also be specified)</entry>
          </row>

          <row>
            <entry>Trilinos</entry>

            <entry>-<markup>-with-trilinos-inc</markup></entry>

            <entry><markup>$TRILINOS_INC_DIR</markup></entry>

            <entry>location of Trilinos header files</entry>
          </row>

          <row>
            <entry>Trilinos</entry>

            <entry><markup>--with-trilinos-lib</markup></entry>

            <entry><markup>$TRILINOS_LIB_DIR</markup></entry>

            <entry>location of Trilinos library</entry>
          </row>

          <row>
            <entry>Parmetis</entry>

            <entry><markup>--with-parmetis</markup></entry>

            <entry>.</entry>

            <entry>.</entry>
          </row>

          <row>
            <entry>Parmetis</entry>

            <entry><markup>--with-parmetis-inc</markup></entry>

            <entry><markup>$PARMETIS_INC_DIR</markup></entry>

            <entry>location of Parmetis header files</entry>
          </row>

          <row>
            <entry>Parmetis</entry>

            <entry><markup>--with-parmetis-lib</markup></entry>

            <entry><markup>$PARMETIS_LIB_DIR</markup></entry>

            <entry>location of Parmetis library</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The DBS automatically adds supporting libraries for these vendors
    for each system. For example, on LINUX, the use of GANDOLF or EOSPAC
    requires the addition of libg2c. All that is required for proper
    configuration is to tell Draco where the actual vendor libraries are
    installed.</para>

    <note>
      <para>The DBS only loads the ATLAS libraries throught the combination
      <markup>--with-lapack=atlas</markup> and
      <markup>--with-lapack-lib</markup>. It does not support using the
      C-headers for BLAL that ATLAS provides.</para>
    </note>

    <note>
      <para>The LANL ASCI machines utilize modules to define many packages.
      The modules will place necessary include/library files into common
      locations or a defined <markup>LK_LIBRARY_PATH</markup>. Thus, it is
      (usually) not necessary to specify the following options on ASCI
      machines:</para>
    </note>

    <programlisting>--with-mpi
--with-mpi-lib
--with-mpi-inc
--with-lapcak
--with-lapcak-lib</programlisting>

    <para>The LAPACK options should only be overridden if the client wishes to
    use ATLAS instead of the vendor implementations of LAPACK and BLAS.</para>

    <note>
      <para>Trilinos depends on the availability of LAPACK or ATLAS on the
      current machine for this build. Thus, if Trilinos is specified on the
      configure line, then you must also specify the location for
      LAPACK.</para>
    </note>

    <note>
      <para>ASCI White uses scripts for compilers, newmpxIC for MPI-based
      builds and newxIC for serial builds. If the default ASCI White compiler
      is used, then setting MPI include or library paths will result in
      link-time errors. Also, do not use cache (-C) when configuring on ASCI
      White.</para>
    </note>

    <note>
      <para>Below are some quick notes on how to build Draco on Lambda. I
      think everything is working except plot2D. Plot2D builds correctly and
      the tests run but are failing because of grace-version inconsistencies
      between lambda and the CCS-2/4 environment.</para>
    </note>

    <para>Rob- you might want to update your unit test so that only key parts
    of the output files are compared against the gold standard. The tests are
    failing when keys like "version number" are compated.</para>

    <programlisting>1. ssh onto lambda.
2. login to a worker node(s).
3. modules loaded:
   a. LaheyFortran95Pro_6.le
   b. autoconf_2.53
   c. automake_1.6.2
   d. gcc_3.0.4
   e. mpich_1.2.5-LaheyFortran95Pro-6.le
   f. totalview_6.3.1_0
4. work in Lambda's scratch space (/netscratch/&lt;moniker&gt;).
5. I configured with the following command (your paths and options may vary):

/  /netscratch/kellyt/draco/configure --prefix=/netscratch/kelly/draco/t \
   --with-c4=mpi --enable-debug --enable-shared --enable-shared \
   --with-sprng-inc=/usr/projects/draco/vendors/sprng/include \
   --with-sprng-lib=/usr/pojects/draco/vendors/sprng/Linux/lib \
   --with-mpi-inc=/usr/local/packages/mpich-1.2.5-LaheyFortran95Pro-6.le/include \
   --with-mpi-lib=/ust/local/packages/mpich-1.2.5-LaheyFortran95Pro-6.le/lib \
   --with-grace-inc=/usr/projects/draco/vendors/grace/Linux/include \
   --with-grace-lib=/usr/projects/draco/vendors/grace/Linux/lib \
   --with-pcg-lib=/usr/projects/draco/vendors/grace/Linux/include \
   --with-gandolf-lib=/usr/projects/atomic/gandolf/v3.6/lib/intel-linux \
   --with-eospac-lic=/usr/projects/data/eos/eospac/default/intel-linux/lib

6. gmake check
   </programlisting>

    <para>Using Lahey 6.2 breaks cdi_eospac. We must continue using Lahey 6.1
    or 6.2 until X-5 releases EOSPAC v6. gcc_3.2.1 and gcc_3.2.3 are broken.
    File stream input processing doesn't recognize a space as a delimiter. The
    consultants have been notified and are working on a fix. Your mpich module
    should align with your FORTRAN module.</para>
  </section>

  <section>
    <title>Example Builds</title>

    <example>
      <title>Example 1</title>

      <para>Configure and build all of Draco on the CCS-4 LINUX network. We
      have set the following:</para>

      <programlisting>export SPRNG_INC_DIR=/codes/radtran/vendors/sprng/include
export SPRNG_LIB_DIR=/codes/radtran/vendors/sprng/Linux/lib
export MPI_INC_DIR=/usr/local/mpich/include
export MPI_LIB_DIR=/usr/local/mpich/lib</programlisting>
    </example>

    <para>We wish to install Draco in <markup>/home/joe/draco-debug</markup>.
    The Draco source is checked out in <markup>/home/joe/draco</markup>. Use
    ATLAS for BLAS/LAPACK. Here are the steps:</para>

    <programlisting>&gt; cd /home/joe/draco-debug
&gt; mkdir draco
&gt; cd draco
&gt; ../../draco/configure --prefix=/home/joe/draco-debug --with-c4=mpi
  --with-mpi-inc --with-mpi-lib --with-sprng-inc --with-sprng-lib
  --with-lapack=atlas
  --with-lapack-lib=/codes/radtran/vendors/atlas/Linux/lib
  --with-gandolf-lib=/codes/radrran/cendors/eospac/Linux/lib
  --with-eospac-lib=/codes/radrran/vendors/eospac/Linux/lib
  --with-grace-inc=/usr/local/grace/include
  --with-grace-lib=/usr/local/grace/lib
  --with-pcg-lib=/codes/radtran/vendors/pcg/Linux/lib
&gt; gmake nj=2</programlisting>

    <para>In this example, we have assumed that the developer is logged into a
    worker node and that appropriate modules have been loaded.</para>

    <para>This will build Draco using tow processors. Now assume that we wish
    to test the entire distribution.</para>

    <programlisting>&gt; cd /home/joe/draco-debug/draco
&gt; gmake check</programlisting>

    <example>
      <title>Example 2</title>

      <para>A client wishes to use the cdi_gandolf package on Blue Mountain
      (SGI IRIX64). We will compile an optimized version of Draco for this
      exercise using the KCC compiler. Draco has been checked out into
      <markup>/scratch/joe/drac</markup>o. The following packages sit under
      <markup>/scratch/joe/draco/src</markup>:</para>

      <programlisting>ds++/ cdi/ cdi/gandolf/</programlisting>

      <para>We will install Draco in /scratch/joe/draco-cdi. Here are the
      steps:</para>

      <programlisting>&gt; cd /scrath/joe/draco-cdi
&gt; mkdir draco
&gt; cd draco
&gt; ../../draco/configure --prefix=/scratch/joe/draco-cdi --with-opt=3
  --with-dbc=0 --with-cxx-kcc
  --with-gandolf-lib=/ust/projects/atomic/gandolf/v3.6/lib/sgi-64
&gt; gmake nj=2
&gt; cd draco/src/cdi_gandolf
&gt; gmake check</programlisting>

      <para>At the end of this configure/build we have checked the cdi_gandolf
      package explicitly. Instead, assume we wished to manually run the
      <markup>tGandolfOpacity</markup> unit test:</para>

      <programlisting>&gt; cd /scratch/joe/draco-cdi/draco/src/cdi_gandolf/test
&gt; gmake tGandolfOpacity
&gt; ./tGandolfOpacity</programlisting>
    </example>

    <example>
      <title>Example 3</title>

      <para>A client wishes to use the mc package on the Q-machine (Compaq
      Tru64). Build an optimized version with shared libraries. Draco has been
      checked out into <markup>/scratch1/joe/draco</markup>. It has the
      follwoing packages:</para>

      <programlisting>ds++/ rng/ meshReaders/ viz/ traits/ c4/</programlisting>

      <para>To install in <markup>/scratich1/joe/draco-mc</markup>, we perform
      the follwing steps:</para>

      <programlisting>&gt; cd /scratch/joe/draco-mc
&gt; mkdir draco
&gt; cd draco
&gt; ../../draco/configure --prefix+/scratch/joe/draco-mc --with-opt+3
  --with-dbc+1 --disable-debug --with-c4+mpi --enable-shrared
  --with-sprng-inc=/usr/projects/jayenne/sprng/include
  --with-srpng=lib=/ust/projects/jayenne/sprng/OSF1/lib
&gt; gmake nj=8</programlisting>

      <para>This version of Draco will have DBC Require actibe. The C++
      compiler is CXX, which is the default for Compaq Tru64. Notice that we
      must provide the locations of the SPRNG libraries because mc depends on
      rng which, in turn, depends on SPRNG.</para>
    </example>
  </section>
</section>