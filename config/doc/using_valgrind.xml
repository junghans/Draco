<?xml version="1.0" encoding="UTF-8"?>
<section>
  <title>Using Valgrind With Marmot</title>

  <para><ulink url="http://valgrind.kde.org/overview.html">Valgrind</ulink> is
  a software tool used for analyzing memory leaks and detecting certain
  run-time application errors (array out-of-bounds accesses, uninitialized
  memory accesses, ...). Valgrind analyzes binaries at run-time without
  requiring any recompilation of the code. Valgrind creates a text file
  containing the results of the analysis. There are various front-end tools
  available for graphically analyzing the text dump, including <ulink
  url="http://alleyoop.sourceforge.net/">alleyoop</ulink>. Valgrind
  (currently) only runs on Linux machines.</para>

  <para>To use valgrind to analyze a Marmot executable (or any executable) ,
  do the following:</para>

  <procedure>
    <step>
      <para>Make sure valgrind is in your path or aliased</para>
    </step>

    <step>
      <para>Launch the application using valgrind</para>

      <para><remark>Example: valgrind --tool=memcheck
      test_Graphics_Manager</remark></para>
    </step>

    <step>
      <para>Output will be dumped to standard out if not re-directed with the
      <link linkend="anchor_1">--log-file</link> option</para>

      <example>
        <title>Valgrind Output</title>

        <programlisting>==16540== Memcheck, a memory error detector for x86-linux.
==16540== Copyright (C) 2002-2004, and GNU GPL'd, by Julian Seward et al.
==16540== Using valgrind-2.1.2, a program supervision framework for x86-linux.
==16540== Copyright (C) 2000-2004, and GNU GPL'd, by Julian Seward et al.
==16540== For more details, rerun with: -v
==16540==
Test: passed
     test_simple() get/set test ok.
Test: passed
     test_simple() copy ctor test ok.
Test: passed
     test_simple() assignment test ok.

*********************************************
**** test_Graphics_Manager.cc Test: PASSED
*********************************************

Done testing test_Graphics_Manager.cc.
==16540==
==16540== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 25 from 1)
==16540== malloc/free: in use at exit: 0 bytes in 0 blocks.
==16540== malloc/free: 15 allocs, 15 frees, 239 bytes allocated.
==16540== For a detailed leak analysis,  rerun with: --leak-check=yes
==16540== For counts of detected errors, rerun with: -v
</programlisting>
      </example>
    </step>

    <step>
      <para>Other valgrind command line options can provide more
      information</para>

      <itemizedlist>
        <listitem>
          <para><anchor id="anchor_1" />--log-file=&lt;file&gt; - write log
          message to &lt;file&gt;</para>
        </listitem>

        <listitem>
          <para>--leak-check=yes - provide a more detailed leak
          analysis</para>
        </listitem>

        <listitem>
          <para>--verbose - display much more detailed analysis</para>
        </listitem>

        <listitem>
          <para>--help - get help on valgrind usage</para>
        </listitem>
      </itemizedlist>
    </step>
  </procedure>
</section>