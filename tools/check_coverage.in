#!/bin/sh
##---------------------------------------------------------------------------##
## check_coverage.sh
##
## Run gcov and provide code coverage analysis.
##
## Should be run from the build directory at the top level.
##
##---------------------------------------------------------------------------##

## Information from configure

configure_command="@configure_command@"
toolsdir=@top_srcdir@
prefix=@prefix@

top_build_dir=`pwd`
top_source_dir=`echo $toolsdir | sed -e 's/\/tools//'`

# Remove "-n" to creage gcov files.
# gcov_opts=-n
gcov_opts=

# Header

date=`date`
pwd=`pwd`
echo "======================================================================"
echo "=== Coverage Analysis Tool                                         ==="
echo "===                                                                ==="
echo "=== Date: $date"
echo "=== PWD : $pwd"
echo "======================================================================"
echo

# DbC 1 - Must run this script from top level of build tree.

if ! test -d src; then
   echo "It does not look like you are in the top level build"
   echo "directory. Aborting..."
   exit;
else
   cd src
fi

#DbC 2 - Must have compiled with correct options
if test -z "`echo $configure_command | grep ftest-coverage`"; then
   echo "Must configure with the following command line option:"
   echo "   --with-cxxflags=\"-ftest-coverage -fprofile-arcs\""
   echo "Aborting..."
   exit;
fi

#DbC 3 - must be a debug version
if test -z "`echo $configure_command | grep enable-debug`"; then
   echo "Must configure with the following command line option:"
   echo "   --enable-debug"
   echo "Aborting..."
   exit;
fi

# get a list of package directories

packages=''
items=`ls -1`

# filter out non-directory entries
for item in $items; do
   if test -d $item; then
      packages="$packages $item"
   fi
done

# Run the unit tests to ensure that the .da, .bb and .bbg files
# have been created.

#kt   gmake check

# for each package check the coverage statistics:

for package in $packages; do
   curbdir=`pwd`
   cd $top_source_dir/src/$package
   ccfiles=`ls -1 *.cc 2>/dev/null`
   hhfiles=`ls -1 *.hh 2>/dev/null`
   ihhfiles=`ls -1 *.i.hh 2>/dev/null`
   files="$ihhfiles $hhfiles"
   cd $curbdir

   # Run the coverage tool

   cd $package
   echo " "
   echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> "
   echo ">>> Coverage analysis for package \"$package\":"
   echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> "
   echo " "
   echo "   -- Analysis of implementation files -- "
   echo " "

   for ccfile in $ccfiles; do
      output=`gcov $gcov_opts -o . $top_source_dir/src/$package/$ccfile | grep $ccfile`
      # strip everything after the first space.
      coverage=`echo $output | sed -e 's/ .*//'`
      # strip decimal
      coverage=`echo $coverage | sed -e 's/[.].*//'`
      if ! test "$coverage" = ""; then
         echo "   $ccfile: $coverage%"
      fi
   done

   # Look at header files.

   # This can be done by running gcov on the unit test executables
   # (actually the .da files) and grepping for the package header
   # names. 

   if test -d test; then
   cd test
    
   testfiles=`ls -1 *`
   unittests=``
   let "count = 0"
   for file in $testfiles; do
      if test -x $file; then
         unittests="$unittests $file.cc"
         let "count = count + 1"
      fi
   done

   if test $count = "0"; then
      echo "ERROR: Did not find any unit tests."
      echo "       Aborting..."
      exit
   fi

   versiondone=""

   for unittest in $unittests; do

      echo " "
      echo "   -- Analysis of header files via unit test $unittest -- "
      echo " "
      # Print the test version information.  This provides some
      # version info for the coverage analysis script and it also
      # executes the version() member function of Release.
      if test -z "$versiondone"; then
         binary=`echo $unittest | sed -e 's/.cc//'`
         info=`./$binary --version`
         echo "   $info"
         echo " "
         versiondone="yes"
      fi

      for file in $files; do
         output=`gcov $gcov_opts -o . $top_source_dir/src/$package/test/$unittest | grep $file`
         # If we catch the unittest name then skip to the next entry
	 lastword=`echo $output | sed -e 's/.* //'` 
         if ! test "$lastword" = "$unittest.gcov."; then
            # strip everything after the first space.
            coverage=`echo $output | sed -e 's/ .*//'`
	    # strip decimal
	    coverage=`echo $coverage | sed -e 's/[.].*//'`
            if ! test "$coverage" = ""; then
               echo "   $file: $coverage%"
            fi
         fi
      done
   done

   cd ..
   fi
   cd ..

done

echo " "
   echo "Examine .gcov files in build tree for specific information"
   echo "about lines covered by tests.  Each line is prepended by one"
   echo "of the following:"
   echo " "
   echo "   ####   Executable line not covered"
   echo "   [NNN]  Executable line covered NNN times"
   echo "   -      Non-executable line"
   echo " "

