#!/bin/sh
##---------------------------------------------------------------------------##
## build_ccs4_release
##
## (The Transport Methods group, CCS-4, merged with the Continuum Dynamics
##  group, CCS-2, to form a new group, Computational Physics, CCS-2, in
##  January, 2007.)
##
## Build draco or draco_client releases.  When provided a project
## source directory this script will build optimized and debug
## releases in a location relative to where this script is executed.
## We recommend that this script be run from $project_dir/$pkg/tools
## where $project_dir is one of the following:
##
##    /codes/radtran/vendors/ccs2-package-#_#_#
##
## on the CCS-2 Linux network or
## 
##    /usr/projects/draco/ccs2-package-#_#_#
##
## on the LANL ICN network or from a home directory as a test build.
##
##    $HOME/ccs2-package
##
## $pkg is a directory that contains source code and is typically the
## name of the CVS module (e.g.: "draco", "capsaicin", etc.)
##
## In all cases, the following directories will be created by this script:
##
##   $project_dir/$arch/debug
##   $project_dir/$arch/opt
##
## Be warned that $project_dir/$arch (if it exists) will be
## destroyed by this script.
##
## USAGE:
##
##    cd tools
##    ./build_ccs4_releases [--with-draco=PATH]
##
## When building Draco you should not include the --with-draco
## argument.  When building a Draco client specify the installation
## location for Draco.  For example to build capsaicin on the CCS-2
## Linux LAN I would execute the following commands (with
## $project_dir=/codes/radtran/vendors/capsaicin-3_7_2;
## $pkg=capsaicin)
##
##    cd /codes/radtran/vendors
##    mkdir capsaicin-3_7_2; cd capsaicin-3_7_2
##    cvs -d sf:/cvsroot/capsaicin co -P -r capsaicin-3_7_2 capsaicin
##    cd capsaicin/tools
##    ./build_ccs4_release --with-draco=/codes/radtran/vendors/draco-2_4_0/Linux/opt >& ../build.log
##
##---------------------------------------------------------------------------##

## Parse command line

echo " "
echo "Running $0 $*"
echo " "

cmd_args="$1 $2 $3 $4 $5 $6 $7 $8 $9"
for arg in $cmd_args; do

    case $arg in

    --with-draco=*)
	withdraco=$arg
        echo "$arg"
        echo "     Looks like we are building a Draco client."
        dracodir=`echo $withdraco | sed -e 's/.*=//'`
        if test -d $dracodir; then
           mydir=`pwd`
           cd $dracodir
           dracodir=`pwd`
           cd $mydir
           withdraco="--with-draco=$dracodir"
           echo "     Will configure client using $withdraco"
       else
           echo "     Request was made to build using --with-draco=$dracodir"
           echo "     but the directory \"$dracodir\" could not be found.  Aborting..."
           exit 1
       fi
       echo " "
    ;;

   --enable-shared)
       enable_shared="--enable-shared"
    ;;

   --client=*)
        clientname=`echo $arg | sed -e 's/.*=//'`
        echo "$arg"
        echo "     Looks like we are building a Draco client: $clientname"
	echo " "
    ;;

    --keep-build-dir*)
        keepbuilddirs="true"
        echo "$arg"
        echo "    The build tree will not be removed."
	echo " "
    ;;

    --help | -h)
        echo " "
	echo "$0"
        echo " "
        echo "This script will build an optimized and a debug version of Draco or a Draco"
        echo "client.  After building each version a set of regression tests will be run"
	echo "and a summary of sucess will be printed to standard out.  The install"
        echo "directories are created relative to the CWD.  The debug version will be"
        echo "installed at $cwd/../../\$arch/debug and the optimized version will be"
        echo "installed at $cwd/../../\$arch/opt.  \$arch will be the value of uname for"
	echo "the current machine."
        echo " "
	echo "Usage: build_ccs4_release <options>"
	echo " "
        echo "   --help                This message."
	echo "   --with-draco=<path>   This argument is not needed when building Draco."
        echo "            It is required to be present when building a Draco client."
        echo "            <path> is the fully qualified path to a Draco installation."
        echo "            e.g. /codes/radtran/vendors/draco/Linux/opt."
        echo "    --keep-build-dir     Do not remove the build tree after install and"
	echo "            testing is complete.  The default behavior is to remove the "
	echo "            build tree."
	echo "    --enable-shared      Create/Use shared libraries (.so).  The default"
        echo "            is to create/use static libraries (.a)."
        echo "    --client=<name>      This option is not currently used."
	echo " "
        exit
    ;;
    esac
done

## Check parameters

## if this is a Draco client (--with-draco specified) then check the
## draco libs to ensure that both Draco and Client use the same type
## of libraries (shared vs static).
if test -n "$withdraco"; then
   libext=`ls $dracodir/lib/lib*ds++.* | sed -e 's/.*[.]//'`
   if test -z $enable_shared && test "$libext" = "so"; then
      echo " "
      echo "ERROR: --enable-shared not specified but Draco libs appear to be shared libs."
      exit
   fi
   if test -n $enable_shared && test "$libext" = "a"; then
      echo " "
      echo "ERROR: --enable-shared specified by Draco libs appear to be static."
      exit
   fi
fi

## determine install directory names
arch=`uname`

## determine version from argument

pkg_src=`cd ..; pwd`
pkg_home=`cd $pkg_src/..; pwd`
pkg_debug="$pkg_home/$arch/debug"
pkg_opt="$pkg_home/$arch/opt"

if test -d $pkg_home/$arch ; then
    echo ">>> Ready to remove existing directory $pkg_home/$arch."
    echo -n ">>> Are you sure [y]? "
    read answer
    if test ${answer:-y} = y; then
    echo ">>> Removing old $pkg_home/$arch directory."
       rm -rf $pkg_home/$arch
    else
       echo" >>> Did not remove directory. Script aborted."
       exit
    fi
fi

echo ">>> Making $pkg_home/$arch."
mkdir $pkg_home/$arch
echo ">>> Making $pkg_debug."
mkdir $pkg_debug
echo ">>> Making $pkg_opt."
mkdir $pkg_opt

##---------------------------------------------------------------------------##

## options

case "$arch" in

Linux)

   # options common to Draco and Clients

   # source shmem-lahey version of mpich for building
   . /codes/mpi/bin/mpich.sh shmem-lahey

   MPI="--with-c4=mpi"
   MPI_INC="--with-mpi-inc"
   MPI_LIB="--with-mpi-lib"
   MPI="${MPI} ${MPI_INC} ${MPI_LIB}"

   LAPACK="--with-lapack=atlas"
   LAPACK_LIB="--with-lapack-lib=/codes/radtran/vendors/atlas/$arch/lib"
   LAPACK="${LAPACK} ${LAPACK_LIB}"

   GSL="--with-gsl-inc=/codes/radtran/vendors/gsl/$arch/include --with-gsl-lib=/codes/radtran/vendors/gsl/$arch/lib"

   # options for Draco only

   if test -z "$withdraco"; then
      SPRNG_INC="--with-sprng-inc=/codes/radtran/vendors/sprng/include"
      SPRNG_LIB="--with-sprng-lib=/codes/radtran/vendors/sprng/$arch/lib"
      SPRNG="${SPRNG_INC} ${SPRNG_LIB}"

      PCG_LIB="--with-pcg-lib=/codes/radtran/vendors/pcg/$arch/lib"

      GANDOLF_LIB="--with-gandolf-lib=/codes/radtran/vendors/gandolf/$arch"

      EOSPAC_LIB="--with-eospac-lib=/codes/radtran/vendors/eospac/$arch/lib"

      GRACE_INC="--with-grace-inc=/usr/local/grace/include"
      GRACE_LIB="--with-grace-lib=/usr/local/grace/lib"
      GRACE="${GRACE_INC} ${GRACE_LIB}"

   # options for clients only

   else

      TRILINOS="--with-trilinos=aztecoo"
      TRILINOS_INC="--with-trilinos-inc=/codes/radtran/vendors/trilinos/Linux/mpi/include"
      TRILINOS_LIB="--with-trilinos-lib=/codes/radtran/vendors/trilinos/Linux/mpi/lib"
      TRILINOS="${TRILINOS} ${TRILINOS_INC} ${TRILINOS_LIB}"

      METIS="--with-metis=metis"
      METIS_INC="/codes/radtran/vendors/metis/Lib"
      METIS_LIB="/codes/radtran/vendors/metis"
      METIS="${METIS} ${METIS_INC} ${METIS_LIB}"

   fi

   # Put the list together

   VENDORS="$MPI $SPRNG $PCG_LIB $LAPACK $GANDOLF_LIB $EOSPAC_LIB $GRACE"
   VENDORS="$VENDORS $TRILINOS $METIS $GSL"
   ;;

IRIX64)

   echo "This script not ready for IRIX64 platforms."
   exit 1

   ;;

OSF1)

   echo "This script not ready for OSF1 platforms."
   exit 1

   ;;

esac

##---------------------------------------------------------------------------##

## debug

if test ! -d $pkg_debug ; then
    echo "No $pkg_debug directory exists! Exiting"
    exit
fi

cd $pkg_debug
mkdir d
cd d

OPTIONS="$enable_shared $withdraco"
$pkg_src/configure --prefix=$pkg_debug $VENDORS $OPTIONS
gmake nj=2

gmake check > $pkg_debug/log

cd $pkg_debug
if test -z "$keepbuilddirs"; then
   rm -rf d
fi

python $pkg_src/tools/regression_filter.py < log

##---------------------------------------------------------------------------##

## opt

if test ! -d $pkg_opt ; then
    echo "No $pkg_opt directory exists! Exiting"
    exit
fi

cd $pkg_opt
mkdir d
cd d

OPTIONS="--with-opt=3 --disable-debug --with-dbc=0 $enable_shared $withdraco"
$pkg_src/configure --prefix=$pkg_opt $VENDORS $OPTIONS
gmake nj=2

gmake check > $pkg_opt/log

cd $pkg_opt
if test -z "$keepbuilddirs"; then
   rm -rf d
fi

python $pkg_src/tools/regression_filter.py < log
