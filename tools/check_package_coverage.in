#!/bin/sh
##---------------------------------------------------------------------------##
## check_package_coverage.sh
##
## Run gcov and provide code coverage analysis.
##
## Should be run from the package directory.
##
##---------------------------------------------------------------------------##

## Information from configure

configure_command="@configure_command@"
toolsdir=@top_srcdir@
prefix=@prefix@

top_source_dir=`echo $toolsdir | sed -e 's/\/tools//'`

build_dir=`pwd`
source_dir=$top_source_dir/src/`echo $build_dir | sed -e 's/.*\///'`

echo $source_dir


# Add "-n" to suppress creation of gcov files.
gcov_opts=


# Header

date=`date`
pwd=`pwd`
echo "======================================================================"
echo "=== Coverage Analysis Tool                                         ==="
echo "===                                                                ==="
echo "=== Date: $date"
echo "=== PWD : $pwd"
echo "======================================================================"
echo

#DbC 1 - Must have compiled with correct options
if test -z "`echo $configure_command | grep fprofile-arcs`"; then
   echo "Must configure with the following command line option:"
   echo "   --with-cxxflags=\"-fprofile-arcs\""
   echo "Aborting..."
   exit;
fi

#DbC 2 - must be a debug version
if test -z "`echo $configure_command | grep enable-debug`"; then
   echo "Must configure with the following command line option:"
   echo "   --enable-debug"
   echo "Aborting..."
   exit;
fi

cd $source_dir
ccfiles=`ls -1 *.cc 2>/dev/null`
hhfiles=`ls -1 *.hh 2>/dev/null`
ihhfiles=`ls -1 *.i.hh 2>/dev/null`
files="$ihhfiles $hhfiles"
cd $build_dir

echo " "
echo "   -- Analysis of implementation files -- "
echo " "

for ccfile in $ccfiles; do
  output=`gcov $gcov_opts -o . $source_dir/test/$ccfile`
  coverage=`echo $output | sed -e "s/.*$ccfile. Lines/Lines/" | sed -e "s/\/.*//"`
  firstword=`echo $coverage | sed -e "s/File.*/File/"`
  if ! test "$firstword" = "File"; then
    echo "$ccfile: $coverage"
  fi
done

# Look at header files.

# This can be done by running gcov on the unit test executables
# (actually the .da files) and grepping for the package header
# names. 

if test -d test; then
  cd test
    
  testfiles=`ls -1 -I*.so`
  unittests=``
  let "count = 0"
  for file in $testfiles; do
      if test -x $file; then
         unittests="$unittests $file.cc"
         let "count = count + 1"
      fi
  done

  if test $count = "0"; then
     echo "ERROR: Did not find any unit tests."
     echo "       Aborting..."
     exit
  fi


  versiondone=""

  for unittest in $unittests; do

      # Print the test version information.  This provides some
      # version info for the coverage analysis script and it also
      # executes the version() member function of Release.
      if test -z "$versiondone"; then
         binary=`echo $unittest | sed -e 's/.cc//'`
         info=`./$binary --version`
         #echo "   $info"
         #echo " "
         versiondone="yes"
      fi

      echo " "
      echo "   -- Analysis of header files via unit test $unittest -- "
      echo " "

      for file in $files; do
         output=`gcov $gcov_opts -o . $source_dir/test/$unittest`
  	 coverage=`echo $output | sed -e "s/.*$file. Lines/Lines/" |
    sed -e "s/\/.*//"`
	 firstword=`echo $coverage | sed -e "s/File.*/File/"`
	 if ! test "$firstword" = "File"; then
	   echo "$file: $coverage"
         fi
      done
   done

  cd ..
fi
