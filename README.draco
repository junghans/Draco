>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> DRACO RELEASE draco-6_1_0   
>>> CCS-2 Computational Physics Group      
>>> Copyright LANS LLC 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> $Id$
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Draco is an object-oriented component library geared towards
numerically intensive, radiation (particle) transport applications.
It consists of semi-independent packages and a robust build system.
The packages in draco provide a set of components that can be used by
multiple clients to build transport codes.  The build system can also
be extracted for use in clients.

Draco contains two sets of components.  Active components are
currently used and maintained.  Retired packages are no longer in use
by any clients.  Retired packages can be recovered from cvs by using
the tag <package>-retired or, in some cases, the last version of the
package (for packages that have been moved elsewhere) e.g. imc-4_0_0.

Draco development is performed by project teams within CCS-2.  The
following code projects use/supply code to draco: 

	1) JAYENNE   Todd Urbatsch <tmonster@lanl.gov>
	2) CAPSAICIN Jae Chang     <jhchang@lanl.gov>
	3) MACH      Rob Lowrie    <lowrie@lanl.gov>
	4) ZATHRAS   Scott Turner  <turners@lanl.gov>
        5) MARMOT    Rob Lowrie    <lowrie@lanl.gov>

Draco is governed by a board consisting of:

      Jim Warsa  <warsa@lanl.gov>
      Jon Dahl   <dahl@lanl.gov>
      Rob Lowrie <lowrie@lanl.gov>

A brief description of the packages in draco follows.

Active Draco Package Synopsis
=============================

rng [draco/src/rng]: A random number generator package.  It uses the
SPRNG (http://www.ncsa.uiuc.edu/Apps/SPRNG/) random number library.
This is essentially a wrapper to the SPRNG library.

units [draco/src/units]: Provides units standardization for
Draco. Contains Units class for representing arbitrary systems and
converting quantities to SI units.

radphys [draco/src/radphys]: Calculates parameters needed for
radiation physics in arbitrary units. Uses the units package to
represent units system.

quadrature [draco/src/quadrature]: {Get access to quadrature data}
Provides a creator class to generate quadrature objects.  Quadrature
objects encapsulate discrete ordinates angular differencing methods
and data.

cdi [draco/src/cdi]: {Get access to material data} The Common Data
Interface specifies an common abstraction for objects and libraries
that return material data (opacities, atomic cross sections,
equation-of-state data, etc.)

cdi_gandolf [draco/src/cdi_gandolf]: {Gray and M.G. Opacities} This
class wraps the FORTRAN gandolf libraries (local copy at
/radtran/vendors/gandolf).  The interface inherits from CDI/Opacity.hh
and can be used as a stand alone package or as a plug-in to CDI.  To
make this package available you must specify
--with-gandolf-lib=${path_to_libgandolf.a} when configuring.

cdi_eospac [draco/src/cdi_eospac]: {Equation-of-State data} This class
wraps the FORTRAN EOSPAC libraries (local copy at
/radtran/vendors/eospac).  The interface inherits from CDI/EOS.hh and
can be used as a stand alone package or as a plun-in to CDI.  To make
the package available you must specify
--with-eospac-lib=${path_to_libeospac.a} when configuring.

lapack_wrap [draco/src/lapack_wrap]: BLAS and LAPACK functionality for
C++.

Retired Draco Package Synopsis
==============================

meshReaders_Services [meshReaders_Services-retired] : A post-process mesh
package that built connectivity from mesh data read by meshReaders.

stdheaders [stdheaders-retired] : Standard headers for compilers that
didn't support std:: namespace.

mc [mc-4_0_0]: A low-level Monte Carlo support package.  This package
contains meshes and service classes that can be used for linear and
non-linear Monte Carlo transport. Moved to CLUBIMC component library.

imc [imc-4_0_0]: A Implicit Monte Carlo (imc) component library.  This
package contains a set of components including particles, sources, and
tallies that can be used to build IMC codes. Moved to CLUBIMC
component library.

stopwatch [stopwatch-retired] : Overly complicated timer package.

radphys [radphys-retired]: Radiation physics models for coefficients.

UnitTestFrame [UnitTestFrame-retired]: Testing framework.

ConjGrad [ConjGrad-retired]: A conjugate gradient solver.

amr_mesh [amr_mesh-retired]: An amr mesh implementation.

amr_mesh_fort [amr_mesh_fort-retired]: Fortran shadows to amr_mesh.

meshReaders_fort [meshReaders_fort-retired]: Fortran shadow to
meshReaders.

meshTest [meshTest-retired]: A test mesh that can be used to test
other draco components that require a Mesh Type.

LAMG [LAMG-retired]: An initial interface attempt for an Algebraic
Multigrid solver.

LAMGDiffusionSolver [LAMGDiffusionSolver-retired]:

fourier [fourier-retired]:

POOMA_MT [POOMA_MT-retired]:

P1Diffusion [P1Diffusion-retired]:

ConjGradDiffusionSolver [ConjGradDiffusionSolver-retired]:

mesh [mesh-retired]:

meshTest [meshTest-retired]:

PCGDiffusionSolver [PCGDiffusionSolver-retired]:

diffusion [diffusion-retired]:

matprops [matprops-retired]:

sn [sn-retired]:

======================================================================
